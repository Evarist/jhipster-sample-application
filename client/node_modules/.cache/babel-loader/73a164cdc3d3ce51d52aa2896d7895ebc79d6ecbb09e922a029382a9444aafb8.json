{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { ObjAssign, ObjClass, ObjDefineProperty, ObjHasOwnProperty, ObjProto, strShimFunction, strShimObject, strShimPrototype, strShimUndefined, throwTypeError } from \"@microsoft/applicationinsights-shims\";\nimport { _DYN_APPLY, _DYN_CALL, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_NAME, _DYN_PUSH, _DYN_REPLACE } from \"../__DynamicConstants\";\nimport { STR_EMPTY } from \"./InternalConstants\";\n// RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly\n// Added to help with minfication\nvar strToISOString = \"toISOString\";\nvar cStrEndsWith = \"endsWith\";\nvar cStrStartsWith = \"startsWith\";\nvar strIndexOf = \"indexOf\";\nvar strMap = \"map\";\nvar strReduce = \"reduce\";\nvar cStrTrim = \"trim\";\nvar strToString = \"toString\";\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\nvar str__Proto = \"__proto__\";\n/**\r\n  * Constant string defined to support minimization\r\n  * @ignore\r\n  */\nvar strConstructor = \"constructor\";\nvar _objDefineProperty = ObjDefineProperty;\nvar _objFreeze = ObjClass.freeze;\nvar _objSeal = ObjClass.seal;\nvar _objKeys = ObjClass.keys;\nvar StringProto = String[strShimPrototype];\nvar _strTrim = StringProto[cStrTrim];\nvar _strEndsWith = StringProto[cStrEndsWith];\nvar _strStartsWith = StringProto[cStrStartsWith];\nvar DateProto = Date[strShimPrototype];\nvar _dataToISOString = DateProto[strToISOString];\nvar _isArray = Array.isArray;\nvar _objToString = ObjProto[strToString];\nvar _fnToString = ObjHasOwnProperty[strToString];\n// Cache what this browser reports as the object function constructor (as a string)\nvar _objFunctionString = _fnToString[_DYN_CALL /* @min:%2ecall */](ObjClass);\nvar rCamelCase = /-([a-z])/g;\nvar rNormalizeInvalid = /([^\\w\\d_$])/g;\nvar rLeadingNumeric = /^(\\d+[\\w\\d_$])/;\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\nvar _objGetPrototypeOf = Object[\"getPrototypeOf\"];\n/**\r\n  * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n  * @ignore\r\n  */\nexport function _getObjProto(target) {\n  if (target) {\n    // This method doesn't existing in older browsers (e.g. IE8)\n    if (_objGetPrototypeOf) {\n      return _objGetPrototypeOf(target);\n    }\n    // target[Constructor] May break if the constructor has been changed or removed\n    var newProto = target[str__Proto] || target[strShimPrototype] || target[strConstructor];\n    if (newProto) {\n      return newProto;\n    }\n  }\n  return null;\n}\nexport function objToString(obj) {\n  return _objToString[_DYN_CALL /* @min:%2ecall */](obj);\n}\nexport function isTypeof(value, theType) {\n  return typeof value === theType;\n}\nexport function isUndefined(value) {\n  return value === undefined || typeof value === strShimUndefined;\n}\nexport function isNotUndefined(value) {\n  return !isUndefined(value);\n}\nexport function isNullOrUndefined(value) {\n  return value === null || isUndefined(value);\n}\nexport function isNotNullOrUndefined(value) {\n  return !isNullOrUndefined(value);\n}\nexport function hasOwnProperty(obj, prop) {\n  return !!(obj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](obj, prop));\n}\nexport function isObject(value) {\n  // Changing to inline for performance\n  return !!(value && typeof value === strShimObject);\n}\nexport function isFunction(value) {\n  // Changing to inline for performance\n  return !!(value && typeof value === strShimFunction);\n}\nexport function isPromiseLike(value) {\n  return value && isFunction(value.then);\n}\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * This is a simplified version\r\n * @param name The name to validate\r\n */\nexport function normalizeJsName(name) {\n  var value = name;\n  if (value && isString(value)) {\n    // CamelCase everything after the \"-\" and remove the dash\n    value = value[_DYN_REPLACE /* @min:%2ereplace */](rCamelCase, function (_all, letter) {\n      return letter.toUpperCase();\n    });\n    value = value[_DYN_REPLACE /* @min:%2ereplace */](rNormalizeInvalid, \"_\");\n    value = value[_DYN_REPLACE /* @min:%2ereplace */](rLeadingNumeric, function (_all, match) {\n      return \"_\" + match;\n    });\n  }\n  return value;\n}\n/**\r\n * This is a helper function for the equivalent of arForEach(objKeys(target), callbackFn), this is a\r\n * performance optimization to avoid the creation of a new array for large objects\r\n * @param target The target object to find and process the keys\r\n * @param callbackfn The function to call with the details\r\n */\nexport function objForEachKey(target, callbackfn) {\n  if (target) {\n    for (var prop in target) {\n      if (ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](target, prop)) {\n        callbackfn[_DYN_CALL /* @min:%2ecall */](target, prop, target[prop]);\n      }\n    }\n  }\n}\n/**\r\n * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\nexport function strEndsWith(value, search) {\n  var result = false;\n  if (value && search && !(result = value === search)) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    result = _strEndsWith ? value[cStrEndsWith](search) : _strEndsWithPoly(value, search);\n  }\n  return result;\n}\n/**\r\n * The _strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\nexport function _strEndsWithPoly(value, search) {\n  var result = false;\n  var searchLen = search ? search[_DYN_LENGTH /* @min:%2elength */] : 0;\n  var valLen = value ? value[_DYN_LENGTH /* @min:%2elength */] : 0;\n  if (searchLen && valLen && valLen >= searchLen && !(result = value === search)) {\n    var pos = valLen - 1;\n    for (var lp = searchLen - 1; lp >= 0; lp--) {\n      if (value[pos] != search[lp]) {\n        return false;\n      }\n      pos--;\n    }\n    result = true;\n  }\n  return result;\n}\n/**\r\n * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param checkValue - The characters to be searched for at the start of the value.\r\n * @returns true if the given search value is found at the start of the string, otherwise false.\r\n */\nexport function strStartsWith(value, checkValue) {\n  var result = false;\n  if (value && checkValue && !(result = value === checkValue)) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    result = _strStartsWith ? value[cStrStartsWith](checkValue) : _strStartsWithPoly(value, checkValue);\n  }\n  return result;\n}\n/**\r\n * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param checkValue - The characters to be searched for at the start of the value.\r\n * @returns true if the given search value is found at the start of the string, otherwise false.\r\n */\nexport function _strStartsWithPoly(value, checkValue) {\n  // Using helper for performance and because string startsWith() is not available on IE\n  var result = false;\n  var chkLen = checkValue ? checkValue[_DYN_LENGTH /* @min:%2elength */] : 0;\n  if (value && chkLen && value[_DYN_LENGTH /* @min:%2elength */] >= chkLen && !(result = value === checkValue)) {\n    for (var lp = 0; lp < chkLen; lp++) {\n      if (value[lp] !== checkValue[lp]) {\n        return false;\n      }\n    }\n    result = true;\n  }\n  return result;\n}\n/**\r\n * A simple wrapper (for minification support) to check if the value contains the search string.\r\n * @param value - The string value to check for the existence of the search value\r\n * @param search - The value search within the value\r\n */\nexport function strContains(value, search) {\n  if (value && search) {\n    return value[_DYN_INDEX_OF /* @min:%2eindexOf */](search) !== -1;\n  }\n  return false;\n}\n/**\r\n * Check if an object is of type Date\r\n */\nexport function isDate(obj) {\n  return !!(obj && _objToString[_DYN_CALL /* @min:%2ecall */](obj) === \"[object Date]\");\n}\n/**\r\n * Check if an object is of type Array with optional generic T, the generic type is not validated\r\n * and exists to help with TypeScript validation only.\r\n */\nexport var isArray = _isArray || _isArrayPoly;\nfunction _isArrayPoly(obj) {\n  return !!(obj && _objToString[_DYN_CALL /* @min:%2ecall */](obj) === \"[object Array]\");\n}\n/**\r\n * Check if an object is of type Error\r\n */\nexport function isError(obj) {\n  return !!(obj && _objToString[_DYN_CALL /* @min:%2ecall */](obj) === \"[object Error]\");\n}\n/**\r\n * Checks if the type of value is a string.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\nexport function isString(value) {\n  // Changing to inline for performance\n  return typeof value === \"string\";\n}\n/**\r\n * Checks if the type of value is a number.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\nexport function isNumber(value) {\n  // Changing to inline for performance\n  return typeof value === \"number\";\n}\n/**\r\n * Checks if the type of value is a boolean.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\nexport function isBoolean(value) {\n  // Changing to inline for performance\n  return typeof value === \"boolean\";\n}\n/**\r\n * Checks if the type of value is a Symbol.\r\n * This only returns a boolean as returning value is Symbol will cause issues for older TypeScript consumers\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Symbol, false otherwise.\r\n */\nexport function isSymbol(value) {\n  return typeof value === \"symbol\";\n}\n/**\r\n * Checks if the type of the value is a normal plain object (not a null or data)\r\n * @param value\r\n */\nexport function isPlainObject(value) {\n  var result = false;\n  if (value && typeof value === \"object\") {\n    // Inlining _objGetPrototypeOf for performance to avoid an additional function call\n    var proto = _objGetPrototypeOf ? _objGetPrototypeOf(value) : _getObjProto(value);\n    if (!proto) {\n      // No prototype found so this is a plain Object eg. 'Object.create(null)'\n      result = true;\n    } else {\n      // Objects that have a prototype are plain only if they were created using the Object global (native) function\n      if (proto[strConstructor] && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](proto, strConstructor)) {\n        proto = proto[strConstructor];\n      }\n      result = typeof proto === strShimFunction && _fnToString[_DYN_CALL /* @min:%2ecall */](proto) === _objFunctionString;\n    }\n  }\n  return result;\n}\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\nexport function toISOString(date) {\n  if (date) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    return _dataToISOString ? date[strToISOString]() : _toISOStringPoly(date);\n  }\n}\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\nexport function _toISOStringPoly(date) {\n  if (date && date.getUTCFullYear) {\n    var pad = function pad(num) {\n      var r = String(num);\n      if (r[_DYN_LENGTH /* @min:%2elength */] === 1) {\n        r = \"0\" + r;\n      }\n      return r;\n    };\n    return date.getUTCFullYear() + \"-\" + pad(date.getUTCMonth() + 1) + \"-\" + pad(date.getUTCDate()) + \"T\" + pad(date.getUTCHours()) + \":\" + pad(date.getUTCMinutes()) + \":\" + pad(date.getUTCSeconds()) + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5) + \"Z\";\n  }\n}\n/**\r\n * Performs the specified action for each element in an array. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype\r\n * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would\r\n * cause a testing requirement to test with and without the implementations\r\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. It can return -1 to break out of the loop\r\n * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n */\nexport function arrForEach(arr, callbackfn, thisArg) {\n  var len = arr[_DYN_LENGTH /* @min:%2elength */];\n  try {\n    for (var idx = 0; idx < len; idx++) {\n      if (idx in arr) {\n        if (callbackfn[_DYN_CALL /* @min:%2ecall */](thisArg || arr, arr[idx], idx, arr) === -1) {\n          break;\n        }\n      }\n    }\n  } catch (e) {\n    // This can happen with some native browser objects, but should not happen for the type we are checking for\n  }\n}\n/**\r\n * Returns the index of the first occurrence of a value in an array. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype\r\n * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would\r\n * cause a testing requirement to test with and without the implementations\r\n * @param searchElement The value to locate in the array.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\nexport function arrIndexOf(arr, searchElement, fromIndex) {\n  if (arr) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    if (arr[strIndexOf]) {\n      return arr[strIndexOf](searchElement, fromIndex);\n    }\n    var len = arr[_DYN_LENGTH /* @min:%2elength */];\n    var from = fromIndex || 0;\n    try {\n      for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) {\n        if (lp in arr && arr[lp] === searchElement) {\n          return lp;\n        }\n      }\n    } catch (e) {\n      // This can happen with some native browser objects, but should not happen for the type we are checking for\n    }\n  }\n  return -1;\n}\n/**\r\n * Calls a defined callback function on each element of an array, and returns an array that contains the results. This helper exists\r\n * to avoid adding a polyfil for older browsers that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page\r\n * checks for presence/absence of the prototype implementation. Note: For consistency this will not use the Array.prototype.xxxx\r\n * implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n */\nexport function arrMap(arr, callbackfn, thisArg) {\n  var results;\n  if (arr) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    if (arr[strMap]) {\n      return arr[strMap](callbackfn, thisArg);\n    }\n    var len = arr[_DYN_LENGTH /* @min:%2elength */];\n    var _this = thisArg || arr;\n    results = new Array(len);\n    try {\n      for (var lp = 0; lp < len; lp++) {\n        if (lp in arr) {\n          results[lp] = callbackfn[_DYN_CALL /* @min:%2ecall */](_this, arr[lp], arr);\n        }\n      }\n    } catch (e) {\n      // This can happen with some native browser objects, but should not happen for the type we are checking for\n    }\n  }\n  return results;\n}\n/**\r\n * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is\r\n * provided as an argument in the next call to the callback function. This helper exists to avoid adding a polyfil for older browsers that do not define\r\n * Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype implementation. Note: For consistency\r\n * this will not use the Array.prototype.xxxx implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n */\nexport function arrReduce(arr, callbackfn, initialValue) {\n  var value;\n  if (arr) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    if (arr[strReduce]) {\n      return arr[strReduce](callbackfn, initialValue);\n    }\n    var len = arr[_DYN_LENGTH /* @min:%2elength */];\n    var lp = 0;\n    // Specifically checking the number of passed arguments as the value could be anything\n    if (arguments[_DYN_LENGTH /* @min:%2elength */] >= 3) {\n      value = arguments[2];\n    } else {\n      while (lp < len && !(lp in arr)) {\n        lp++;\n      }\n      value = arr[lp++];\n    }\n    while (lp < len) {\n      if (lp in arr) {\n        value = callbackfn(value, arr[lp], lp, arr);\n      }\n      lp++;\n    }\n  }\n  return value;\n}\n/**\r\n * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n */\nexport function strTrim(str) {\n  if (str) {\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n    str = _strTrim && str[cStrTrim] ? str[cStrTrim]() : str[_DYN_REPLACE /* @min:%2ereplace */] ? str[_DYN_REPLACE /* @min:%2ereplace */](/^\\s+|(?=\\s)\\s+$/g, STR_EMPTY) : str;\n  }\n  return str;\n}\nvar _objKeysHasDontEnumBug = !{\n  toString: null\n}.propertyIsEnumerable(\"toString\");\nvar _objKeysDontEnums = [\"toString\", \"toLocaleString\", \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"constructor\"];\n/**\r\n * Returns the names of the enumerable string properties and methods of an object. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Object.keys eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.keys implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param obj Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n */\nexport function objKeys(obj) {\n  var objType = typeof obj;\n  if (objType !== strShimFunction && (objType !== strShimObject || obj === null)) {\n    throwTypeError(\"objKeys called on non-object\");\n  }\n  // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\n  if (!_objKeysHasDontEnumBug && _objKeys) {\n    return _objKeys(obj);\n  }\n  var result = [];\n  for (var prop in obj) {\n    if (obj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](obj, prop)) {\n      result[_DYN_PUSH /* @min:%2epush */](prop);\n    }\n  }\n  if (_objKeysHasDontEnumBug) {\n    var dontEnumsLength = _objKeysDontEnums[_DYN_LENGTH /* @min:%2elength */];\n    for (var lp = 0; lp < dontEnumsLength; lp++) {\n      if (obj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](obj, _objKeysDontEnums[lp])) {\n        result[_DYN_PUSH /* @min:%2epush */](_objKeysDontEnums[lp]);\n      }\n    }\n  }\n  return result;\n}\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @param target The object on which to define the property.\r\n * @param prop The name of the property to be defined or modified.\r\n * @param getProp The getter function to wire against the getter.\r\n * @param setProp The setter function to wire against the setter.\r\n * @returns True if it was able to create the accessors otherwise false\r\n */\nexport function objDefineAccessors(target, prop, getProp, setProp) {\n  if (_objDefineProperty) {\n    try {\n      var descriptor = {\n        enumerable: true,\n        configurable: true\n      };\n      if (getProp) {\n        descriptor.get = getProp;\n      }\n      if (setProp) {\n        descriptor.set = setProp;\n      }\n      _objDefineProperty(target, prop, descriptor);\n      return true;\n    } catch (e) {\n      // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw\n      // We will just ignore this here.\n    }\n  }\n  return false;\n}\nfunction _doNothing(value) {\n  return value;\n}\nexport function deepFreeze(obj) {\n  if (_objFreeze) {\n    objForEachKey(obj, function (name, value) {\n      if (isArray(value) || isObject(value)) {\n        _objFreeze(value);\n      }\n    });\n  }\n  return objFreeze(obj);\n}\nexport var objFreeze = _objFreeze || _doNothing;\nexport var objSeal = _objSeal || _doNothing;\n/**\r\n * Return the current time via the Date now() function (if available) and falls back to (new Date()).getTime() if now() is unavailable (IE8 or less)\r\n * https://caniuse.com/#search=Date.now\r\n */\nexport function dateNow() {\n  var dt = Date;\n  return dt.now ? dt.now() : new dt().getTime();\n}\n/**\r\n * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n */\nexport function getExceptionName(object) {\n  if (isError(object)) {\n    return object[_DYN_NAME /* @min:%2ename */];\n  }\n\n  return STR_EMPTY;\n}\n/**\r\n * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk\r\n * function will only be called if the new value is no equal to the original value.\r\n * @param target - The target object\r\n * @param field - The key of the target\r\n * @param value - The value to set\r\n * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set\r\n * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)\r\n * @returns The existing or new value, depending what was set\r\n */\nexport function setValue(target, field, value, valChk, srcChk) {\n  var theValue = value;\n  if (target) {\n    theValue = target[field];\n    if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {\n      theValue = value;\n      target[field] = theValue;\n    }\n  }\n  return theValue;\n}\n/**\r\n * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it\r\n * @param target - The target object to return or set the default value\r\n * @param field - The key for the field to set on the target\r\n * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added\r\n */\nexport function getSetValue(target, field, defValue) {\n  var theValue;\n  if (target) {\n    theValue = target[field];\n    if (!theValue && isNullOrUndefined(theValue)) {\n      // Supports having the default as null\n      theValue = !isUndefined(defValue) ? defValue : {};\n      target[field] = theValue;\n    }\n  } else {\n    // Expanded for performance so we only check defValue if required\n    theValue = !isUndefined(defValue) ? defValue : {};\n  }\n  return theValue;\n}\n/**\r\n * Get the mapped config value, if null or undefined any supplied defaultValue will be returned.\r\n * @param field - The name of the field as the named enum value (number) or the string name.\r\n * @param defaultValue - The default value to return if the config field is not present, null or undefined.\r\n */\nexport function getCfgValue(theValue, defaultValue) {\n  return !isNullOrUndefined(theValue) ? theValue : defaultValue;\n}\nexport function isNotTruthy(value) {\n  return !value;\n}\nexport function isTruthy(value) {\n  return !!value;\n}\nexport function throwError(message) {\n  throw new Error(message);\n}\nfunction _createProxyFunction(source, funcName) {\n  var srcFunc = null;\n  var src = null;\n  if (isFunction(source)) {\n    srcFunc = source;\n  } else {\n    src = source;\n  }\n  return function () {\n    // Capture the original arguments passed to the method\n    var originalArguments = arguments;\n    if (srcFunc) {\n      src = srcFunc();\n    }\n    if (src) {\n      return src[funcName][_DYN_APPLY /* @min:%2eapply */](src, originalArguments);\n    }\n  };\n}\n/**\r\n * Effectively assigns all enumerable properties (not just own properties) and functions (including inherited prototype) from\r\n * the source object to the target, it attempts to use proxy getters / setters (if possible) and proxy functions to avoid potential\r\n * implementation issues by assigning prototype functions as instance ones\r\n *\r\n * This method is the primary method used to \"update\" the snippet proxy with the ultimate implementations.\r\n *\r\n * Special ES3 Notes:\r\n * Updates (setting) of direct property values on the target or indirectly on the source object WILL NOT WORK PROPERLY, updates to the\r\n * properties of \"referenced\" object will work (target.context.newValue = 10 => will be reflected in the source.context as it's the\r\n * same object). ES3 Failures: assigning target.myProp = 3 -> Won't change source.myProp = 3, likewise the reverse would also fail.\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param chkSet - An optional callback to determine whether a specific property/function should be proxied\r\n */\nexport function proxyAssign(target, source, chkSet) {\n  if (target && source && isObject(target) && isObject(source)) {\n    var _loop_1 = function _loop_1(field) {\n      if (isString(field)) {\n        var value = source[field];\n        if (isFunction(value)) {\n          if (!chkSet || chkSet(field, true, source, target)) {\n            // Create a proxy function rather than just copying the (possible) prototype to the new object as an instance function\n            target[field] = _createProxyFunction(source, field);\n          }\n        } else if (!chkSet || chkSet(field, false, source, target)) {\n          if (hasOwnProperty(target, field)) {\n            // Remove any previous instance property\n            delete target[field];\n          }\n          if (!objDefineAccessors(target, field, function () {\n            return source[field];\n          }, function (theValue) {\n            source[field] = theValue;\n          })) {\n            // Unable to create an accessor, so just assign the values as a fallback\n            // -- this will (mostly) work for objects\n            // -- but will fail for accessing primitives (if the source changes it) and all types of \"setters\" as the source won't be modified\n            target[field] = value;\n          }\n        }\n      }\n    };\n    // effectively apply/proxy full source to the target instance\n    for (var field in source) {\n      _loop_1(field);\n    }\n  }\n  return target;\n}\n/**\r\n * Creates a proxy function on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param name - The function name that will be added on the target\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param theFunc - The function name on the source that will be proxied on the target\r\n * @param overwriteTarget - If `false` this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\nexport function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {\n  if (target && name && source) {\n    if (overwriteTarget !== false || isUndefined(target[name])) {\n      target[name] = _createProxyFunction(source, theFunc);\n    }\n  }\n}\n/**\r\n * Creates proxy functions on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param functionsToProxy - An array of function names that will be proxied on the target\r\n * @param overwriteTarget - If false this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\nexport function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {\n  if (target && source && isObject(target) && isArray(functionsToProxy)) {\n    arrForEach(functionsToProxy, function (theFuncName) {\n      if (isString(theFuncName)) {\n        proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);\n      }\n    });\n  }\n  return target;\n}\n/**\r\n * Simpler helper to create a dynamic class that implements the interface and populates the values with the defaults.\r\n * Only instance properties (hasOwnProperty) values are copied from the defaults to the new instance\r\n * @param defaults Simple helper\r\n */\nexport function createClassFromInterface(defaults) {\n  return (/** @class */function () {\n      function class_1() {\n        var _this_1 = this;\n        if (defaults) {\n          objForEachKey(defaults, function (field, value) {\n            _this_1[field] = value;\n          });\n        }\n      }\n      return class_1;\n    }()\n  );\n}\n/**\r\n * A helper function to assist with JIT performance for objects that have properties added / removed dynamically\r\n * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this\r\n * function after you have finished \"updating\" the object, calling this within loops reduces or defeats the benefits.\r\n * This helps when iterating using for..in, objKeys() and objForEach()\r\n * @param theObject - The object to be optimized if possible\r\n */\nexport function optimizeObject(theObject) {\n  // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties\n  // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent\n  if (theObject && ObjAssign) {\n    theObject = ObjClass(ObjAssign({}, theObject));\n  }\n  return theObject;\n}\nexport function objExtend(obj1, obj2, obj3, obj4, obj5, obj6) {\n  // Variables\n  var theArgs = arguments;\n  var extended = theArgs[0] || {};\n  var argLen = theArgs[_DYN_LENGTH /* @min:%2elength */];\n  var deep = false;\n  var idx = 1;\n  // Check for \"Deep\" flag\n  if (argLen > 0 && isBoolean(extended)) {\n    deep = extended;\n    extended = theArgs[idx] || {};\n    idx++;\n  }\n  // Handle case when target is a string or something (possible in deep copy)\n  if (!isObject(extended)) {\n    extended = {};\n  }\n  // Loop through each remaining object and conduct a merge\n  for (; idx < argLen; idx++) {\n    var arg = theArgs[idx];\n    var isArgArray = isArray(arg);\n    var isArgObj = isObject(arg);\n    for (var prop in arg) {\n      var propOk = isArgArray && prop in arg || isArgObj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](arg, prop);\n      if (!propOk) {\n        continue;\n      }\n      var newValue = arg[prop];\n      var isNewArray = void 0;\n      // If deep merge and property is an object, merge properties\n      if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {\n        // Grab the current value of the extended object\n        var clone = extended[prop];\n        if (isNewArray) {\n          if (!isArray(clone)) {\n            // We can't \"merge\" an array with a non-array so overwrite the original\n            clone = [];\n          }\n        } else if (!isPlainObject(clone)) {\n          // We can't \"merge\" an object with a non-object\n          clone = {};\n        }\n        // Never move the original objects always clone them\n        newValue = objExtend(deep, clone, newValue);\n      }\n      // Assign the new (or previous) value (unless undefined)\n      if (newValue !== undefined) {\n        extended[prop] = newValue;\n      }\n    }\n  }\n  return extended;\n}","map":{"version":3,"names":["ObjAssign","ObjClass","ObjDefineProperty","ObjHasOwnProperty","ObjProto","strShimFunction","strShimObject","strShimPrototype","strShimUndefined","throwTypeError","_DYN_APPLY","_DYN_CALL","_DYN_INDEX_OF","_DYN_LENGTH","_DYN_NAME","_DYN_PUSH","_DYN_REPLACE","STR_EMPTY","strToISOString","cStrEndsWith","cStrStartsWith","strIndexOf","strMap","strReduce","cStrTrim","strToString","str__Proto","strConstructor","_objDefineProperty","_objFreeze","freeze","_objSeal","seal","_objKeys","keys","StringProto","String","_strTrim","_strEndsWith","_strStartsWith","DateProto","Date","_dataToISOString","_isArray","Array","isArray","_objToString","_fnToString","_objFunctionString","rCamelCase","rNormalizeInvalid","rLeadingNumeric","_objGetPrototypeOf","Object","_getObjProto","target","newProto","objToString","obj","isTypeof","value","theType","isUndefined","undefined","isNotUndefined","isNullOrUndefined","isNotNullOrUndefined","hasOwnProperty","prop","isObject","isFunction","isPromiseLike","then","normalizeJsName","name","isString","_all","letter","toUpperCase","match","objForEachKey","callbackfn","strEndsWith","search","result","_strEndsWithPoly","searchLen","valLen","pos","lp","strStartsWith","checkValue","_strStartsWithPoly","chkLen","strContains","isDate","_isArrayPoly","isError","isNumber","isBoolean","isSymbol","isPlainObject","proto","toISOString","date","_toISOStringPoly","getUTCFullYear","pad","num","r","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","slice","arrForEach","arr","thisArg","len","idx","e","arrIndexOf","searchElement","fromIndex","from","Math","max","abs","arrMap","results","_this","arrReduce","initialValue","arguments","strTrim","str","_objKeysHasDontEnumBug","toString","propertyIsEnumerable","_objKeysDontEnums","objKeys","objType","dontEnumsLength","objDefineAccessors","getProp","setProp","descriptor","enumerable","configurable","get","set","_doNothing","deepFreeze","objFreeze","objSeal","dateNow","dt","now","getTime","getExceptionName","object","setValue","field","valChk","srcChk","theValue","getSetValue","defValue","getCfgValue","defaultValue","isNotTruthy","isTruthy","throwError","message","Error","_createProxyFunction","source","funcName","srcFunc","src","originalArguments","proxyAssign","chkSet","_loop_1","proxyFunctionAs","theFunc","overwriteTarget","proxyFunctions","functionsToProxy","theFuncName","createClassFromInterface","defaults","class_1","_this_1","optimizeObject","theObject","objExtend","obj1","obj2","obj3","obj4","obj5","obj6","theArgs","extended","argLen","deep","arg","isArgArray","isArgObj","propOk","newValue","isNewArray","clone"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ObjAssign, ObjClass, ObjDefineProperty, ObjHasOwnProperty, ObjProto, strShimFunction, strShimObject, strShimPrototype, strShimUndefined, throwTypeError } from \"@microsoft/applicationinsights-shims\";\r\nimport { _DYN_APPLY, _DYN_CALL, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_NAME, _DYN_PUSH, _DYN_REPLACE } from \"../__DynamicConstants\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n// RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly\r\n// Added to help with minfication\r\nvar strToISOString = \"toISOString\";\r\nvar cStrEndsWith = \"endsWith\";\r\nvar cStrStartsWith = \"startsWith\";\r\nvar strIndexOf = \"indexOf\";\r\nvar strMap = \"map\";\r\nvar strReduce = \"reduce\";\r\nvar cStrTrim = \"trim\";\r\nvar strToString = \"toString\";\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nvar str__Proto = \"__proto__\";\r\n/**\r\n  * Constant string defined to support minimization\r\n  * @ignore\r\n  */\r\nvar strConstructor = \"constructor\";\r\nvar _objDefineProperty = ObjDefineProperty;\r\nvar _objFreeze = ObjClass.freeze;\r\nvar _objSeal = ObjClass.seal;\r\nvar _objKeys = ObjClass.keys;\r\nvar StringProto = String[strShimPrototype];\r\nvar _strTrim = StringProto[cStrTrim];\r\nvar _strEndsWith = StringProto[cStrEndsWith];\r\nvar _strStartsWith = StringProto[cStrStartsWith];\r\nvar DateProto = Date[strShimPrototype];\r\nvar _dataToISOString = DateProto[strToISOString];\r\nvar _isArray = Array.isArray;\r\nvar _objToString = ObjProto[strToString];\r\nvar _fnToString = ObjHasOwnProperty[strToString];\r\n// Cache what this browser reports as the object function constructor (as a string)\r\nvar _objFunctionString = _fnToString[_DYN_CALL /* @min:%2ecall */](ObjClass);\r\nvar rCamelCase = /-([a-z])/g;\r\nvar rNormalizeInvalid = /([^\\w\\d_$])/g;\r\nvar rLeadingNumeric = /^(\\d+[\\w\\d_$])/;\r\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\r\nvar _objGetPrototypeOf = Object[\"getPrototypeOf\"];\r\n/**\r\n  * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n  * @ignore\r\n  */\r\nexport function _getObjProto(target) {\r\n    if (target) {\r\n        // This method doesn't existing in older browsers (e.g. IE8)\r\n        if (_objGetPrototypeOf) {\r\n            return _objGetPrototypeOf(target);\r\n        }\r\n        // target[Constructor] May break if the constructor has been changed or removed\r\n        var newProto = target[str__Proto] || target[strShimPrototype] || target[strConstructor];\r\n        if (newProto) {\r\n            return newProto;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function objToString(obj) {\r\n    return _objToString[_DYN_CALL /* @min:%2ecall */](obj);\r\n}\r\nexport function isTypeof(value, theType) {\r\n    return typeof value === theType;\r\n}\r\nexport function isUndefined(value) {\r\n    return value === undefined || typeof value === strShimUndefined;\r\n}\r\nexport function isNotUndefined(value) {\r\n    return !isUndefined(value);\r\n}\r\nexport function isNullOrUndefined(value) {\r\n    return (value === null || isUndefined(value));\r\n}\r\nexport function isNotNullOrUndefined(value) {\r\n    return !isNullOrUndefined(value);\r\n}\r\nexport function hasOwnProperty(obj, prop) {\r\n    return !!(obj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](obj, prop));\r\n}\r\nexport function isObject(value) {\r\n    // Changing to inline for performance\r\n    return !!(value && typeof value === strShimObject);\r\n}\r\nexport function isFunction(value) {\r\n    // Changing to inline for performance\r\n    return !!(value && typeof value === strShimFunction);\r\n}\r\nexport function isPromiseLike(value) {\r\n    return value && isFunction(value.then);\r\n}\r\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * This is a simplified version\r\n * @param name The name to validate\r\n */\r\nexport function normalizeJsName(name) {\r\n    var value = name;\r\n    if (value && isString(value)) {\r\n        // CamelCase everything after the \"-\" and remove the dash\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rCamelCase, function (_all, letter) {\r\n            return letter.toUpperCase();\r\n        });\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rNormalizeInvalid, \"_\");\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rLeadingNumeric, function (_all, match) {\r\n            return \"_\" + match;\r\n        });\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * This is a helper function for the equivalent of arForEach(objKeys(target), callbackFn), this is a\r\n * performance optimization to avoid the creation of a new array for large objects\r\n * @param target The target object to find and process the keys\r\n * @param callbackfn The function to call with the details\r\n */\r\nexport function objForEachKey(target, callbackfn) {\r\n    if (target) {\r\n        for (var prop in target) {\r\n            if (ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](target, prop)) {\r\n                callbackfn[_DYN_CALL /* @min:%2ecall */](target, prop, target[prop]);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\r\nexport function strEndsWith(value, search) {\r\n    var result = false;\r\n    if (value && search && !(result = value === search)) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        result = _strEndsWith ? value[cStrEndsWith](search) : _strEndsWithPoly(value, search);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The _strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param search - The characters to be searched for at the end of the value.\r\n * @returns true if the given search value is found at the end of the string, otherwise false.\r\n */\r\nexport function _strEndsWithPoly(value, search) {\r\n    var result = false;\r\n    var searchLen = search ? search[_DYN_LENGTH /* @min:%2elength */] : 0;\r\n    var valLen = value ? value[_DYN_LENGTH /* @min:%2elength */] : 0;\r\n    if (searchLen && valLen && valLen >= searchLen && !(result = value === search)) {\r\n        var pos = valLen - 1;\r\n        for (var lp = searchLen - 1; lp >= 0; lp--) {\r\n            if (value[pos] != search[lp]) {\r\n                return false;\r\n            }\r\n            pos--;\r\n        }\r\n        result = true;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param checkValue - The characters to be searched for at the start of the value.\r\n * @returns true if the given search value is found at the start of the string, otherwise false.\r\n */\r\nexport function strStartsWith(value, checkValue) {\r\n    var result = false;\r\n    if (value && checkValue && !(result = value === checkValue)) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        result = _strStartsWith ? value[cStrStartsWith](checkValue) : _strStartsWithPoly(value, checkValue);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.\r\n * @param value - The value to check whether it ends with the search value.\r\n * @param checkValue - The characters to be searched for at the start of the value.\r\n * @returns true if the given search value is found at the start of the string, otherwise false.\r\n */\r\nexport function _strStartsWithPoly(value, checkValue) {\r\n    // Using helper for performance and because string startsWith() is not available on IE\r\n    var result = false;\r\n    var chkLen = checkValue ? checkValue[_DYN_LENGTH /* @min:%2elength */] : 0;\r\n    if (value && chkLen && value[_DYN_LENGTH /* @min:%2elength */] >= chkLen && !(result = value === checkValue)) {\r\n        for (var lp = 0; lp < chkLen; lp++) {\r\n            if (value[lp] !== checkValue[lp]) {\r\n                return false;\r\n            }\r\n        }\r\n        result = true;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * A simple wrapper (for minification support) to check if the value contains the search string.\r\n * @param value - The string value to check for the existence of the search value\r\n * @param search - The value search within the value\r\n */\r\nexport function strContains(value, search) {\r\n    if (value && search) {\r\n        return value[_DYN_INDEX_OF /* @min:%2eindexOf */](search) !== -1;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Check if an object is of type Date\r\n */\r\nexport function isDate(obj) {\r\n    return !!(obj && _objToString[_DYN_CALL /* @min:%2ecall */](obj) === \"[object Date]\");\r\n}\r\n/**\r\n * Check if an object is of type Array with optional generic T, the generic type is not validated\r\n * and exists to help with TypeScript validation only.\r\n */\r\nexport var isArray = _isArray || _isArrayPoly;\r\nfunction _isArrayPoly(obj) {\r\n    return !!(obj && _objToString[_DYN_CALL /* @min:%2ecall */](obj) === \"[object Array]\");\r\n}\r\n/**\r\n * Check if an object is of type Error\r\n */\r\nexport function isError(obj) {\r\n    return !!(obj && _objToString[_DYN_CALL /* @min:%2ecall */](obj) === \"[object Error]\");\r\n}\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nexport function isString(value) {\r\n    // Changing to inline for performance\r\n    return typeof value === \"string\";\r\n}\r\n/**\r\n * Checks if the type of value is a number.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nexport function isNumber(value) {\r\n    // Changing to inline for performance\r\n    return typeof value === \"number\";\r\n}\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nexport function isBoolean(value) {\r\n    // Changing to inline for performance\r\n    return typeof value === \"boolean\";\r\n}\r\n/**\r\n * Checks if the type of value is a Symbol.\r\n * This only returns a boolean as returning value is Symbol will cause issues for older TypeScript consumers\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Symbol, false otherwise.\r\n */\r\nexport function isSymbol(value) {\r\n    return typeof value === \"symbol\";\r\n}\r\n/**\r\n * Checks if the type of the value is a normal plain object (not a null or data)\r\n * @param value\r\n */\r\nexport function isPlainObject(value) {\r\n    var result = false;\r\n    if (value && typeof value === \"object\") {\r\n        // Inlining _objGetPrototypeOf for performance to avoid an additional function call\r\n        var proto = _objGetPrototypeOf ? _objGetPrototypeOf(value) : _getObjProto(value);\r\n        if (!proto) {\r\n            // No prototype found so this is a plain Object eg. 'Object.create(null)'\r\n            result = true;\r\n        }\r\n        else {\r\n            // Objects that have a prototype are plain only if they were created using the Object global (native) function\r\n            if (proto[strConstructor] && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](proto, strConstructor)) {\r\n                proto = proto[strConstructor];\r\n            }\r\n            result = typeof proto === strShimFunction && _fnToString[_DYN_CALL /* @min:%2ecall */](proto) === _objFunctionString;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\r\nexport function toISOString(date) {\r\n    if (date) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        return _dataToISOString ? date[strToISOString]() : _toISOStringPoly(date);\r\n    }\r\n}\r\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\r\nexport function _toISOStringPoly(date) {\r\n    if (date && date.getUTCFullYear) {\r\n        var pad = function (num) {\r\n            var r = String(num);\r\n            if (r[_DYN_LENGTH /* @min:%2elength */] === 1) {\r\n                r = \"0\" + r;\r\n            }\r\n            return r;\r\n        };\r\n        return date.getUTCFullYear()\r\n            + \"-\" + pad(date.getUTCMonth() + 1)\r\n            + \"-\" + pad(date.getUTCDate())\r\n            + \"T\" + pad(date.getUTCHours())\r\n            + \":\" + pad(date.getUTCMinutes())\r\n            + \":\" + pad(date.getUTCSeconds())\r\n            + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n            + \"Z\";\r\n    }\r\n}\r\n/**\r\n * Performs the specified action for each element in an array. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype\r\n * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would\r\n * cause a testing requirement to test with and without the implementations\r\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. It can return -1 to break out of the loop\r\n * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n */\r\nexport function arrForEach(arr, callbackfn, thisArg) {\r\n    var len = arr[_DYN_LENGTH /* @min:%2elength */];\r\n    try {\r\n        for (var idx = 0; idx < len; idx++) {\r\n            if (idx in arr) {\r\n                if (callbackfn[_DYN_CALL /* @min:%2ecall */](thisArg || arr, arr[idx], idx, arr) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n * Returns the index of the first occurrence of a value in an array. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype\r\n * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would\r\n * cause a testing requirement to test with and without the implementations\r\n * @param searchElement The value to locate in the array.\r\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n */\r\nexport function arrIndexOf(arr, searchElement, fromIndex) {\r\n    if (arr) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        if (arr[strIndexOf]) {\r\n            return arr[strIndexOf](searchElement, fromIndex);\r\n        }\r\n        var len = arr[_DYN_LENGTH /* @min:%2elength */];\r\n        var from = fromIndex || 0;\r\n        try {\r\n            for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) {\r\n                if (lp in arr && arr[lp] === searchElement) {\r\n                    return lp;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls a defined callback function on each element of an array, and returns an array that contains the results. This helper exists\r\n * to avoid adding a polyfil for older browsers that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page\r\n * checks for presence/absence of the prototype implementation. Note: For consistency this will not use the Array.prototype.xxxx\r\n * implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n */\r\nexport function arrMap(arr, callbackfn, thisArg) {\r\n    var results;\r\n    if (arr) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        if (arr[strMap]) {\r\n            return arr[strMap](callbackfn, thisArg);\r\n        }\r\n        var len = arr[_DYN_LENGTH /* @min:%2elength */];\r\n        var _this = thisArg || arr;\r\n        results = new Array(len);\r\n        try {\r\n            for (var lp = 0; lp < len; lp++) {\r\n                if (lp in arr) {\r\n                    results[lp] = callbackfn[_DYN_CALL /* @min:%2ecall */](_this, arr[lp], arr);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is\r\n * provided as an argument in the next call to the callback function. This helper exists to avoid adding a polyfil for older browsers that do not define\r\n * Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype implementation. Note: For consistency\r\n * this will not use the Array.prototype.xxxx implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n */\r\nexport function arrReduce(arr, callbackfn, initialValue) {\r\n    var value;\r\n    if (arr) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        if (arr[strReduce]) {\r\n            return arr[strReduce](callbackfn, initialValue);\r\n        }\r\n        var len = arr[_DYN_LENGTH /* @min:%2elength */];\r\n        var lp = 0;\r\n        // Specifically checking the number of passed arguments as the value could be anything\r\n        if (arguments[_DYN_LENGTH /* @min:%2elength */] >= 3) {\r\n            value = arguments[2];\r\n        }\r\n        else {\r\n            while (lp < len && !(lp in arr)) {\r\n                lp++;\r\n            }\r\n            value = arr[lp++];\r\n        }\r\n        while (lp < len) {\r\n            if (lp in arr) {\r\n                value = callbackfn(value, arr[lp], lp, arr);\r\n            }\r\n            lp++;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n */\r\nexport function strTrim(str) {\r\n    if (str) {\r\n        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n        str = (_strTrim && str[cStrTrim]) ? str[cStrTrim]() : (str[_DYN_REPLACE /* @min:%2ereplace */] ? str[_DYN_REPLACE /* @min:%2ereplace */](/^\\s+|(?=\\s)\\s+$/g, STR_EMPTY) : str);\r\n    }\r\n    return str;\r\n}\r\nvar _objKeysHasDontEnumBug = !({ toString: null }).propertyIsEnumerable(\"toString\");\r\nvar _objKeysDontEnums = [\r\n    \"toString\",\r\n    \"toLocaleString\",\r\n    \"valueOf\",\r\n    \"hasOwnProperty\",\r\n    \"isPrototypeOf\",\r\n    \"propertyIsEnumerable\",\r\n    \"constructor\"\r\n];\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Object.keys eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.keys implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param obj Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n */\r\nexport function objKeys(obj) {\r\n    var objType = typeof obj;\r\n    if (objType !== strShimFunction && (objType !== strShimObject || obj === null)) {\r\n        throwTypeError(\"objKeys called on non-object\");\r\n    }\r\n    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification\r\n    if (!_objKeysHasDontEnumBug && _objKeys) {\r\n        return _objKeys(obj);\r\n    }\r\n    var result = [];\r\n    for (var prop in obj) {\r\n        if (obj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](obj, prop)) {\r\n            result[_DYN_PUSH /* @min:%2epush */](prop);\r\n        }\r\n    }\r\n    if (_objKeysHasDontEnumBug) {\r\n        var dontEnumsLength = _objKeysDontEnums[_DYN_LENGTH /* @min:%2elength */];\r\n        for (var lp = 0; lp < dontEnumsLength; lp++) {\r\n            if (obj && ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](obj, _objKeysDontEnums[lp])) {\r\n                result[_DYN_PUSH /* @min:%2epush */](_objKeysDontEnums[lp]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @param target The object on which to define the property.\r\n * @param prop The name of the property to be defined or modified.\r\n * @param getProp The getter function to wire against the getter.\r\n * @param setProp The setter function to wire against the setter.\r\n * @returns True if it was able to create the accessors otherwise false\r\n */\r\nexport function objDefineAccessors(target, prop, getProp, setProp) {\r\n    if (_objDefineProperty) {\r\n        try {\r\n            var descriptor = {\r\n                enumerable: true,\r\n                configurable: true\r\n            };\r\n            if (getProp) {\r\n                descriptor.get = getProp;\r\n            }\r\n            if (setProp) {\r\n                descriptor.set = setProp;\r\n            }\r\n            _objDefineProperty(target, prop, descriptor);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw\r\n            // We will just ignore this here.\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction _doNothing(value) {\r\n    return value;\r\n}\r\nexport function deepFreeze(obj) {\r\n    if (_objFreeze) {\r\n        objForEachKey(obj, function (name, value) {\r\n            if (isArray(value) || isObject(value)) {\r\n                _objFreeze(value);\r\n            }\r\n        });\r\n    }\r\n    return objFreeze(obj);\r\n}\r\nexport var objFreeze = _objFreeze || _doNothing;\r\nexport var objSeal = _objSeal || _doNothing;\r\n/**\r\n * Return the current time via the Date now() function (if available) and falls back to (new Date()).getTime() if now() is unavailable (IE8 or less)\r\n * https://caniuse.com/#search=Date.now\r\n */\r\nexport function dateNow() {\r\n    var dt = Date;\r\n    return dt.now ? dt.now() : new dt().getTime();\r\n}\r\n/**\r\n * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n */\r\nexport function getExceptionName(object) {\r\n    if (isError(object)) {\r\n        return object[_DYN_NAME /* @min:%2ename */];\r\n    }\r\n    return STR_EMPTY;\r\n}\r\n/**\r\n * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk\r\n * function will only be called if the new value is no equal to the original value.\r\n * @param target - The target object\r\n * @param field - The key of the target\r\n * @param value - The value to set\r\n * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set\r\n * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)\r\n * @returns The existing or new value, depending what was set\r\n */\r\nexport function setValue(target, field, value, valChk, srcChk) {\r\n    var theValue = value;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {\r\n            theValue = value;\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it\r\n * @param target - The target object to return or set the default value\r\n * @param field - The key for the field to set on the target\r\n * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added\r\n */\r\nexport function getSetValue(target, field, defValue) {\r\n    var theValue;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (!theValue && isNullOrUndefined(theValue)) {\r\n            // Supports having the default as null\r\n            theValue = !isUndefined(defValue) ? defValue : {};\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    else {\r\n        // Expanded for performance so we only check defValue if required\r\n        theValue = !isUndefined(defValue) ? defValue : {};\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Get the mapped config value, if null or undefined any supplied defaultValue will be returned.\r\n * @param field - The name of the field as the named enum value (number) or the string name.\r\n * @param defaultValue - The default value to return if the config field is not present, null or undefined.\r\n */\r\nexport function getCfgValue(theValue, defaultValue) {\r\n    return !isNullOrUndefined(theValue) ? theValue : defaultValue;\r\n}\r\nexport function isNotTruthy(value) {\r\n    return !value;\r\n}\r\nexport function isTruthy(value) {\r\n    return !!value;\r\n}\r\nexport function throwError(message) {\r\n    throw new Error(message);\r\n}\r\nfunction _createProxyFunction(source, funcName) {\r\n    var srcFunc = null;\r\n    var src = null;\r\n    if (isFunction(source)) {\r\n        srcFunc = source;\r\n    }\r\n    else {\r\n        src = source;\r\n    }\r\n    return function () {\r\n        // Capture the original arguments passed to the method\r\n        var originalArguments = arguments;\r\n        if (srcFunc) {\r\n            src = srcFunc();\r\n        }\r\n        if (src) {\r\n            return src[funcName][_DYN_APPLY /* @min:%2eapply */](src, originalArguments);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Effectively assigns all enumerable properties (not just own properties) and functions (including inherited prototype) from\r\n * the source object to the target, it attempts to use proxy getters / setters (if possible) and proxy functions to avoid potential\r\n * implementation issues by assigning prototype functions as instance ones\r\n *\r\n * This method is the primary method used to \"update\" the snippet proxy with the ultimate implementations.\r\n *\r\n * Special ES3 Notes:\r\n * Updates (setting) of direct property values on the target or indirectly on the source object WILL NOT WORK PROPERLY, updates to the\r\n * properties of \"referenced\" object will work (target.context.newValue = 10 => will be reflected in the source.context as it's the\r\n * same object). ES3 Failures: assigning target.myProp = 3 -> Won't change source.myProp = 3, likewise the reverse would also fail.\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param chkSet - An optional callback to determine whether a specific property/function should be proxied\r\n */\r\nexport function proxyAssign(target, source, chkSet) {\r\n    if (target && source && isObject(target) && isObject(source)) {\r\n        var _loop_1 = function (field) {\r\n            if (isString(field)) {\r\n                var value = source[field];\r\n                if (isFunction(value)) {\r\n                    if (!chkSet || chkSet(field, true, source, target)) {\r\n                        // Create a proxy function rather than just copying the (possible) prototype to the new object as an instance function\r\n                        target[field] = _createProxyFunction(source, field);\r\n                    }\r\n                }\r\n                else if (!chkSet || chkSet(field, false, source, target)) {\r\n                    if (hasOwnProperty(target, field)) {\r\n                        // Remove any previous instance property\r\n                        delete target[field];\r\n                    }\r\n                    if (!objDefineAccessors(target, field, function () {\r\n                        return source[field];\r\n                    }, function (theValue) {\r\n                        source[field] = theValue;\r\n                    })) {\r\n                        // Unable to create an accessor, so just assign the values as a fallback\r\n                        // -- this will (mostly) work for objects\r\n                        // -- but will fail for accessing primitives (if the source changes it) and all types of \"setters\" as the source won't be modified\r\n                        target[field] = value;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // effectively apply/proxy full source to the target instance\r\n        for (var field in source) {\r\n            _loop_1(field);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Creates a proxy function on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param name - The function name that will be added on the target\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param theFunc - The function name on the source that will be proxied on the target\r\n * @param overwriteTarget - If `false` this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {\r\n    if (target && name && source) {\r\n        if (overwriteTarget !== false || isUndefined(target[name])) {\r\n            target[name] = _createProxyFunction(source, theFunc);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates proxy functions on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param functionsToProxy - An array of function names that will be proxied on the target\r\n * @param overwriteTarget - If false this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {\r\n    if (target && source && isObject(target) && isArray(functionsToProxy)) {\r\n        arrForEach(functionsToProxy, function (theFuncName) {\r\n            if (isString(theFuncName)) {\r\n                proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Simpler helper to create a dynamic class that implements the interface and populates the values with the defaults.\r\n * Only instance properties (hasOwnProperty) values are copied from the defaults to the new instance\r\n * @param defaults Simple helper\r\n */\r\nexport function createClassFromInterface(defaults) {\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            var _this_1 = this;\r\n            if (defaults) {\r\n                objForEachKey(defaults, function (field, value) {\r\n                    _this_1[field] = value;\r\n                });\r\n            }\r\n        }\r\n        return class_1;\r\n    }());\r\n}\r\n/**\r\n * A helper function to assist with JIT performance for objects that have properties added / removed dynamically\r\n * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this\r\n * function after you have finished \"updating\" the object, calling this within loops reduces or defeats the benefits.\r\n * This helps when iterating using for..in, objKeys() and objForEach()\r\n * @param theObject - The object to be optimized if possible\r\n */\r\nexport function optimizeObject(theObject) {\r\n    // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties\r\n    // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent\r\n    if (theObject && ObjAssign) {\r\n        theObject = ObjClass(ObjAssign({}, theObject));\r\n    }\r\n    return theObject;\r\n}\r\nexport function objExtend(obj1, obj2, obj3, obj4, obj5, obj6) {\r\n    // Variables\r\n    var theArgs = arguments;\r\n    var extended = theArgs[0] || {};\r\n    var argLen = theArgs[_DYN_LENGTH /* @min:%2elength */];\r\n    var deep = false;\r\n    var idx = 1;\r\n    // Check for \"Deep\" flag\r\n    if (argLen > 0 && isBoolean(extended)) {\r\n        deep = extended;\r\n        extended = theArgs[idx] || {};\r\n        idx++;\r\n    }\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (!isObject(extended)) {\r\n        extended = {};\r\n    }\r\n    // Loop through each remaining object and conduct a merge\r\n    for (; idx < argLen; idx++) {\r\n        var arg = theArgs[idx];\r\n        var isArgArray = isArray(arg);\r\n        var isArgObj = isObject(arg);\r\n        for (var prop in arg) {\r\n            var propOk = (isArgArray && (prop in arg)) || (isArgObj && (ObjHasOwnProperty[_DYN_CALL /* @min:%2ecall */](arg, prop)));\r\n            if (!propOk) {\r\n                continue;\r\n            }\r\n            var newValue = arg[prop];\r\n            var isNewArray = void 0;\r\n            // If deep merge and property is an object, merge properties\r\n            if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {\r\n                // Grab the current value of the extended object\r\n                var clone = extended[prop];\r\n                if (isNewArray) {\r\n                    if (!isArray(clone)) {\r\n                        // We can't \"merge\" an array with a non-array so overwrite the original\r\n                        clone = [];\r\n                    }\r\n                }\r\n                else if (!isPlainObject(clone)) {\r\n                    // We can't \"merge\" an object with a non-object\r\n                    clone = {};\r\n                }\r\n                // Never move the original objects always clone them\r\n                newValue = objExtend(deep, clone, newValue);\r\n            }\r\n            // Assign the new (or previous) value (unless undefined)\r\n            if (newValue !== undefined) {\r\n                extended[prop] = newValue;\r\n            }\r\n        }\r\n    }\r\n    return extended;\r\n}\r\n//# sourceMappingURL=HelperFuncs.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}