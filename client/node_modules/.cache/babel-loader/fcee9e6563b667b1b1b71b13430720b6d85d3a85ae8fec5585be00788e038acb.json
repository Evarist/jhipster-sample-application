{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { _DYN_COOKIE_CFG, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_LOGGER, _DYN_SET_ENABLED, _DYN_SPLIT, _DYN_SUBSTRING, _DYN_USER_AGENT } from \"../__DynamicConstants\";\nimport { _throwInternal } from \"./DiagnosticLogger\";\nimport { dumpObj, getDocument, getLocation, getNavigator, isIE } from \"./EnvUtils\";\nimport { arrForEach, dateNow, getExceptionName, isArray, isFunction, isNotNullOrUndefined, isNullOrUndefined, isString, isTruthy, isUndefined, objForEachKey, setValue, strContains, strEndsWith, strTrim } from \"./HelperFuncs\";\nimport { STR_EMPTY } from \"./InternalConstants\";\nvar strToGMTString = \"toGMTString\";\nvar strToUTCString = \"toUTCString\";\nvar strCookie = \"cookie\";\nvar strExpires = \"expires\";\nvar strEnabled = \"enabled\";\nvar strIsCookieUseDisabled = \"isCookieUseDisabled\";\nvar strDisableCookiesUsage = \"disableCookiesUsage\";\nvar strConfigCookieMgr = \"_ckMgr\";\nvar _supportsCookies = null;\nvar _allowUaSameSite = null;\nvar _parsedCookieValue = null;\nvar _doc = getDocument();\nvar _cookieCache = {};\nvar _globalCookieConfig = {};\n/**\r\n * @ignore\r\n * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.\r\n * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create\r\n * your own instance of the CookieMgr and use that.\r\n * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.\r\n * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.\r\n * @param logger - The DiagnosticLogger to use for reporting errors.\r\n */\nexport function _gblCookieMgr(config, logger) {\n  // Stash the global instance against the BaseCookieMgr class\n  var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];\n  if (!inst) {\n    // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr\n    // that ultimately is never used\n    inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);\n    _globalCookieConfig[strConfigCookieMgr] = inst;\n  }\n  return inst;\n}\nfunction _isMgrEnabled(cookieMgr) {\n  if (cookieMgr) {\n    return cookieMgr.isEnabled();\n  }\n  return true;\n}\nfunction _createCookieMgrConfig(rootConfig) {\n  var cookieMgrCfg = rootConfig[_DYN_COOKIE_CFG /* @min:%2ecookieCfg */] = rootConfig[_DYN_COOKIE_CFG /* @min:%2ecookieCfg */] || {};\n  // Sets the values from the root config if not already present on the cookieMgrCfg\n  setValue(cookieMgrCfg, \"domain\", rootConfig.cookieDomain, isNotNullOrUndefined, isNullOrUndefined);\n  setValue(cookieMgrCfg, \"path\", rootConfig.cookiePath || \"/\", null, isNullOrUndefined);\n  if (isNullOrUndefined(cookieMgrCfg[strEnabled])) {\n    // Set the enabled from the provided setting or the legacy root values\n    var cookieEnabled = void 0;\n    if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {\n      cookieEnabled = !rootConfig[strIsCookieUseDisabled];\n    }\n    if (!isUndefined(rootConfig[strDisableCookiesUsage])) {\n      cookieEnabled = !rootConfig[strDisableCookiesUsage];\n    }\n    cookieMgrCfg[strEnabled] = cookieEnabled;\n  }\n  return cookieMgrCfg;\n}\nfunction _isIgnoredCookie(cookieMgrCfg, name) {\n  if (name && cookieMgrCfg && isArray(cookieMgrCfg.ignoreCookies)) {\n    return cookieMgrCfg.ignoreCookies[_DYN_INDEX_OF /* @min:%2eindexOf */](name) !== -1;\n  }\n  return false;\n}\nfunction _isBlockedCookie(cookieMgrCfg, name) {\n  if (name && cookieMgrCfg && isArray(cookieMgrCfg.blockedCookies)) {\n    if (cookieMgrCfg.blockedCookies[_DYN_INDEX_OF /* @min:%2eindexOf */](name) !== -1) {\n      return true;\n    }\n  }\n  return _isIgnoredCookie(cookieMgrCfg, name);\n}\n/**\r\n * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation\r\n * associated with the configuration or a legacy default.\r\n * @param core\r\n * @param config\r\n * @returns\r\n */\nexport function safeGetCookieMgr(core, config) {\n  var cookieMgr;\n  if (core) {\n    // Always returns an instance\n    cookieMgr = core.getCookieMgr();\n  } else if (config) {\n    var cookieCfg = config[_DYN_COOKIE_CFG /* @min:%2ecookieCfg */];\n    if (cookieCfg[strConfigCookieMgr]) {\n      cookieMgr = cookieCfg[strConfigCookieMgr];\n    } else {\n      cookieMgr = createCookieMgr(config);\n    }\n  }\n  if (!cookieMgr) {\n    // Get or initialize the default global (legacy) cookie manager if we couldn't find one\n    cookieMgr = _gblCookieMgr(config, (core || {})[_DYN_LOGGER /* @min:%2elogger */]);\n  }\n\n  return cookieMgr;\n}\nexport function createCookieMgr(rootConfig, logger) {\n  var _a;\n  var cookieMgrConfig = _createCookieMgrConfig(rootConfig || _globalCookieConfig);\n  var _path = cookieMgrConfig.path || \"/\";\n  var _domain = cookieMgrConfig.domain;\n  // Explicitly checking against false, so that setting to undefined will === true\n  var _enabled = cookieMgrConfig[strEnabled] !== false;\n  var cookieMgr = (_a = {\n    isEnabled: function isEnabled() {\n      var enabled = _enabled && areCookiesSupported(logger);\n      // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's\n      // that don't use the \"applicationinsights-core\" version of the default cookie function\n      var gblManager = _globalCookieConfig[strConfigCookieMgr];\n      if (enabled && gblManager && cookieMgr !== gblManager) {\n        // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.\n        // As the global (deprecated) functions may have been called (for backward compatibility)\n        enabled = _isMgrEnabled(gblManager);\n      }\n      return enabled;\n    }\n  }, _a[_DYN_SET_ENABLED /* @min:setEnabled */] = function (value) {\n    // Explicitly checking against false, so that setting to undefined will === true\n    _enabled = value !== false;\n  }, _a.set = function (name, value, maxAgeSec, domain, path) {\n    var result = false;\n    if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {\n      var values = {};\n      var theValue = strTrim(value || STR_EMPTY);\n      var idx = theValue[_DYN_INDEX_OF /* @min:%2eindexOf */](\";\");\n      if (idx !== -1) {\n        theValue = strTrim(value[_DYN_SUBSTRING /* @min:%2esubstring */](0, idx));\n        values = _extractParts(value[_DYN_SUBSTRING /* @min:%2esubstring */](idx + 1));\n      }\n      // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)\n      setValue(values, \"domain\", domain || _domain, isTruthy, isUndefined);\n      if (!isNullOrUndefined(maxAgeSec)) {\n        var _isIE = isIE();\n        if (isUndefined(values[strExpires])) {\n          var nowMs = dateNow();\n          // Only add expires if not already present\n          var expireMs = nowMs + maxAgeSec * 1000;\n          // Sanity check, if zero or -ve then ignore\n          if (expireMs > 0) {\n            var expiry = new Date();\n            expiry.setTime(expireMs);\n            setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);\n          }\n        }\n        if (!_isIE) {\n          // Only replace if not already present\n          setValue(values, \"max-age\", STR_EMPTY + maxAgeSec, null, isUndefined);\n        }\n      }\n      var location_1 = getLocation();\n      if (location_1 && location_1.protocol === \"https:\") {\n        setValue(values, \"secure\", null, null, isUndefined);\n        // Only set same site if not also secure\n        if (_allowUaSameSite === null) {\n          _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[_DYN_USER_AGENT /* @min:%2euserAgent */]);\n        }\n\n        if (_allowUaSameSite) {\n          setValue(values, \"SameSite\", \"None\", null, isUndefined);\n        }\n      }\n      setValue(values, \"path\", path || _path, null, isUndefined);\n      var setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\n      setCookieFn(name, _formatCookieValue(theValue, values));\n      result = true;\n    }\n    return result;\n  }, _a.get = function (name) {\n    var value = STR_EMPTY;\n    if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {\n      value = (cookieMgrConfig.getCookie || _getCookieValue)(name);\n    }\n    return value;\n  }, _a.del = function (name, path) {\n    var result = false;\n    if (_isMgrEnabled(cookieMgr)) {\n      // Only remove the cookie if the manager and cookie support has not been disabled\n      result = cookieMgr.purge(name, path);\n    }\n    return result;\n  }, _a.purge = function (name, path) {\n    var _a;\n    var result = false;\n    if (areCookiesSupported(logger)) {\n      // Setting the expiration date in the past immediately removes the cookie\n      var values = (_a = {}, _a[\"path\"] = path ? path : \"/\", _a[strExpires] = \"Thu, 01 Jan 1970 00:00:01 GMT\", _a);\n      if (!isIE()) {\n        // Set max age to expire now\n        values[\"max-age\"] = \"0\";\n      }\n      var delCookie = cookieMgrConfig.delCookie || _setCookieValue;\n      delCookie(name, _formatCookieValue(STR_EMPTY, values));\n      result = true;\n    }\n    return result;\n  }, _a);\n  // Associated this cookie manager with the config\n  cookieMgr[strConfigCookieMgr] = cookieMgr;\n  return cookieMgr;\n}\n/*\r\n* Helper method to tell if document.cookie object is supported by the runtime\r\n*/\nexport function areCookiesSupported(logger) {\n  if (_supportsCookies === null) {\n    _supportsCookies = false;\n    try {\n      var doc = _doc || {};\n      _supportsCookies = doc[strCookie] !== undefined;\n    } catch (e) {\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 68 /* _eInternalMessageId.CannotAccessCookie */, \"Cannot access document.cookie - \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return _supportsCookies;\n}\nfunction _extractParts(theValue) {\n  var values = {};\n  if (theValue && theValue[_DYN_LENGTH /* @min:%2elength */]) {\n    var parts = strTrim(theValue)[_DYN_SPLIT /* @min:%2esplit */](\";\");\n    arrForEach(parts, function (thePart) {\n      thePart = strTrim(thePart || STR_EMPTY);\n      if (thePart) {\n        var idx = thePart[_DYN_INDEX_OF /* @min:%2eindexOf */](\"=\");\n        if (idx === -1) {\n          values[thePart] = null;\n        } else {\n          values[strTrim(thePart[_DYN_SUBSTRING /* @min:%2esubstring */](0, idx))] = strTrim(thePart[_DYN_SUBSTRING /* @min:%2esubstring */](idx + 1));\n        }\n      }\n    });\n  }\n  return values;\n}\nfunction _formatDate(theDate, func) {\n  if (isFunction(theDate[func])) {\n    return theDate[func]();\n  }\n  return null;\n}\nfunction _formatCookieValue(value, values) {\n  var cookieValue = value || STR_EMPTY;\n  objForEachKey(values, function (name, theValue) {\n    cookieValue += \"; \" + name + (!isNullOrUndefined(theValue) ? \"=\" + theValue : STR_EMPTY);\n  });\n  return cookieValue;\n}\nfunction _getCookieValue(name) {\n  var cookieValue = STR_EMPTY;\n  if (_doc) {\n    var theCookie = _doc[strCookie] || STR_EMPTY;\n    if (_parsedCookieValue !== theCookie) {\n      _cookieCache = _extractParts(theCookie);\n      _parsedCookieValue = theCookie;\n    }\n    cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);\n  }\n  return cookieValue;\n}\nfunction _setCookieValue(name, cookieValue) {\n  if (_doc) {\n    _doc[strCookie] = name + \"=\" + cookieValue;\n  }\n}\nexport function uaDisallowsSameSiteNone(userAgent) {\n  if (!isString(userAgent)) {\n    return false;\n  }\n  // Cover all iOS based browsers here. This includes:\n  // - Safari on iOS 12 for iPhone, iPod Touch, iPad\n  // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\n  // - Chrome on iOS 12 for iPhone, iPod Touch, iPad\n  // All of which are broken by SameSite=None, because they use the iOS networking stack\n  if (strContains(userAgent, \"CPU iPhone OS 12\") || strContains(userAgent, \"iPad; CPU OS 12\")) {\n    return true;\n  }\n  // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:\n  // - Safari on Mac OS X\n  // This does not include:\n  // - Internal browser on Mac OS X\n  // - Chrome on Mac OS X\n  // - Chromium on Mac OS X\n  // Because they do not use the Mac OS networking stack.\n  if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strContains(userAgent, \"Version/\") && strContains(userAgent, \"Safari\")) {\n    return true;\n  }\n  // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:\n  // - Internal browser on Mac OS X\n  // This does not include:\n  // - Safari on Mac OS X\n  // - Chrome on Mac OS X\n  // - Chromium on Mac OS X\n  // Because they do not use the Mac OS networking stack.\n  if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strEndsWith(userAgent, \"AppleWebKit/605.1.15 (KHTML, like Gecko)\")) {\n    return true;\n  }\n  // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.\n  // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.\n  // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.\n  if (strContains(userAgent, \"Chrome/5\") || strContains(userAgent, \"Chrome/6\")) {\n    return true;\n  }\n  // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal\n  // that don't specify their Chrome version as lacking support for SameSite=None.\n  if (strContains(userAgent, \"UnrealEngine\") && !strContains(userAgent, \"Chrome\")) {\n    return true;\n  }\n  // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None\n  // NB: this rule isn't complete - you need regex to make a complete rule.\n  // See: https://www.chromium.org/updates/same-site/incompatible-clients\n  if (strContains(userAgent, \"UCBrowser/12\") || strContains(userAgent, \"UCBrowser/11\")) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["_DYN_COOKIE_CFG","_DYN_INDEX_OF","_DYN_LENGTH","_DYN_LOGGER","_DYN_SET_ENABLED","_DYN_SPLIT","_DYN_SUBSTRING","_DYN_USER_AGENT","_throwInternal","dumpObj","getDocument","getLocation","getNavigator","isIE","arrForEach","dateNow","getExceptionName","isArray","isFunction","isNotNullOrUndefined","isNullOrUndefined","isString","isTruthy","isUndefined","objForEachKey","setValue","strContains","strEndsWith","strTrim","STR_EMPTY","strToGMTString","strToUTCString","strCookie","strExpires","strEnabled","strIsCookieUseDisabled","strDisableCookiesUsage","strConfigCookieMgr","_supportsCookies","_allowUaSameSite","_parsedCookieValue","_doc","_cookieCache","_globalCookieConfig","_gblCookieMgr","config","logger","inst","createCookieMgr","_isMgrEnabled","cookieMgr","isEnabled","_createCookieMgrConfig","rootConfig","cookieMgrCfg","cookieDomain","cookiePath","cookieEnabled","_isIgnoredCookie","name","ignoreCookies","_isBlockedCookie","blockedCookies","safeGetCookieMgr","core","getCookieMgr","cookieCfg","_a","cookieMgrConfig","_path","path","_domain","domain","_enabled","enabled","areCookiesSupported","gblManager","value","set","maxAgeSec","result","values","theValue","idx","_extractParts","_isIE","nowMs","expireMs","expiry","Date","setTime","_formatDate","location_1","protocol","uaDisallowsSameSiteNone","setCookieFn","setCookie","_setCookieValue","_formatCookieValue","get","getCookie","_getCookieValue","del","purge","delCookie","doc","undefined","e","exception","parts","thePart","theDate","func","cookieValue","theCookie","userAgent"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js"],"sourcesContent":["import { _DYN_COOKIE_CFG, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_LOGGER, _DYN_SET_ENABLED, _DYN_SPLIT, _DYN_SUBSTRING, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nimport { dumpObj, getDocument, getLocation, getNavigator, isIE } from \"./EnvUtils\";\r\nimport { arrForEach, dateNow, getExceptionName, isArray, isFunction, isNotNullOrUndefined, isNullOrUndefined, isString, isTruthy, isUndefined, objForEachKey, setValue, strContains, strEndsWith, strTrim } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nvar strToGMTString = \"toGMTString\";\r\nvar strToUTCString = \"toUTCString\";\r\nvar strCookie = \"cookie\";\r\nvar strExpires = \"expires\";\r\nvar strEnabled = \"enabled\";\r\nvar strIsCookieUseDisabled = \"isCookieUseDisabled\";\r\nvar strDisableCookiesUsage = \"disableCookiesUsage\";\r\nvar strConfigCookieMgr = \"_ckMgr\";\r\nvar _supportsCookies = null;\r\nvar _allowUaSameSite = null;\r\nvar _parsedCookieValue = null;\r\nvar _doc = getDocument();\r\nvar _cookieCache = {};\r\nvar _globalCookieConfig = {};\r\n/**\r\n * @ignore\r\n * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.\r\n * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create\r\n * your own instance of the CookieMgr and use that.\r\n * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.\r\n * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.\r\n * @param logger - The DiagnosticLogger to use for reporting errors.\r\n */\r\nexport function _gblCookieMgr(config, logger) {\r\n    // Stash the global instance against the BaseCookieMgr class\r\n    var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];\r\n    if (!inst) {\r\n        // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr\r\n        // that ultimately is never used\r\n        inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);\r\n        _globalCookieConfig[strConfigCookieMgr] = inst;\r\n    }\r\n    return inst;\r\n}\r\nfunction _isMgrEnabled(cookieMgr) {\r\n    if (cookieMgr) {\r\n        return cookieMgr.isEnabled();\r\n    }\r\n    return true;\r\n}\r\nfunction _createCookieMgrConfig(rootConfig) {\r\n    var cookieMgrCfg = rootConfig[_DYN_COOKIE_CFG /* @min:%2ecookieCfg */] = rootConfig[_DYN_COOKIE_CFG /* @min:%2ecookieCfg */] || {};\r\n    // Sets the values from the root config if not already present on the cookieMgrCfg\r\n    setValue(cookieMgrCfg, \"domain\", rootConfig.cookieDomain, isNotNullOrUndefined, isNullOrUndefined);\r\n    setValue(cookieMgrCfg, \"path\", rootConfig.cookiePath || \"/\", null, isNullOrUndefined);\r\n    if (isNullOrUndefined(cookieMgrCfg[strEnabled])) {\r\n        // Set the enabled from the provided setting or the legacy root values\r\n        var cookieEnabled = void 0;\r\n        if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {\r\n            cookieEnabled = !rootConfig[strIsCookieUseDisabled];\r\n        }\r\n        if (!isUndefined(rootConfig[strDisableCookiesUsage])) {\r\n            cookieEnabled = !rootConfig[strDisableCookiesUsage];\r\n        }\r\n        cookieMgrCfg[strEnabled] = cookieEnabled;\r\n    }\r\n    return cookieMgrCfg;\r\n}\r\nfunction _isIgnoredCookie(cookieMgrCfg, name) {\r\n    if (name && cookieMgrCfg && isArray(cookieMgrCfg.ignoreCookies)) {\r\n        return cookieMgrCfg.ignoreCookies[_DYN_INDEX_OF /* @min:%2eindexOf */](name) !== -1;\r\n    }\r\n    return false;\r\n}\r\nfunction _isBlockedCookie(cookieMgrCfg, name) {\r\n    if (name && cookieMgrCfg && isArray(cookieMgrCfg.blockedCookies)) {\r\n        if (cookieMgrCfg.blockedCookies[_DYN_INDEX_OF /* @min:%2eindexOf */](name) !== -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return _isIgnoredCookie(cookieMgrCfg, name);\r\n}\r\n/**\r\n * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation\r\n * associated with the configuration or a legacy default.\r\n * @param core\r\n * @param config\r\n * @returns\r\n */\r\nexport function safeGetCookieMgr(core, config) {\r\n    var cookieMgr;\r\n    if (core) {\r\n        // Always returns an instance\r\n        cookieMgr = core.getCookieMgr();\r\n    }\r\n    else if (config) {\r\n        var cookieCfg = config[_DYN_COOKIE_CFG /* @min:%2ecookieCfg */];\r\n        if (cookieCfg[strConfigCookieMgr]) {\r\n            cookieMgr = cookieCfg[strConfigCookieMgr];\r\n        }\r\n        else {\r\n            cookieMgr = createCookieMgr(config);\r\n        }\r\n    }\r\n    if (!cookieMgr) {\r\n        // Get or initialize the default global (legacy) cookie manager if we couldn't find one\r\n        cookieMgr = _gblCookieMgr(config, (core || {})[_DYN_LOGGER /* @min:%2elogger */]);\r\n    }\r\n    return cookieMgr;\r\n}\r\nexport function createCookieMgr(rootConfig, logger) {\r\n    var _a;\r\n    var cookieMgrConfig = _createCookieMgrConfig(rootConfig || _globalCookieConfig);\r\n    var _path = cookieMgrConfig.path || \"/\";\r\n    var _domain = cookieMgrConfig.domain;\r\n    // Explicitly checking against false, so that setting to undefined will === true\r\n    var _enabled = cookieMgrConfig[strEnabled] !== false;\r\n    var cookieMgr = (_a = {\r\n            isEnabled: function () {\r\n                var enabled = _enabled && areCookiesSupported(logger);\r\n                // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's\r\n                // that don't use the \"applicationinsights-core\" version of the default cookie function\r\n                var gblManager = _globalCookieConfig[strConfigCookieMgr];\r\n                if (enabled && gblManager && cookieMgr !== gblManager) {\r\n                    // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.\r\n                    // As the global (deprecated) functions may have been called (for backward compatibility)\r\n                    enabled = _isMgrEnabled(gblManager);\r\n                }\r\n                return enabled;\r\n            }\r\n        },\r\n        _a[_DYN_SET_ENABLED /* @min:setEnabled */] = function (value) {\r\n            // Explicitly checking against false, so that setting to undefined will === true\r\n            _enabled = value !== false;\r\n        },\r\n        _a.set = function (name, value, maxAgeSec, domain, path) {\r\n            var result = false;\r\n            if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {\r\n                var values = {};\r\n                var theValue = strTrim(value || STR_EMPTY);\r\n                var idx = theValue[_DYN_INDEX_OF /* @min:%2eindexOf */](\";\");\r\n                if (idx !== -1) {\r\n                    theValue = strTrim(value[_DYN_SUBSTRING /* @min:%2esubstring */](0, idx));\r\n                    values = _extractParts(value[_DYN_SUBSTRING /* @min:%2esubstring */](idx + 1));\r\n                }\r\n                // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)\r\n                setValue(values, \"domain\", domain || _domain, isTruthy, isUndefined);\r\n                if (!isNullOrUndefined(maxAgeSec)) {\r\n                    var _isIE = isIE();\r\n                    if (isUndefined(values[strExpires])) {\r\n                        var nowMs = dateNow();\r\n                        // Only add expires if not already present\r\n                        var expireMs = nowMs + (maxAgeSec * 1000);\r\n                        // Sanity check, if zero or -ve then ignore\r\n                        if (expireMs > 0) {\r\n                            var expiry = new Date();\r\n                            expiry.setTime(expireMs);\r\n                            setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);\r\n                        }\r\n                    }\r\n                    if (!_isIE) {\r\n                        // Only replace if not already present\r\n                        setValue(values, \"max-age\", STR_EMPTY + maxAgeSec, null, isUndefined);\r\n                    }\r\n                }\r\n                var location_1 = getLocation();\r\n                if (location_1 && location_1.protocol === \"https:\") {\r\n                    setValue(values, \"secure\", null, null, isUndefined);\r\n                    // Only set same site if not also secure\r\n                    if (_allowUaSameSite === null) {\r\n                        _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[_DYN_USER_AGENT /* @min:%2euserAgent */]);\r\n                    }\r\n                    if (_allowUaSameSite) {\r\n                        setValue(values, \"SameSite\", \"None\", null, isUndefined);\r\n                    }\r\n                }\r\n                setValue(values, \"path\", path || _path, null, isUndefined);\r\n                var setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\r\n                setCookieFn(name, _formatCookieValue(theValue, values));\r\n                result = true;\r\n            }\r\n            return result;\r\n        },\r\n        _a.get = function (name) {\r\n            var value = STR_EMPTY;\r\n            if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {\r\n                value = (cookieMgrConfig.getCookie || _getCookieValue)(name);\r\n            }\r\n            return value;\r\n        },\r\n        _a.del = function (name, path) {\r\n            var result = false;\r\n            if (_isMgrEnabled(cookieMgr)) {\r\n                // Only remove the cookie if the manager and cookie support has not been disabled\r\n                result = cookieMgr.purge(name, path);\r\n            }\r\n            return result;\r\n        },\r\n        _a.purge = function (name, path) {\r\n            var _a;\r\n            var result = false;\r\n            if (areCookiesSupported(logger)) {\r\n                // Setting the expiration date in the past immediately removes the cookie\r\n                var values = (_a = {},\r\n                    _a[\"path\"] = path ? path : \"/\",\r\n                    _a[strExpires] = \"Thu, 01 Jan 1970 00:00:01 GMT\",\r\n                    _a);\r\n                if (!isIE()) {\r\n                    // Set max age to expire now\r\n                    values[\"max-age\"] = \"0\";\r\n                }\r\n                var delCookie = cookieMgrConfig.delCookie || _setCookieValue;\r\n                delCookie(name, _formatCookieValue(STR_EMPTY, values));\r\n                result = true;\r\n            }\r\n            return result;\r\n        },\r\n        _a);\r\n    // Associated this cookie manager with the config\r\n    cookieMgr[strConfigCookieMgr] = cookieMgr;\r\n    return cookieMgr;\r\n}\r\n/*\r\n* Helper method to tell if document.cookie object is supported by the runtime\r\n*/\r\nexport function areCookiesSupported(logger) {\r\n    if (_supportsCookies === null) {\r\n        _supportsCookies = false;\r\n        try {\r\n            var doc = _doc || {};\r\n            _supportsCookies = doc[strCookie] !== undefined;\r\n        }\r\n        catch (e) {\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 68 /* _eInternalMessageId.CannotAccessCookie */, \"Cannot access document.cookie - \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return _supportsCookies;\r\n}\r\nfunction _extractParts(theValue) {\r\n    var values = {};\r\n    if (theValue && theValue[_DYN_LENGTH /* @min:%2elength */]) {\r\n        var parts = strTrim(theValue)[_DYN_SPLIT /* @min:%2esplit */](\";\");\r\n        arrForEach(parts, function (thePart) {\r\n            thePart = strTrim(thePart || STR_EMPTY);\r\n            if (thePart) {\r\n                var idx = thePart[_DYN_INDEX_OF /* @min:%2eindexOf */](\"=\");\r\n                if (idx === -1) {\r\n                    values[thePart] = null;\r\n                }\r\n                else {\r\n                    values[strTrim(thePart[_DYN_SUBSTRING /* @min:%2esubstring */](0, idx))] = strTrim(thePart[_DYN_SUBSTRING /* @min:%2esubstring */](idx + 1));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return values;\r\n}\r\nfunction _formatDate(theDate, func) {\r\n    if (isFunction(theDate[func])) {\r\n        return theDate[func]();\r\n    }\r\n    return null;\r\n}\r\nfunction _formatCookieValue(value, values) {\r\n    var cookieValue = value || STR_EMPTY;\r\n    objForEachKey(values, function (name, theValue) {\r\n        cookieValue += \"; \" + name + (!isNullOrUndefined(theValue) ? \"=\" + theValue : STR_EMPTY);\r\n    });\r\n    return cookieValue;\r\n}\r\nfunction _getCookieValue(name) {\r\n    var cookieValue = STR_EMPTY;\r\n    if (_doc) {\r\n        var theCookie = _doc[strCookie] || STR_EMPTY;\r\n        if (_parsedCookieValue !== theCookie) {\r\n            _cookieCache = _extractParts(theCookie);\r\n            _parsedCookieValue = theCookie;\r\n        }\r\n        cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);\r\n    }\r\n    return cookieValue;\r\n}\r\nfunction _setCookieValue(name, cookieValue) {\r\n    if (_doc) {\r\n        _doc[strCookie] = name + \"=\" + cookieValue;\r\n    }\r\n}\r\nexport function uaDisallowsSameSiteNone(userAgent) {\r\n    if (!isString(userAgent)) {\r\n        return false;\r\n    }\r\n    // Cover all iOS based browsers here. This includes:\r\n    // - Safari on iOS 12 for iPhone, iPod Touch, iPad\r\n    // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\r\n    // - Chrome on iOS 12 for iPhone, iPod Touch, iPad\r\n    // All of which are broken by SameSite=None, because they use the iOS networking stack\r\n    if (strContains(userAgent, \"CPU iPhone OS 12\") || strContains(userAgent, \"iPad; CPU OS 12\")) {\r\n        return true;\r\n    }\r\n    // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:\r\n    // - Safari on Mac OS X\r\n    // This does not include:\r\n    // - Internal browser on Mac OS X\r\n    // - Chrome on Mac OS X\r\n    // - Chromium on Mac OS X\r\n    // Because they do not use the Mac OS networking stack.\r\n    if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strContains(userAgent, \"Version/\") && strContains(userAgent, \"Safari\")) {\r\n        return true;\r\n    }\r\n    // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:\r\n    // - Internal browser on Mac OS X\r\n    // This does not include:\r\n    // - Safari on Mac OS X\r\n    // - Chrome on Mac OS X\r\n    // - Chromium on Mac OS X\r\n    // Because they do not use the Mac OS networking stack.\r\n    if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strEndsWith(userAgent, \"AppleWebKit/605.1.15 (KHTML, like Gecko)\")) {\r\n        return true;\r\n    }\r\n    // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.\r\n    // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.\r\n    // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.\r\n    if (strContains(userAgent, \"Chrome/5\") || strContains(userAgent, \"Chrome/6\")) {\r\n        return true;\r\n    }\r\n    // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal\r\n    // that don't specify their Chrome version as lacking support for SameSite=None.\r\n    if (strContains(userAgent, \"UnrealEngine\") && !strContains(userAgent, \"Chrome\")) {\r\n        return true;\r\n    }\r\n    // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None\r\n    // NB: this rule isn't complete - you need regex to make a complete rule.\r\n    // See: https://www.chromium.org/updates/same-site/incompatible-clients\r\n    if (strContains(userAgent, \"UCBrowser/12\") || strContains(userAgent, \"UCBrowser/11\")) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=CookieMgr.js.map"],"mappings":";;;;AAAA,SAAAA,eAAA,EAAAC,aAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,gBAAA,EAAAC,UAAA,EAAAC,cAAA,EAAAC,eAAA;AACA,SAAAC,cAAA;AACA,SAAAC,OAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,IAAA;AACA,SAAAC,UAAA,EAAAC,OAAA,EAAAC,gBAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,oBAAA,EAAAC,iBAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,WAAA,EAAAC,aAAA,EAAAC,QAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,OAAA;AACA,SAAAC,SAAA;AACA,IAAAC,cAAA;AACA,IAAAC,cAAA;AACA,IAAAC,SAAA;AACA,IAAAC,UAAA;AACA,IAAAC,UAAA;AACA,IAAAC,sBAAA;AACA,IAAAC,sBAAA;AACA,IAAAC,kBAAA;AACA,IAAAC,gBAAA;AACA,IAAAC,gBAAA;AACA,IAAAC,kBAAA;AACA,IAAAC,IAAA,GAAA/B,WAAA;AACA,IAAAgC,YAAA;AACA,IAAAC,mBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,cAAAC,MAAA,EAAAC,MAAA;EACA;EACA,IAAAC,IAAA,GAAAC,eAAA,CAAAX,kBAAA,KAAAM,mBAAA,CAAAN,kBAAA;EACA,KAAAU,IAAA;IACA;IACA;IACAA,IAAA,GAAAC,eAAA,CAAAX,kBAAA,IAAAW,eAAA,CAAAH,MAAA,EAAAC,MAAA;IACAH,mBAAA,CAAAN,kBAAA,IAAAU,IAAA;EACA;EACA,OAAAA,IAAA;AACA;AACA,SAAAE,cAAAC,SAAA;EACA,IAAAA,SAAA;IACA,OAAAA,SAAA,CAAAC,SAAA;EACA;EACA;AACA;AACA,SAAAC,uBAAAC,UAAA;EACA,IAAAC,YAAA,GAAAD,UAAA,CAAArD,eAAA,4BAAAqD,UAAA,CAAArD,eAAA;EACA;EACAyB,QAAA,CAAA6B,YAAA,YAAAD,UAAA,CAAAE,YAAA,EAAApC,oBAAA,EAAAC,iBAAA;EACAK,QAAA,CAAA6B,YAAA,UAAAD,UAAA,CAAAG,UAAA,eAAApC,iBAAA;EACA,IAAAA,iBAAA,CAAAkC,YAAA,CAAApB,UAAA;IACA;IACA,IAAAuB,aAAA;IACA,KAAAlC,WAAA,CAAA8B,UAAA,CAAAlB,sBAAA;MACAsB,aAAA,IAAAJ,UAAA,CAAAlB,sBAAA;IACA;IACA,KAAAZ,WAAA,CAAA8B,UAAA,CAAAjB,sBAAA;MACAqB,aAAA,IAAAJ,UAAA,CAAAjB,sBAAA;IACA;IACAkB,YAAA,CAAApB,UAAA,IAAAuB,aAAA;EACA;EACA,OAAAH,YAAA;AACA;AACA,SAAAI,iBAAAJ,YAAA,EAAAK,IAAA;EACA,IAAAA,IAAA,IAAAL,YAAA,IAAArC,OAAA,CAAAqC,YAAA,CAAAM,aAAA;IACA,OAAAN,YAAA,CAAAM,aAAA,CAAA3D,aAAA,wBAAA0D,IAAA;EACA;EACA;AACA;AACA,SAAAE,iBAAAP,YAAA,EAAAK,IAAA;EACA,IAAAA,IAAA,IAAAL,YAAA,IAAArC,OAAA,CAAAqC,YAAA,CAAAQ,cAAA;IACA,IAAAR,YAAA,CAAAQ,cAAA,CAAA7D,aAAA,wBAAA0D,IAAA;MACA;IACA;EACA;EACA,OAAAD,gBAAA,CAAAJ,YAAA,EAAAK,IAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAI,iBAAAC,IAAA,EAAAnB,MAAA;EACA,IAAAK,SAAA;EACA,IAAAc,IAAA;IACA;IACAd,SAAA,GAAAc,IAAA,CAAAC,YAAA;EACA,OACA,IAAApB,MAAA;IACA,IAAAqB,SAAA,GAAArB,MAAA,CAAA7C,eAAA;IACA,IAAAkE,SAAA,CAAA7B,kBAAA;MACAa,SAAA,GAAAgB,SAAA,CAAA7B,kBAAA;IACA,OACA;MACAa,SAAA,GAAAF,eAAA,CAAAH,MAAA;IACA;EACA;EACA,KAAAK,SAAA;IACA;IACAA,SAAA,GAAAN,aAAA,CAAAC,MAAA,GAAAmB,IAAA,QAAA7D,WAAA;EACA;;EACA,OAAA+C,SAAA;AACA;AACA,gBAAAF,gBAAAK,UAAA,EAAAP,MAAA;EACA,IAAAqB,EAAA;EACA,IAAAC,eAAA,GAAAhB,sBAAA,CAAAC,UAAA,IAAAV,mBAAA;EACA,IAAA0B,KAAA,GAAAD,eAAA,CAAAE,IAAA;EACA,IAAAC,OAAA,GAAAH,eAAA,CAAAI,MAAA;EACA;EACA,IAAAC,QAAA,GAAAL,eAAA,CAAAlC,UAAA;EACA,IAAAgB,SAAA,IAAAiB,EAAA;IACAhB,SAAA,WAAAA,UAAA;MACA,IAAAuB,OAAA,GAAAD,QAAA,IAAAE,mBAAA,CAAA7B,MAAA;MACA;MACA;MACA,IAAA8B,UAAA,GAAAjC,mBAAA,CAAAN,kBAAA;MACA,IAAAqC,OAAA,IAAAE,UAAA,IAAA1B,SAAA,KAAA0B,UAAA;QACA;QACA;QACAF,OAAA,GAAAzB,aAAA,CAAA2B,UAAA;MACA;MACA,OAAAF,OAAA;IACA;EACA,GACAP,EAAA,CAAA/D,gBAAA,oCAAAyE,KAAA;IACA;IACAJ,QAAA,GAAAI,KAAA;EACA,GACAV,EAAA,CAAAW,GAAA,aAAAnB,IAAA,EAAAkB,KAAA,EAAAE,SAAA,EAAAP,MAAA,EAAAF,IAAA;IACA,IAAAU,MAAA;IACA,IAAA/B,aAAA,CAAAC,SAAA,MAAAW,gBAAA,CAAAO,eAAA,EAAAT,IAAA;MACA,IAAAsB,MAAA;MACA,IAAAC,QAAA,GAAAtD,OAAA,CAAAiD,KAAA,IAAAhD,SAAA;MACA,IAAAsD,GAAA,GAAAD,QAAA,CAAAjF,aAAA;MACA,IAAAkF,GAAA;QACAD,QAAA,GAAAtD,OAAA,CAAAiD,KAAA,CAAAvE,cAAA,6BAAA6E,GAAA;QACAF,MAAA,GAAAG,aAAA,CAAAP,KAAA,CAAAvE,cAAA,0BAAA6E,GAAA;MACA;MACA;MACA1D,QAAA,CAAAwD,MAAA,YAAAT,MAAA,IAAAD,OAAA,EAAAjD,QAAA,EAAAC,WAAA;MACA,KAAAH,iBAAA,CAAA2D,SAAA;QACA,IAAAM,KAAA,GAAAxE,IAAA;QACA,IAAAU,WAAA,CAAA0D,MAAA,CAAAhD,UAAA;UACA,IAAAqD,KAAA,GAAAvE,OAAA;UACA;UACA,IAAAwE,QAAA,GAAAD,KAAA,GAAAP,SAAA;UACA;UACA,IAAAQ,QAAA;YACA,IAAAC,MAAA,OAAAC,IAAA;YACAD,MAAA,CAAAE,OAAA,CAAAH,QAAA;YACA9D,QAAA,CAAAwD,MAAA,EAAAhD,UAAA,EAAA0D,WAAA,CAAAH,MAAA,GAAAH,KAAA,GAAAtD,cAAA,GAAAD,cAAA,KAAA6D,WAAA,CAAAH,MAAA,EAAAH,KAAA,GAAAvD,cAAA,GAAAC,cAAA,KAAAF,SAAA,EAAAP,QAAA;UACA;QACA;QACA,KAAA+D,KAAA;UACA;UACA5D,QAAA,CAAAwD,MAAA,aAAApD,SAAA,GAAAkD,SAAA,QAAAxD,WAAA;QACA;MACA;MACA,IAAAqE,UAAA,GAAAjF,WAAA;MACA,IAAAiF,UAAA,IAAAA,UAAA,CAAAC,QAAA;QACApE,QAAA,CAAAwD,MAAA,wBAAA1D,WAAA;QACA;QACA,IAAAgB,gBAAA;UACAA,gBAAA,IAAAuD,uBAAA,EAAAlF,YAAA,UAAAL,eAAA;QACA;;QACA,IAAAgC,gBAAA;UACAd,QAAA,CAAAwD,MAAA,4BAAA1D,WAAA;QACA;MACA;MACAE,QAAA,CAAAwD,MAAA,UAAAX,IAAA,IAAAD,KAAA,QAAA9C,WAAA;MACA,IAAAwE,WAAA,GAAA3B,eAAA,CAAA4B,SAAA,IAAAC,eAAA;MACAF,WAAA,CAAApC,IAAA,EAAAuC,kBAAA,CAAAhB,QAAA,EAAAD,MAAA;MACAD,MAAA;IACA;IACA,OAAAA,MAAA;EACA,GACAb,EAAA,CAAAgC,GAAA,aAAAxC,IAAA;IACA,IAAAkB,KAAA,GAAAhD,SAAA;IACA,IAAAoB,aAAA,CAAAC,SAAA,MAAAQ,gBAAA,CAAAU,eAAA,EAAAT,IAAA;MACAkB,KAAA,IAAAT,eAAA,CAAAgC,SAAA,IAAAC,eAAA,EAAA1C,IAAA;IACA;IACA,OAAAkB,KAAA;EACA,GACAV,EAAA,CAAAmC,GAAA,aAAA3C,IAAA,EAAAW,IAAA;IACA,IAAAU,MAAA;IACA,IAAA/B,aAAA,CAAAC,SAAA;MACA;MACA8B,MAAA,GAAA9B,SAAA,CAAAqD,KAAA,CAAA5C,IAAA,EAAAW,IAAA;IACA;IACA,OAAAU,MAAA;EACA,GACAb,EAAA,CAAAoC,KAAA,aAAA5C,IAAA,EAAAW,IAAA;IACA,IAAAH,EAAA;IACA,IAAAa,MAAA;IACA,IAAAL,mBAAA,CAAA7B,MAAA;MACA;MACA,IAAAmC,MAAA,IAAAd,EAAA,OACAA,EAAA,WAAAG,IAAA,GAAAA,IAAA,QACAH,EAAA,CAAAlC,UAAA,qCACAkC,EAAA;MACA,KAAAtD,IAAA;QACA;QACAoE,MAAA;MACA;MACA,IAAAuB,SAAA,GAAApC,eAAA,CAAAoC,SAAA,IAAAP,eAAA;MACAO,SAAA,CAAA7C,IAAA,EAAAuC,kBAAA,CAAArE,SAAA,EAAAoD,MAAA;MACAD,MAAA;IACA;IACA,OAAAA,MAAA;EACA,GACAb,EAAA;EACA;EACAjB,SAAA,CAAAb,kBAAA,IAAAa,SAAA;EACA,OAAAA,SAAA;AACA;AACA;AACA;AACA;AACA,gBAAAyB,oBAAA7B,MAAA;EACA,IAAAR,gBAAA;IACAA,gBAAA;IACA;MACA,IAAAmE,GAAA,GAAAhE,IAAA;MACAH,gBAAA,GAAAmE,GAAA,CAAAzE,SAAA,MAAA0E,SAAA;IACA,EACA,OAAAC,CAAA;MACAnG,cAAA,CAAAsC,MAAA,0HAAA9B,gBAAA,CAAA2F,CAAA;QAAAC,SAAA,EAAAnG,OAAA,CAAAkG,CAAA;MAAA;IACA;EACA;EACA,OAAArE,gBAAA;AACA;AACA,SAAA8C,cAAAF,QAAA;EACA,IAAAD,MAAA;EACA,IAAAC,QAAA,IAAAA,QAAA,CAAAhF,WAAA;IACA,IAAA2G,KAAA,GAAAjF,OAAA,CAAAsD,QAAA,EAAA7E,UAAA;IACAS,UAAA,CAAA+F,KAAA,YAAAC,OAAA;MACAA,OAAA,GAAAlF,OAAA,CAAAkF,OAAA,IAAAjF,SAAA;MACA,IAAAiF,OAAA;QACA,IAAA3B,GAAA,GAAA2B,OAAA,CAAA7G,aAAA;QACA,IAAAkF,GAAA;UACAF,MAAA,CAAA6B,OAAA;QACA,OACA;UACA7B,MAAA,CAAArD,OAAA,CAAAkF,OAAA,CAAAxG,cAAA,6BAAA6E,GAAA,MAAAvD,OAAA,CAAAkF,OAAA,CAAAxG,cAAA,0BAAA6E,GAAA;QACA;MACA;IACA;EACA;EACA,OAAAF,MAAA;AACA;AACA,SAAAU,YAAAoB,OAAA,EAAAC,IAAA;EACA,IAAA9F,UAAA,CAAA6F,OAAA,CAAAC,IAAA;IACA,OAAAD,OAAA,CAAAC,IAAA;EACA;EACA;AACA;AACA,SAAAd,mBAAArB,KAAA,EAAAI,MAAA;EACA,IAAAgC,WAAA,GAAApC,KAAA,IAAAhD,SAAA;EACAL,aAAA,CAAAyD,MAAA,YAAAtB,IAAA,EAAAuB,QAAA;IACA+B,WAAA,WAAAtD,IAAA,KAAAvC,iBAAA,CAAA8D,QAAA,UAAAA,QAAA,GAAArD,SAAA;EACA;EACA,OAAAoF,WAAA;AACA;AACA,SAAAZ,gBAAA1C,IAAA;EACA,IAAAsD,WAAA,GAAApF,SAAA;EACA,IAAAY,IAAA;IACA,IAAAyE,SAAA,GAAAzE,IAAA,CAAAT,SAAA,KAAAH,SAAA;IACA,IAAAW,kBAAA,KAAA0E,SAAA;MACAxE,YAAA,GAAA0C,aAAA,CAAA8B,SAAA;MACA1E,kBAAA,GAAA0E,SAAA;IACA;IACAD,WAAA,GAAArF,OAAA,CAAAc,YAAA,CAAAiB,IAAA,KAAA9B,SAAA;EACA;EACA,OAAAoF,WAAA;AACA;AACA,SAAAhB,gBAAAtC,IAAA,EAAAsD,WAAA;EACA,IAAAxE,IAAA;IACAA,IAAA,CAAAT,SAAA,IAAA2B,IAAA,SAAAsD,WAAA;EACA;AACA;AACA,gBAAAnB,wBAAAqB,SAAA;EACA,KAAA9F,QAAA,CAAA8F,SAAA;IACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAAzF,WAAA,CAAAyF,SAAA,yBAAAzF,WAAA,CAAAyF,SAAA;IACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAAzF,WAAA,CAAAyF,SAAA,wCAAAzF,WAAA,CAAAyF,SAAA,iBAAAzF,WAAA,CAAAyF,SAAA;IACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAAzF,WAAA,CAAAyF,SAAA,wCAAAxF,WAAA,CAAAwF,SAAA;IACA;EACA;EACA;EACA;EACA;EACA,IAAAzF,WAAA,CAAAyF,SAAA,iBAAAzF,WAAA,CAAAyF,SAAA;IACA;EACA;EACA;EACA;EACA,IAAAzF,WAAA,CAAAyF,SAAA,sBAAAzF,WAAA,CAAAyF,SAAA;IACA;EACA;EACA;EACA;EACA;EACA,IAAAzF,WAAA,CAAAyF,SAAA,qBAAAzF,WAAA,CAAAyF,SAAA;IACA;EACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}