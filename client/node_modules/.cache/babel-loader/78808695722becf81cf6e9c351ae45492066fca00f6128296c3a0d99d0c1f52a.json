{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { _DYN_GET_NOTIFY_MGR, _DYN_INITIALIZE, _DYN_NAME } from \"../__DynamicConstants\";\nimport { BaseCore } from \"./BaseCore\";\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\nimport { isNullOrUndefined, throwError } from \"./HelperFuncs\";\nimport { STR_EVENTS_DISCARDED, STR_GET_PERF_MGR } from \"./InternalConstants\";\nimport { NotificationManager } from \"./NotificationManager\";\nimport { doPerf } from \"./PerfManager\";\nvar AppInsightsCore = /** @class */function (_super) {\n  __extends(AppInsightsCore, _super);\n  function AppInsightsCore() {\n    var _this = _super.call(this) || this;\n    dynamicProto(AppInsightsCore, _this, function (_self, _base) {\n      _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, extensions, logger, notificationManager) {\n        _base[_DYN_INITIALIZE /* @min:%2einitialize */](config, extensions, logger || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));\n      };\n      _self.track = function (telemetryItem) {\n        doPerf(_self[STR_GET_PERF_MGR /* @min:%2egetPerfMgr */](), function () {\n          return \"AppInsightsCore:track\";\n        }, function () {\n          if (telemetryItem === null) {\n            _notifyInvalidEvent(telemetryItem);\n            // throw error\n            throwError(\"Invalid telemetry item\");\n          }\n          // do basic validation before sending it through the pipeline\n          _validateTelemetryItem(telemetryItem);\n          _base.track(telemetryItem);\n        }, function () {\n          return {\n            item: telemetryItem\n          };\n        }, !telemetryItem.sync);\n      };\n      function _validateTelemetryItem(telemetryItem) {\n        if (isNullOrUndefined(telemetryItem[_DYN_NAME /* @min:%2ename */])) {\n          _notifyInvalidEvent(telemetryItem);\n          throwError(\"telemetry name required\");\n        }\n      }\n      function _notifyInvalidEvent(telemetryItem) {\n        var manager = _self[_DYN_GET_NOTIFY_MGR /* @min:%2egetNotifyMgr */]();\n        if (manager) {\n          manager[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */]([telemetryItem], 2 /* eEventsDiscardedReason.InvalidEvent */);\n        }\n      }\n    });\n\n    return _this;\n  }\n  // Removed Stub for AppInsightsCore.prototype.initialize.\n  // Removed Stub for AppInsightsCore.prototype.track.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  AppInsightsCore.__ieDyn = 1;\n  return AppInsightsCore;\n}(BaseCore);\nexport { AppInsightsCore };","map":{"version":3,"names":["__extendsFn","__extends","dynamicProto","_DYN_GET_NOTIFY_MGR","_DYN_INITIALIZE","_DYN_NAME","BaseCore","DiagnosticLogger","isNullOrUndefined","throwError","STR_EVENTS_DISCARDED","STR_GET_PERF_MGR","NotificationManager","doPerf","AppInsightsCore","_super","_this","call","_self","_base","config","extensions","logger","notificationManager","track","telemetryItem","_notifyInvalidEvent","_validateTelemetryItem","item","sync","manager"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _DYN_GET_NOTIFY_MGR, _DYN_INITIALIZE, _DYN_NAME } from \"../__DynamicConstants\";\r\nimport { BaseCore } from \"./BaseCore\";\r\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport { isNullOrUndefined, throwError } from \"./HelperFuncs\";\r\nimport { STR_EVENTS_DISCARDED, STR_GET_PERF_MGR } from \"./InternalConstants\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { doPerf } from \"./PerfManager\";\r\nvar AppInsightsCore = /** @class */ (function (_super) {\r\n    __extends(AppInsightsCore, _super);\r\n    function AppInsightsCore() {\r\n        var _this = _super.call(this) || this;\r\n        dynamicProto(AppInsightsCore, _this, function (_self, _base) {\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, extensions, logger, notificationManager) {\r\n                _base[_DYN_INITIALIZE /* @min:%2einitialize */](config, extensions, logger || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));\r\n            };\r\n            _self.track = function (telemetryItem) {\r\n                doPerf(_self[STR_GET_PERF_MGR /* @min:%2egetPerfMgr */](), function () { return \"AppInsightsCore:track\"; }, function () {\r\n                    if (telemetryItem === null) {\r\n                        _notifyInvalidEvent(telemetryItem);\r\n                        // throw error\r\n                        throwError(\"Invalid telemetry item\");\r\n                    }\r\n                    // do basic validation before sending it through the pipeline\r\n                    _validateTelemetryItem(telemetryItem);\r\n                    _base.track(telemetryItem);\r\n                }, function () { return ({ item: telemetryItem }); }, !(telemetryItem.sync));\r\n            };\r\n            function _validateTelemetryItem(telemetryItem) {\r\n                if (isNullOrUndefined(telemetryItem[_DYN_NAME /* @min:%2ename */])) {\r\n                    _notifyInvalidEvent(telemetryItem);\r\n                    throwError(\"telemetry name required\");\r\n                }\r\n            }\r\n            function _notifyInvalidEvent(telemetryItem) {\r\n                var manager = _self[_DYN_GET_NOTIFY_MGR /* @min:%2egetNotifyMgr */]();\r\n                if (manager) {\r\n                    manager[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */]([telemetryItem], 2 /* eEventsDiscardedReason.InvalidEvent */);\r\n                }\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    AppInsightsCore.prototype.initialize = function (config, extensions, logger, notificationManager) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsCore.prototype.track = function (telemetryItem) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return AppInsightsCore;\r\n}(BaseCore));\r\nexport { AppInsightsCore };\r\n//# sourceMappingURL=AppInsightsCore.js.map"],"mappings":";;;;AAAA,SAAAA,WAAA,IAAAC,SAAA;AAGA,OAAAC,YAAA;AACA,SAAAC,mBAAA,EAAAC,eAAA,EAAAC,SAAA;AACA,SAAAC,QAAA;AACA,SAAAC,gBAAA;AACA,SAAAC,iBAAA,EAAAC,UAAA;AACA,SAAAC,oBAAA,EAAAC,gBAAA;AACA,SAAAC,mBAAA;AACA,SAAAC,MAAA;AACA,IAAAC,eAAA,0BAAAC,MAAA;EACAd,SAAA,CAAAa,eAAA,EAAAC,MAAA;EACA,SAAAD,gBAAA;IACA,IAAAE,KAAA,GAAAD,MAAA,CAAAE,IAAA;IACAf,YAAA,CAAAY,eAAA,EAAAE,KAAA,YAAAE,KAAA,EAAAC,KAAA;MACAD,KAAA,CAAAd,eAAA,uCAAAgB,MAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,mBAAA;QACAJ,KAAA,CAAAf,eAAA,2BAAAgB,MAAA,EAAAC,UAAA,EAAAC,MAAA,QAAAf,gBAAA,CAAAa,MAAA,GAAAG,mBAAA,QAAAX,mBAAA,CAAAQ,MAAA;MACA;MACAF,KAAA,CAAAM,KAAA,aAAAC,aAAA;QACAZ,MAAA,CAAAK,KAAA,CAAAP,gBAAA;UAAA;QAAA;UACA,IAAAc,aAAA;YACAC,mBAAA,CAAAD,aAAA;YACA;YACAhB,UAAA;UACA;UACA;UACAkB,sBAAA,CAAAF,aAAA;UACAN,KAAA,CAAAK,KAAA,CAAAC,aAAA;QACA;UAAA;YAAAG,IAAA,EAAAH;UAAA;QAAA,IAAAA,aAAA,CAAAI,IAAA;MACA;MACA,SAAAF,uBAAAF,aAAA;QACA,IAAAjB,iBAAA,CAAAiB,aAAA,CAAApB,SAAA;UACAqB,mBAAA,CAAAD,aAAA;UACAhB,UAAA;QACA;MACA;MACA,SAAAiB,oBAAAD,aAAA;QACA,IAAAK,OAAA,GAAAZ,KAAA,CAAAf,mBAAA;QACA,IAAA2B,OAAA;UACAA,OAAA,CAAApB,oBAAA,iCAAAe,aAAA;QACA;MACA;IACA;;IACA,OAAAT,KAAA;EACA;EACA;;;;;;;AAOA,EAAAV,QAAA;AACA,SAAAQ,eAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}