{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web Analytics, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* ApplicationInsights.ts\r\n* @copyright Microsoft 2018\r\n*/\nimport { __assignFn as __assign, __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { AnalyticsPluginIdentifier, Event as EventTelemetry, Exception, Metric, PageView, PageViewPerformance, PropertiesPluginIdentifier, RemoteDependencyData, Trace, createDistributedTraceContextFromTrace, createDomEvent, createTelemetryItem, dataSanitizeString, isCrossOriginError, strNotSpecified, stringToBoolOrDefault, utlDisableStorage, utlEnableStorage } from \"@microsoft/applicationinsights-common\";\nimport { BaseTelemetryPlugin, InstrumentEvent, arrForEach, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOff, eventOn, generateW3CId, getDocument, getExceptionName, getHistory, getLocation, getWindow, hasHistory, hasWindow, isError, isFunction, isNullOrUndefined, isString, isUndefined, mergeEvtNamespace, objDefineAccessors, objForEachKey, safeGetCookieMgr, strUndefined, throwError } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_ADD_TELEMETRY_INITIA15, _DYN_AUTO_TRACK_PAGE_VISI1, _DYN_COLUMN_NUMBER, _DYN_CORE, _DYN_DATA_TYPE, _DYN_DIAG_LOG, _DYN_DISABLE_EXCEPTION_TR0, _DYN_DISABLE_FLUSH_ON_BEF7, _DYN_ENABLE_AUTO_ROUTE_TR6, _DYN_ENABLE_UNHANDLED_PRO3, _DYN_ENVELOPE_TYPE, _DYN_ERROR, _DYN_ERROR_SRC, _DYN_EXCEPTION, _DYN_HREF, _DYN_IS_BROWSER_LINK_TRAC5, _DYN_IS_STORAGE_USE_DISAB4, _DYN_LENGTH, _DYN_LINE_NUMBER, _DYN_MESSAGE, _DYN_NAME_PREFIX, _DYN_OVERRIDE_PAGE_VIEW_D2, _DYN_POPULATE_PAGE_VIEW_P12, _DYN_SAMPLING_PERCENTAGE, _DYN_SEND_EXCEPTION_INTER13, _DYN_SEND_PAGE_VIEW_INTER10, _DYN_SEND_PAGE_VIEW_PERFO11, _DYN_TO_STRING, _DYN_TRACK, _DYN_TRACK_PAGE_VIEW, _DYN_TRACK_PREVIOUS_PAGE_9, _DYN__CREATE_AUTO_EXCEPTI14, _DYN__ONERROR } from \"../__DynamicConstants\";\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\nimport { Timing } from \"./Timing\";\nvar strEvent = \"event\";\nfunction _dispatchEvent(target, evnt) {\n  if (target && target.dispatchEvent && evnt) {\n    target.dispatchEvent(evnt);\n  }\n}\nfunction _getReason(error) {\n  if (error && error.reason) {\n    var reason = error.reason;\n    if (!isString(reason) && isFunction(reason[_DYN_TO_STRING /* @min:%2etoString */])) {\n      return reason[_DYN_TO_STRING /* @min:%2etoString */]();\n    }\n\n    return dumpObj(reason);\n  }\n  // Pass the original object down which will eventually get evaluated for any message or description\n  return error || \"\";\n}\nvar MinMilliSeconds = 60000;\nfunction _configMilliseconds(value, defValue) {\n  value = value || defValue;\n  if (value < MinMilliSeconds) {\n    value = MinMilliSeconds;\n  }\n  return value;\n}\nfunction _getDefaultConfig(config) {\n  if (!config) {\n    config = {};\n  }\n  // set default values\n  config.sessionRenewalMs = _configMilliseconds(config.sessionRenewalMs, 30 * 60 * 1000);\n  config.sessionExpirationMs = _configMilliseconds(config.sessionExpirationMs, 24 * 60 * 60 * 1000);\n  config[_DYN_DISABLE_EXCEPTION_TR0 /* @min:%2edisableExceptionTracking */] = stringToBoolOrDefault(config[_DYN_DISABLE_EXCEPTION_TR0 /* @min:%2edisableExceptionTracking */]);\n  config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */] = stringToBoolOrDefault(config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */]);\n  config[_DYN_OVERRIDE_PAGE_VIEW_D2 /* @min:%2eoverridePageViewDuration */] = stringToBoolOrDefault(config[_DYN_OVERRIDE_PAGE_VIEW_D2 /* @min:%2eoverridePageViewDuration */]);\n  config[_DYN_ENABLE_UNHANDLED_PRO3 /* @min:%2eenableUnhandledPromiseRejectionTracking */] = stringToBoolOrDefault(config[_DYN_ENABLE_UNHANDLED_PRO3 /* @min:%2eenableUnhandledPromiseRejectionTracking */]);\n  if (isNaN(config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */]) || config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] <= 0 || config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] >= 100) {\n    config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] = 100;\n  }\n  config[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */] = stringToBoolOrDefault(config[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */]);\n  config[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */] = stringToBoolOrDefault(config[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */]);\n  config[_DYN_ENABLE_AUTO_ROUTE_TR6 /* @min:%2eenableAutoRouteTracking */] = stringToBoolOrDefault(config[_DYN_ENABLE_AUTO_ROUTE_TR6 /* @min:%2eenableAutoRouteTracking */]);\n  config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] = config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\";\n  config.enableDebug = stringToBoolOrDefault(config.enableDebug);\n  config[_DYN_DISABLE_FLUSH_ON_BEF7 /* @min:%2edisableFlushOnBeforeUnload */] = stringToBoolOrDefault(config[_DYN_DISABLE_FLUSH_ON_BEF7 /* @min:%2edisableFlushOnBeforeUnload */]);\n  config.disableFlushOnUnload = stringToBoolOrDefault(config.disableFlushOnUnload, config[_DYN_DISABLE_FLUSH_ON_BEF7 /* @min:%2edisableFlushOnBeforeUnload */]);\n  return config;\n}\nfunction _updateStorageUsage(extConfig) {\n  // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\n  // reset based if the configuration option is provided\n  if (!isUndefined(extConfig[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */])) {\n    if (extConfig[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */]) {\n      utlDisableStorage();\n    } else {\n      utlEnableStorage();\n    }\n  }\n}\nvar AnalyticsPlugin = /** @class */function (_super) {\n  __extends(AnalyticsPlugin, _super);\n  function AnalyticsPlugin() {\n    var _this = _super.call(this) || this;\n    _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\n    _this.priority = 180; // take from reserved priority range 100- 200\n    _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\n    var _eventTracking;\n    var _pageTracking;\n    var _pageViewManager;\n    var _pageViewPerformanceManager;\n    var _pageVisitTimeManager;\n    var _preInitTelemetryInitializers;\n    var _isBrowserLinkTrackingEnabled;\n    var _browserLinkInitializerAdded;\n    var _enableAutoRouteTracking;\n    var _historyListenerAdded;\n    var _disableExceptionTracking;\n    var _autoExceptionInstrumented;\n    var _enableUnhandledPromiseRejectionTracking;\n    var _autoUnhandledPromiseInstrumented;\n    // Counts number of trackAjax invocations.\n    // By default we only monitor X ajax call per view to avoid too much load.\n    // Default value is set in config.\n    // This counter keeps increasing even after the limit is reached.\n    var _trackAjaxAttempts = 0;\n    // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\n    var _prevUri; // Assigned in the constructor\n    var _currUri;\n    var _evtNamespace;\n    dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\n      var _addHook = _base._addHook;\n      _initDefaults();\n      _self.getCookieMgr = function () {\n        return safeGetCookieMgr(_self[_DYN_CORE /* @min:%2ecore */]);\n      };\n\n      _self.processTelemetry = function (env, itemCtx) {\n        _self.processNext(env, itemCtx);\n      };\n      _self.trackEvent = function (event, customProperties) {\n        try {\n          var telemetryItem = createTelemetryItem(event, EventTelemetry[_DYN_DATA_TYPE /* @min:%2edataType */], EventTelemetry[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\n          _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        } catch (e) {\n          _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n       * @param   name    A string that identifies this event uniquely within the document.\r\n       */\n      _self.startTrackEvent = function (name) {\n        try {\n          _eventTracking.start(name);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 29 /* _eInternalMessageId.StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Log an extended event that you started timing with `startTrackEvent`.\r\n       * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n       * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n       * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n       */\n      _self.stopTrackEvent = function (name, properties, measurements) {\n        try {\n          _eventTracking.stop(name, undefined, properties, measurements);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 30 /* _eInternalMessageId.StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * @description Log a diagnostic message\r\n       * @param {ITraceTelemetry} trace\r\n       * @param ICustomProperties.\r\n       * @memberof ApplicationInsights\r\n       */\n      _self.trackTrace = function (trace, customProperties) {\n        try {\n          var telemetryItem = createTelemetryItem(trace, Trace[_DYN_DATA_TYPE /* @min:%2edataType */], Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\n          _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        } catch (e) {\n          _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * @description Log a numeric value that is not associated with a specific event. Typically\r\n       * used to send regular reports of performance indicators. To send single measurement, just\r\n       * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n       * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n       * and sending the resulting average at intervals\r\n       * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n       * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n       * portal. Defaults to empty.\r\n       * @memberof ApplicationInsights\r\n       */\n      _self.trackMetric = function (metric, customProperties) {\n        try {\n          var telemetryItem = createTelemetryItem(metric, Metric[_DYN_DATA_TYPE /* @min:%2edataType */], Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\n          _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 36 /* _eInternalMessageId.TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Logs that a page or other item was viewed.\r\n       * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n       * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n       * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n       */\n      _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\n        try {\n          var inPv = pageView || {};\n          _pageViewManager[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\n          if (_self.config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */]) {\n            _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */](inPv.name, inPv.uri);\n          }\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n       * @param pageView Page view item to be sent\r\n       * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n       * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n       */\n      _self[_DYN_SEND_PAGE_VIEW_INTER10 /* @min:%2esendPageViewInternal */] = function (pageView, properties, systemProperties) {\n        var doc = getDocument();\n        if (doc) {\n          pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\n        }\n        var telemetryItem = createTelemetryItem(pageView, PageView[_DYN_DATA_TYPE /* @min:%2edataType */], PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        // reset ajaxes counter\n        _trackAjaxAttempts = 0;\n      };\n      /**\r\n       * @ignore INTERNAL ONLY\r\n       * @param pageViewPerformance\r\n       * @param properties\r\n       */\n      _self[_DYN_SEND_PAGE_VIEW_PERFO11 /* @min:%2esendPageViewPerformanceInternal */] = function (pageViewPerformance, properties, systemProperties) {\n        var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n      };\n      /**\r\n       * Send browser performance metrics.\r\n       * @param pageViewPerformance\r\n       * @param customProperties\r\n       */\n      _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\n        var inPvp = pageViewPerformance || {};\n        try {\n          _pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P12 /* @min:%2epopulatePageViewPerformanceEvent */](inPvp);\n          _self[_DYN_SEND_PAGE_VIEW_PERFO11 /* @min:%2esendPageViewPerformanceInternal */](inPvp, customProperties);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n       * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n       * and send the event.\r\n       * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n       */\n      _self.startTrackPage = function (name) {\n        try {\n          if (typeof name !== \"string\") {\n            var doc = getDocument();\n            name = doc && doc.title || \"\";\n          }\n          _pageTracking.start(name);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 31 /* _eInternalMessageId.StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n       * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n       * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n       * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n       * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n       * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n       */\n      _self.stopTrackPage = function (name, url, properties, measurement) {\n        try {\n          if (typeof name !== \"string\") {\n            var doc = getDocument();\n            name = doc && doc.title || \"\";\n          }\n          if (typeof url !== \"string\") {\n            var loc = getLocation();\n            url = loc && loc[_DYN_HREF /* @min:%2ehref */] || \"\";\n          }\n          _pageTracking.stop(name, url, properties, measurement);\n          if (_self.config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */]) {\n            _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */](name, url);\n          }\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 32 /* _eInternalMessageId.StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n      * @ignore INTERNAL ONLY\r\n      * @param exception\r\n      * @param properties\r\n      * @param systemProperties\r\n      */\n      _self[_DYN_SEND_EXCEPTION_INTER13 /* @min:%2esendExceptionInternal */] = function (exception, customProperties, systemProperties) {\n        // Adding additional edge cases to handle\n        // - Not passing anything (null / undefined)\n        var theError = exception && (exception[_DYN_EXCEPTION /* @min:%2eexception */] || exception[_DYN_ERROR /* @min:%2eerror */]) ||\n        // - Handle someone calling trackException based of v1 API where the exception was the Error\n        isError(exception) && exception ||\n        // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace\n        //   is preserved and does not list ApplicationInsights code as the source\n        {\n          name: exception && typeof exception,\n          message: exception || strNotSpecified\n        };\n        // If no exception object was passed assign to an empty object to avoid internal exceptions\n        exception = exception || {};\n        var exceptionPartB = new Exception(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), theError, exception.properties || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\n        var telemetryItem = createTelemetryItem(exceptionPartB, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties, systemProperties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n      };\n      /**\r\n       * Log an exception you have caught.\r\n       *\r\n       * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n       * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n       *\r\n       * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n       * @memberof ApplicationInsights\r\n       */\n      _self.trackException = function (exception, customProperties) {\n        if (exception && !exception[_DYN_EXCEPTION /* @min:%2eexception */] && exception[_DYN_ERROR /* @min:%2eerror */]) {\n          exception[_DYN_EXCEPTION /* @min:%2eexception */] = exception[_DYN_ERROR /* @min:%2eerror */];\n        }\n\n        try {\n          _self[_DYN_SEND_EXCEPTION_INTER13 /* @min:%2esendExceptionInternal */](exception, customProperties);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 35 /* _eInternalMessageId.TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * @description Custom error handler for Application Insights Analytics\r\n       * @param {IAutoExceptionTelemetry} exception\r\n       * @memberof ApplicationInsights\r\n       */\n      _self[_DYN__ONERROR /* @min:%2e_onerror */] = function (exception) {\n        var error = exception && exception[_DYN_ERROR /* @min:%2eerror */];\n        var evt = exception && exception.evt;\n        try {\n          if (!evt) {\n            var _window = getWindow();\n            if (_window) {\n              evt = _window[strEvent];\n            }\n          }\n          var url = exception && exception.url || (getDocument() || {}).URL;\n          // If no error source is provided assume the default window.onerror handler\n          var errorSrc = exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] || \"window.onerror@\" + url + \":\" + (exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0) + \":\" + (exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0);\n          var properties = {\n            errorSrc: errorSrc,\n            url: url,\n            lineNumber: exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0,\n            columnNumber: exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0,\n            message: exception[_DYN_MESSAGE /* @min:%2emessage */]\n          };\n\n          if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[_DYN_ERROR /* @min:%2eerror */])) {\n            _sendCORSException(Exception[_DYN__CREATE_AUTO_EXCEPTI14 /* @min:%2eCreateAutoException */](\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0, exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0, error, evt, null, errorSrc), properties);\n          } else {\n            if (!exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */]) {\n              exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] = errorSrc;\n            }\n            _self.trackException({\n              exception: exception,\n              severityLevel: 3 /* eSeverityLevel.Error */\n            }, properties);\n          }\n        } catch (e) {\n          var errorString = error ? error.name + \", \" + error[_DYN_MESSAGE /* @min:%2emessage */] : \"null\";\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 11 /* _eInternalMessageId.ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e),\n            errorString: errorString\n          });\n        }\n      };\n      _self[_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */] = function (telemetryInitializer) {\n        if (_self[_DYN_CORE /* @min:%2ecore */]) {\n          // Just add to the core\n          return _self[_DYN_CORE /* @min:%2ecore */][_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */](telemetryInitializer);\n        }\n        // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\n        if (!_preInitTelemetryInitializers) {\n          _preInitTelemetryInitializers = [];\n        }\n        _preInitTelemetryInitializers.push(telemetryInitializer);\n      };\n      _self.initialize = function (config, core, extensions, pluginChain) {\n        if (_self.isInitialized()) {\n          return;\n        }\n        if (isNullOrUndefined(core)) {\n          throwError(\"Error initializing\");\n        }\n        _base.initialize(config, core, extensions, pluginChain);\n        try {\n          _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\n          if (_preInitTelemetryInitializers) {\n            arrForEach(_preInitTelemetryInitializers, function (initializer) {\n              core[_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */](initializer);\n            });\n            _preInitTelemetryInitializers = null;\n          }\n          var extConfig = _populateDefaults(config);\n          _updateStorageUsage(extConfig);\n          _pageViewPerformanceManager = new PageViewPerformanceManager(_self[_DYN_CORE /* @min:%2ecore */]);\n          _pageViewManager = new PageViewManager(_this, extConfig[_DYN_OVERRIDE_PAGE_VIEW_D2 /* @min:%2eoverridePageViewDuration */], _self[_DYN_CORE /* @min:%2ecore */], _pageViewPerformanceManager);\n          _pageVisitTimeManager = new PageVisitTimeManager(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), function (pageName, pageUrl, pageVisitTime) {\n            return trackPageVisitTime(pageName, pageUrl, pageVisitTime);\n          });\n          _updateBrowserLinkTracking(extConfig, config);\n          _eventTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackEvent\");\n          _eventTracking.action = function (name, url, duration, properties, measurements) {\n            if (!properties) {\n              properties = {};\n            }\n            if (!measurements) {\n              measurements = {};\n            }\n            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\n            _self.trackEvent({\n              name: name,\n              properties: properties,\n              measurements: measurements\n            });\n          };\n          // initialize page view timing\n          _pageTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackPageView\");\n          _pageTracking.action = function (name, url, duration, properties, measurements) {\n            // duration must be a custom property in order for the collector to extract it\n            if (isNullOrUndefined(properties)) {\n              properties = {};\n            }\n            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\n            var pageViewItem = {\n              name: name,\n              uri: url,\n              properties: properties,\n              measurements: measurements\n            };\n            _self[_DYN_SEND_PAGE_VIEW_INTER10 /* @min:%2esendPageViewInternal */](pageViewItem, properties);\n          };\n          if (hasWindow()) {\n            _updateExceptionTracking(extConfig);\n            _updateLocationChange(extConfig);\n          }\n        } catch (e) {\n          // resetting the initialized state because of failure\n          _self.setInitialized(false);\n          throw e;\n        }\n      };\n      _self._doTeardown = function (unloadCtx, unloadState) {\n        _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\n        // Just register to remove all events associated with this namespace\n        eventOff(window, null, null, _evtNamespace);\n        _initDefaults();\n      };\n      function _populateDefaults(config) {\n        var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\n        var identifier = _self.identifier;\n        // load default values if specified\n        var defaults = _getDefaultConfig(config);\n        var extConfig = _self.config = ctx.getExtCfg(identifier);\n        if (defaults !== undefined) {\n          objForEachKey(defaults, function (field, value) {\n            // for each unspecified field, set the default value\n            extConfig[field] = ctx.getConfig(identifier, field, value);\n            if (extConfig[field] === undefined) {\n              extConfig = value;\n            }\n          });\n        }\n        return extConfig;\n      }\n      function _updateBrowserLinkTracking(extConfig, config) {\n        _isBrowserLinkTrackingEnabled = extConfig[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */] || config[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */];\n        _addDefaultTelemetryInitializers();\n      }\n      /**\r\n       * Log a page visit time\r\n       * @param    pageName    Name of page\r\n       * @param    pageVisitDuration Duration of visit to the page in milleseconds\r\n       */\n      function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\n        var properties = {\n          PageName: pageName,\n          PageUrl: pageUrl\n        };\n        _self.trackMetric({\n          name: \"PageVisitTime\",\n          average: pageVisitTime,\n          max: pageVisitTime,\n          min: pageVisitTime,\n          sampleCount: 1\n        }, properties);\n      }\n      function _addDefaultTelemetryInitializers() {\n        if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\n          var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\n          var dropBrowserLinkRequests = function dropBrowserLinkRequests(envelope) {\n            if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */]) {\n              var remoteData = envelope.baseData;\n              if (remoteData) {\n                for (var i = 0; i < browserLinkPaths_1[_DYN_LENGTH /* @min:%2elength */]; i++) {\n                  if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) {\n                    return false;\n                  }\n                }\n              }\n            }\n            return true;\n          };\n          _self[_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */](dropBrowserLinkRequests);\n          _browserLinkInitializerAdded = true;\n        }\n      }\n      function _sendCORSException(exception, properties) {\n        var telemetryItem = createTelemetryItem(exception, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n      }\n      function _updateExceptionTracking(extConfig) {\n        var _window = getWindow();\n        var locn = getLocation(true);\n        _disableExceptionTracking = extConfig[_DYN_DISABLE_EXCEPTION_TR0 /* @min:%2edisableExceptionTracking */];\n        if (!_disableExceptionTracking && !_autoExceptionInstrumented && !extConfig.autoExceptionInstrumented) {\n          // We want to enable exception auto collection and it has not been done so yet\n          _addHook(InstrumentEvent(_window, \"onerror\", {\n            ns: _evtNamespace,\n            rsp: function rsp(callDetails, message, url, lineNumber, columnNumber, error) {\n              if (!_disableExceptionTracking && callDetails.rslt !== true) {\n                _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI14 /* @min:%2eCreateAutoException */](message, url, lineNumber, columnNumber, error, callDetails.evt));\n              }\n            }\n          }, false));\n          _autoExceptionInstrumented = true;\n        }\n        _addUnhandledPromiseRejectionTracking(extConfig, _window, locn);\n      }\n      function _updateLocationChange(extConfig) {\n        var win = getWindow();\n        var locn = getLocation(true);\n        _enableAutoRouteTracking = extConfig[_DYN_ENABLE_AUTO_ROUTE_TR6 /* @min:%2eenableAutoRouteTracking */] === true;\n        /**\r\n         * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n         */\n        if (win && _enableAutoRouteTracking && hasHistory()) {\n          var _history = getHistory();\n          if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\n            _addHistoryListener(extConfig, win, _history, locn);\n          }\n        }\n      }\n      function _getDistributedTraceCtx() {\n        var distributedTraceCtx = null;\n        if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\n          distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\n        }\n        if (!distributedTraceCtx) {\n          // Fallback when using an older Core and PropertiesPlugin\n          var properties = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\n          if (properties) {\n            var context = properties.plugin.context;\n            if (context) {\n              distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);\n            }\n          }\n        }\n        return distributedTraceCtx;\n      }\n      /**\r\n       * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n       */\n      function _addHistoryListener(extConfig, win, history, locn) {\n        var namePrefix = extConfig[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\";\n        function _popstateHandler() {\n          if (_enableAutoRouteTracking) {\n            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\n          }\n        }\n        function _locationChangeHandler() {\n          // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\n          if (_currUri) {\n            _prevUri = _currUri;\n            _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\n          } else {\n            _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\n          }\n          if (_enableAutoRouteTracking) {\n            var distributedTraceCtx = _getDistributedTraceCtx();\n            if (distributedTraceCtx) {\n              distributedTraceCtx.setTraceId(generateW3CId());\n              var traceLocationName = \"_unknown_\";\n              if (locn && locn.pathname) {\n                traceLocationName = locn.pathname + (locn.hash || \"\");\n              }\n              // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\n              distributedTraceCtx.setName(dataSanitizeString(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), traceLocationName));\n            }\n            setTimeout(function (uri) {\n              // todo: override start time so that it is not affected by autoRoutePVDelay\n              _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */]({\n                refUri: uri,\n                properties: {\n                  duration: 0\n                }\n              }); // SPA route change loading durations are undefined, so send 0\n            }.bind(this, _prevUri), _self.autoRoutePVDelay);\n          }\n        }\n        if (!_historyListenerAdded) {\n          _addHook(InstrumentEvent(history, \"pushState\", {\n            ns: _evtNamespace,\n            rsp: function rsp() {\n              if (_enableAutoRouteTracking) {\n                _dispatchEvent(win, createDomEvent(namePrefix + \"pushState\"));\n                _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\n              }\n            }\n          }, true));\n          _addHook(InstrumentEvent(history, \"replaceState\", {\n            ns: _evtNamespace,\n            rsp: function rsp() {\n              if (_enableAutoRouteTracking) {\n                _dispatchEvent(win, createDomEvent(namePrefix + \"replaceState\"));\n                _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\n              }\n            }\n          }, true));\n          eventOn(win, namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\n          eventOn(win, namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\n          _historyListenerAdded = true;\n        }\n      }\n      function _addUnhandledPromiseRejectionTracking(extConfig, _window, _location) {\n        _enableUnhandledPromiseRejectionTracking = extConfig[_DYN_ENABLE_UNHANDLED_PRO3 /* @min:%2eenableUnhandledPromiseRejectionTracking */] === true;\n        if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\n          // We want to enable exception auto collection and it has not been done so yet\n          _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\n            ns: _evtNamespace,\n            rsp: function rsp(callDetails, error) {\n              if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) {\n                // handled could be typeof function\n                _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI14 /* @min:%2eCreateAutoException */](_getReason(error), _location ? _location[_DYN_HREF /* @min:%2ehref */] : \"\", 0, 0, error, callDetails.evt));\n              }\n            }\n          }, false));\n          _autoUnhandledPromiseInstrumented = true;\n          extConfig.autoUnhandledPromiseInstrumented = _autoUnhandledPromiseInstrumented;\n        }\n      }\n      /**\r\n       * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n       * @param severity {eLoggingSeverity} - The severity of the log message\r\n       * @param message {_InternalLogMessage} - The log message.\r\n       */\n      function _throwInternal(severity, msgId, msg, properties, isUserAct) {\n        _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]().throwInternal(severity, msgId, msg, properties, isUserAct);\n      }\n      function _initDefaults() {\n        _eventTracking = null;\n        _pageTracking = null;\n        _pageViewManager = null;\n        _pageViewPerformanceManager = null;\n        _pageVisitTimeManager = null;\n        _preInitTelemetryInitializers = null;\n        _isBrowserLinkTrackingEnabled = false;\n        _browserLinkInitializerAdded = false;\n        _enableAutoRouteTracking = false;\n        _historyListenerAdded = false;\n        _disableExceptionTracking = false;\n        _autoExceptionInstrumented = false;\n        _enableUnhandledPromiseRejectionTracking = false;\n        _autoUnhandledPromiseInstrumented = false;\n        // Counts number of trackAjax invocations.\n        // By default we only monitor X ajax call per view to avoid too much load.\n        // Default value is set in config.\n        // This counter keeps increasing even after the limit is reached.\n        _trackAjaxAttempts = 0;\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\n        var location = getLocation(true);\n        _prevUri = location && location[_DYN_HREF /* @min:%2ehref */] || \"\";\n        _currUri = null;\n        _evtNamespace = null;\n      }\n      // For backward compatibility\n      objDefineAccessors(_self, \"_pageViewManager\", function () {\n        return _pageViewManager;\n      });\n      objDefineAccessors(_self, \"_pageViewPerformanceManager\", function () {\n        return _pageViewPerformanceManager;\n      });\n      objDefineAccessors(_self, \"_pageVisitTimeManager\", function () {\n        return _pageVisitTimeManager;\n      });\n      objDefineAccessors(_self, \"_evtNamespace\", function () {\n        return \".\" + _evtNamespace;\n      });\n    });\n    return _this;\n  }\n  // Removed Stub for AnalyticsPlugin.prototype.getCookieMgr.\n  // Removed Stub for AnalyticsPlugin.prototype.processTelemetry.\n  // Removed Stub for AnalyticsPlugin.prototype.trackEvent.\n  // Removed Stub for AnalyticsPlugin.prototype.startTrackEvent.\n  // Removed Stub for AnalyticsPlugin.prototype.stopTrackEvent.\n  // Removed Stub for AnalyticsPlugin.prototype.trackTrace.\n  // Removed Stub for AnalyticsPlugin.prototype.trackMetric.\n  // Removed Stub for AnalyticsPlugin.prototype.trackPageView.\n  // Removed Stub for AnalyticsPlugin.prototype.sendPageViewInternal.\n  // Removed Stub for AnalyticsPlugin.prototype.sendPageViewPerformanceInternal.\n  // Removed Stub for AnalyticsPlugin.prototype.trackPageViewPerformance.\n  // Removed Stub for AnalyticsPlugin.prototype.startTrackPage.\n  // Removed Stub for AnalyticsPlugin.prototype.stopTrackPage.\n  // Removed Stub for AnalyticsPlugin.prototype.sendExceptionInternal.\n  // Removed Stub for AnalyticsPlugin.prototype.trackException.\n  // Removed Stub for AnalyticsPlugin.prototype._onerror.\n  // Removed Stub for AnalyticsPlugin.prototype.addTelemetryInitializer.\n  // Removed Stub for AnalyticsPlugin.prototype.initialize.\n  AnalyticsPlugin.Version = '2.8.12'; // Not currently used anywhere\n  AnalyticsPlugin.getDefaultConfig = _getDefaultConfig;\n  return AnalyticsPlugin;\n}(BaseTelemetryPlugin);\nexport { AnalyticsPlugin };","map":{"version":3,"names":["__assignFn","__assign","__extendsFn","__extends","dynamicProto","AnalyticsPluginIdentifier","Event","EventTelemetry","Exception","Metric","PageView","PageViewPerformance","PropertiesPluginIdentifier","RemoteDependencyData","Trace","createDistributedTraceContextFromTrace","createDomEvent","createTelemetryItem","dataSanitizeString","isCrossOriginError","strNotSpecified","stringToBoolOrDefault","utlDisableStorage","utlEnableStorage","BaseTelemetryPlugin","InstrumentEvent","arrForEach","createProcessTelemetryContext","createUniqueNamespace","dumpObj","eventOff","eventOn","generateW3CId","getDocument","getExceptionName","getHistory","getLocation","getWindow","hasHistory","hasWindow","isError","isFunction","isNullOrUndefined","isString","isUndefined","mergeEvtNamespace","objDefineAccessors","objForEachKey","safeGetCookieMgr","strUndefined","throwError","_DYN_ADD_TELEMETRY_INITIA15","_DYN_AUTO_TRACK_PAGE_VISI1","_DYN_COLUMN_NUMBER","_DYN_CORE","_DYN_DATA_TYPE","_DYN_DIAG_LOG","_DYN_DISABLE_EXCEPTION_TR0","_DYN_DISABLE_FLUSH_ON_BEF7","_DYN_ENABLE_AUTO_ROUTE_TR6","_DYN_ENABLE_UNHANDLED_PRO3","_DYN_ENVELOPE_TYPE","_DYN_ERROR","_DYN_ERROR_SRC","_DYN_EXCEPTION","_DYN_HREF","_DYN_IS_BROWSER_LINK_TRAC5","_DYN_IS_STORAGE_USE_DISAB4","_DYN_LENGTH","_DYN_LINE_NUMBER","_DYN_MESSAGE","_DYN_NAME_PREFIX","_DYN_OVERRIDE_PAGE_VIEW_D2","_DYN_POPULATE_PAGE_VIEW_P12","_DYN_SAMPLING_PERCENTAGE","_DYN_SEND_EXCEPTION_INTER13","_DYN_SEND_PAGE_VIEW_INTER10","_DYN_SEND_PAGE_VIEW_PERFO11","_DYN_TO_STRING","_DYN_TRACK","_DYN_TRACK_PAGE_VIEW","_DYN_TRACK_PREVIOUS_PAGE_9","_DYN__CREATE_AUTO_EXCEPTI14","_DYN__ONERROR","PageViewManager","PageViewPerformanceManager","PageVisitTimeManager","Timing","strEvent","_dispatchEvent","target","evnt","dispatchEvent","_getReason","error","reason","MinMilliSeconds","_configMilliseconds","value","defValue","_getDefaultConfig","config","sessionRenewalMs","sessionExpirationMs","isNaN","enableDebug","disableFlushOnUnload","_updateStorageUsage","extConfig","AnalyticsPlugin","_super","_this","call","identifier","priority","autoRoutePVDelay","_eventTracking","_pageTracking","_pageViewManager","_pageViewPerformanceManager","_pageVisitTimeManager","_preInitTelemetryInitializers","_isBrowserLinkTrackingEnabled","_browserLinkInitializerAdded","_enableAutoRouteTracking","_historyListenerAdded","_disableExceptionTracking","_autoExceptionInstrumented","_enableUnhandledPromiseRejectionTracking","_autoUnhandledPromiseInstrumented","_trackAjaxAttempts","_prevUri","_currUri","_evtNamespace","_self","_base","_addHook","_initDefaults","getCookieMgr","processTelemetry","env","itemCtx","processNext","trackEvent","event","customProperties","telemetryItem","e","_throwInternal","exception","startTrackEvent","name","start","stopTrackEvent","properties","measurements","stop","undefined","trackTrace","trace","trackMetric","metric","pageView","inPv","uri","systemProperties","doc","refUri","referrer","pageViewPerformance","trackPageViewPerformance","inPvp","startTrackPage","title","stopTrackPage","url","measurement","loc","theError","message","exceptionPartB","severityLevel","id","toInterface","trackException","evt","_window","URL","errorSrc","lineNumber","columnNumber","_sendCORSException","errorString","telemetryInitializer","push","initialize","core","extensions","pluginChain","isInitialized","evtNamespace","initializer","_populateDefaults","pageName","pageUrl","pageVisitTime","trackPageVisitTime","_updateBrowserLinkTracking","action","duration","pageViewItem","_updateExceptionTracking","_updateLocationChange","setInitialized","_doTeardown","unloadCtx","unloadState","teardown","window","ctx","defaults","getExtCfg","field","getConfig","_addDefaultTelemetryInitializers","PageName","PageUrl","average","max","min","sampleCount","browserLinkPaths_1","dropBrowserLinkRequests","envelope","baseType","remoteData","baseData","i","indexOf","locn","autoExceptionInstrumented","ns","rsp","callDetails","rslt","_addUnhandledPromiseRejectionTracking","win","_history","pushState","replaceState","_addHistoryListener","_getDistributedTraceCtx","distributedTraceCtx","getTraceCtx","getPlugin","context","plugin","telemetryTrace","history","namePrefix","_popstateHandler","_locationChangeHandler","setTraceId","traceLocationName","pathname","hash","setName","setTimeout","bind","_location","autoUnhandledPromiseInstrumented","severity","msgId","msg","isUserAct","throwInternal","location","Version","getDefaultConfig"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/AnalyticsPlugin.js"],"sourcesContent":["/**\r\n* ApplicationInsights.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPluginIdentifier, Event as EventTelemetry, Exception, Metric, PageView, PageViewPerformance, PropertiesPluginIdentifier, RemoteDependencyData, Trace, createDistributedTraceContextFromTrace, createDomEvent, createTelemetryItem, dataSanitizeString, isCrossOriginError, strNotSpecified, stringToBoolOrDefault, utlDisableStorage, utlEnableStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentEvent, arrForEach, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOff, eventOn, generateW3CId, getDocument, getExceptionName, getHistory, getLocation, getWindow, hasHistory, hasWindow, isError, isFunction, isNullOrUndefined, isString, isUndefined, mergeEvtNamespace, objDefineAccessors, objForEachKey, safeGetCookieMgr, strUndefined, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_ADD_TELEMETRY_INITIA15, _DYN_AUTO_TRACK_PAGE_VISI1, _DYN_COLUMN_NUMBER, _DYN_CORE, _DYN_DATA_TYPE, _DYN_DIAG_LOG, _DYN_DISABLE_EXCEPTION_TR0, _DYN_DISABLE_FLUSH_ON_BEF7, _DYN_ENABLE_AUTO_ROUTE_TR6, _DYN_ENABLE_UNHANDLED_PRO3, _DYN_ENVELOPE_TYPE, _DYN_ERROR, _DYN_ERROR_SRC, _DYN_EXCEPTION, _DYN_HREF, _DYN_IS_BROWSER_LINK_TRAC5, _DYN_IS_STORAGE_USE_DISAB4, _DYN_LENGTH, _DYN_LINE_NUMBER, _DYN_MESSAGE, _DYN_NAME_PREFIX, _DYN_OVERRIDE_PAGE_VIEW_D2, _DYN_POPULATE_PAGE_VIEW_P12, _DYN_SAMPLING_PERCENTAGE, _DYN_SEND_EXCEPTION_INTER13, _DYN_SEND_PAGE_VIEW_INTER10, _DYN_SEND_PAGE_VIEW_PERFO11, _DYN_TO_STRING, _DYN_TRACK, _DYN_TRACK_PAGE_VIEW, _DYN_TRACK_PREVIOUS_PAGE_9, _DYN__CREATE_AUTO_EXCEPTI14, _DYN__ONERROR } from \"../__DynamicConstants\";\r\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\r\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { Timing } from \"./Timing\";\r\nvar strEvent = \"event\";\r\nfunction _dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n    }\r\n}\r\nfunction _getReason(error) {\r\n    if (error && error.reason) {\r\n        var reason = error.reason;\r\n        if (!isString(reason) && isFunction(reason[_DYN_TO_STRING /* @min:%2etoString */])) {\r\n            return reason[_DYN_TO_STRING /* @min:%2etoString */]();\r\n        }\r\n        return dumpObj(reason);\r\n    }\r\n    // Pass the original object down which will eventually get evaluated for any message or description\r\n    return error || \"\";\r\n}\r\nvar MinMilliSeconds = 60000;\r\nfunction _configMilliseconds(value, defValue) {\r\n    value = value || defValue;\r\n    if (value < MinMilliSeconds) {\r\n        value = MinMilliSeconds;\r\n    }\r\n    return value;\r\n}\r\nfunction _getDefaultConfig(config) {\r\n    if (!config) {\r\n        config = {};\r\n    }\r\n    // set default values\r\n    config.sessionRenewalMs = _configMilliseconds(config.sessionRenewalMs, 30 * 60 * 1000);\r\n    config.sessionExpirationMs = _configMilliseconds(config.sessionExpirationMs, 24 * 60 * 60 * 1000);\r\n    config[_DYN_DISABLE_EXCEPTION_TR0 /* @min:%2edisableExceptionTracking */] = stringToBoolOrDefault(config[_DYN_DISABLE_EXCEPTION_TR0 /* @min:%2edisableExceptionTracking */]);\r\n    config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */] = stringToBoolOrDefault(config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */]);\r\n    config[_DYN_OVERRIDE_PAGE_VIEW_D2 /* @min:%2eoverridePageViewDuration */] = stringToBoolOrDefault(config[_DYN_OVERRIDE_PAGE_VIEW_D2 /* @min:%2eoverridePageViewDuration */]);\r\n    config[_DYN_ENABLE_UNHANDLED_PRO3 /* @min:%2eenableUnhandledPromiseRejectionTracking */] = stringToBoolOrDefault(config[_DYN_ENABLE_UNHANDLED_PRO3 /* @min:%2eenableUnhandledPromiseRejectionTracking */]);\r\n    if (isNaN(config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */]) || config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] <= 0 || config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] >= 100) {\r\n        config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] = 100;\r\n    }\r\n    config[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */] = stringToBoolOrDefault(config[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */]);\r\n    config[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */] = stringToBoolOrDefault(config[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */]);\r\n    config[_DYN_ENABLE_AUTO_ROUTE_TR6 /* @min:%2eenableAutoRouteTracking */] = stringToBoolOrDefault(config[_DYN_ENABLE_AUTO_ROUTE_TR6 /* @min:%2eenableAutoRouteTracking */]);\r\n    config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] = config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\";\r\n    config.enableDebug = stringToBoolOrDefault(config.enableDebug);\r\n    config[_DYN_DISABLE_FLUSH_ON_BEF7 /* @min:%2edisableFlushOnBeforeUnload */] = stringToBoolOrDefault(config[_DYN_DISABLE_FLUSH_ON_BEF7 /* @min:%2edisableFlushOnBeforeUnload */]);\r\n    config.disableFlushOnUnload = stringToBoolOrDefault(config.disableFlushOnUnload, config[_DYN_DISABLE_FLUSH_ON_BEF7 /* @min:%2edisableFlushOnBeforeUnload */]);\r\n    return config;\r\n}\r\nfunction _updateStorageUsage(extConfig) {\r\n    // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\r\n    // reset based if the configuration option is provided\r\n    if (!isUndefined(extConfig[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */])) {\r\n        if (extConfig[_DYN_IS_STORAGE_USE_DISAB4 /* @min:%2eisStorageUseDisabled */]) {\r\n            utlDisableStorage();\r\n        }\r\n        else {\r\n            utlEnableStorage();\r\n        }\r\n    }\r\n}\r\nvar AnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(AnalyticsPlugin, _super);\r\n    function AnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\r\n        _this.priority = 180; // take from reserved priority range 100- 200\r\n        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n        var _eventTracking;\r\n        var _pageTracking;\r\n        var _pageViewManager;\r\n        var _pageViewPerformanceManager;\r\n        var _pageVisitTimeManager;\r\n        var _preInitTelemetryInitializers;\r\n        var _isBrowserLinkTrackingEnabled;\r\n        var _browserLinkInitializerAdded;\r\n        var _enableAutoRouteTracking;\r\n        var _historyListenerAdded;\r\n        var _disableExceptionTracking;\r\n        var _autoExceptionInstrumented;\r\n        var _enableUnhandledPromiseRejectionTracking;\r\n        var _autoUnhandledPromiseInstrumented;\r\n        // Counts number of trackAjax invocations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        var _trackAjaxAttempts = 0;\r\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n        var _prevUri; // Assigned in the constructor\r\n        var _currUri;\r\n        var _evtNamespace;\r\n        dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\r\n            var _addHook = _base._addHook;\r\n            _initDefaults();\r\n            _self.getCookieMgr = function () {\r\n                return safeGetCookieMgr(_self[_DYN_CORE /* @min:%2ecore */]);\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self.trackEvent = function (event, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(event, EventTelemetry[_DYN_DATA_TYPE /* @min:%2edataType */], EventTelemetry[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n             * @param   name    A string that identifies this event uniquely within the document.\r\n             */\r\n            _self.startTrackEvent = function (name) {\r\n                try {\r\n                    _eventTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 29 /* _eInternalMessageId.StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Log an extended event that you started timing with `startTrackEvent`.\r\n             * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n             * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackEvent = function (name, properties, measurements) {\r\n                try {\r\n                    _eventTracking.stop(name, undefined, properties, measurements);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 30 /* _eInternalMessageId.StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a diagnostic message\r\n             * @param {ITraceTelemetry} trace\r\n             * @param ICustomProperties.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackTrace = function (trace, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(trace, Trace[_DYN_DATA_TYPE /* @min:%2edataType */], Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a numeric value that is not associated with a specific event. Typically\r\n             * used to send regular reports of performance indicators. To send single measurement, just\r\n             * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n             * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n             * and sending the resulting average at intervals\r\n             * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n             * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n             * portal. Defaults to empty.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackMetric = function (metric, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(metric, Metric[_DYN_DATA_TYPE /* @min:%2edataType */], Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 36 /* _eInternalMessageId.TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Logs that a page or other item was viewed.\r\n             * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n             * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n             */\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                try {\r\n                    var inPv = pageView || {};\r\n                    _pageViewManager[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\r\n                    if (_self.config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */]) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */](inPv.name, inPv.uri);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n             * @param pageView Page view item to be sent\r\n             * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n             * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_INTER10 /* @min:%2esendPageViewInternal */] = function (pageView, properties, systemProperties) {\r\n                var doc = getDocument();\r\n                if (doc) {\r\n                    pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\r\n                }\r\n                var telemetryItem = createTelemetryItem(pageView, PageView[_DYN_DATA_TYPE /* @min:%2edataType */], PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                // reset ajaxes counter\r\n                _trackAjaxAttempts = 0;\r\n            };\r\n            /**\r\n             * @ignore INTERNAL ONLY\r\n             * @param pageViewPerformance\r\n             * @param properties\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_PERFO11 /* @min:%2esendPageViewPerformanceInternal */] = function (pageViewPerformance, properties, systemProperties) {\r\n                var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Send browser performance metrics.\r\n             * @param pageViewPerformance\r\n             * @param customProperties\r\n             */\r\n            _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n                var inPvp = pageViewPerformance || {};\r\n                try {\r\n                    _pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P12 /* @min:%2epopulatePageViewPerformanceEvent */](inPvp);\r\n                    _self[_DYN_SEND_PAGE_VIEW_PERFO11 /* @min:%2esendPageViewPerformanceInternal */](inPvp, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n             * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n             * and send the event.\r\n             * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n             */\r\n            _self.startTrackPage = function (name) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    _pageTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 31 /* _eInternalMessageId.StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n             * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n             * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n             * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackPage = function (name, url, properties, measurement) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    if (typeof url !== \"string\") {\r\n                        var loc = getLocation();\r\n                        url = loc && loc[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    _pageTracking.stop(name, url, properties, measurement);\r\n                    if (_self.config[_DYN_AUTO_TRACK_PAGE_VISI1 /* @min:%2eautoTrackPageVisitTime */]) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */](name, url);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 32 /* _eInternalMessageId.StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n            * @ignore INTERNAL ONLY\r\n            * @param exception\r\n            * @param properties\r\n            * @param systemProperties\r\n            */\r\n            _self[_DYN_SEND_EXCEPTION_INTER13 /* @min:%2esendExceptionInternal */] = function (exception, customProperties, systemProperties) {\r\n                // Adding additional edge cases to handle\r\n                // - Not passing anything (null / undefined)\r\n                var theError = (exception && (exception[_DYN_EXCEPTION /* @min:%2eexception */] || exception[_DYN_ERROR /* @min:%2eerror */])) ||\r\n                    // - Handle someone calling trackException based of v1 API where the exception was the Error\r\n                    isError(exception) && exception ||\r\n                    // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace\r\n                    //   is preserved and does not list ApplicationInsights code as the source\r\n                    { name: (exception && typeof exception), message: exception || strNotSpecified };\r\n                // If no exception object was passed assign to an empty object to avoid internal exceptions\r\n                exception = exception || {};\r\n                var exceptionPartB = new Exception(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), theError, exception.properties || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\r\n                var telemetryItem = createTelemetryItem(exceptionPartB, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Log an exception you have caught.\r\n             *\r\n             * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n             * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             *\r\n             * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackException = function (exception, customProperties) {\r\n                if (exception && !exception[_DYN_EXCEPTION /* @min:%2eexception */] && exception[_DYN_ERROR /* @min:%2eerror */]) {\r\n                    exception[_DYN_EXCEPTION /* @min:%2eexception */] = exception[_DYN_ERROR /* @min:%2eerror */];\r\n                }\r\n                try {\r\n                    _self[_DYN_SEND_EXCEPTION_INTER13 /* @min:%2esendExceptionInternal */](exception, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 35 /* _eInternalMessageId.TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Custom error handler for Application Insights Analytics\r\n             * @param {IAutoExceptionTelemetry} exception\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self[_DYN__ONERROR /* @min:%2e_onerror */] = function (exception) {\r\n                var error = exception && exception[_DYN_ERROR /* @min:%2eerror */];\r\n                var evt = exception && exception.evt;\r\n                try {\r\n                    if (!evt) {\r\n                        var _window = getWindow();\r\n                        if (_window) {\r\n                            evt = _window[strEvent];\r\n                        }\r\n                    }\r\n                    var url = (exception && exception.url) || (getDocument() || {}).URL;\r\n                    // If no error source is provided assume the default window.onerror handler\r\n                    var errorSrc = exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] || \"window.onerror@\" + url + \":\" + (exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0) + \":\" + (exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0);\r\n                    var properties = {\r\n                        errorSrc: errorSrc,\r\n                        url: url,\r\n                        lineNumber: exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0,\r\n                        columnNumber: exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0,\r\n                        message: exception[_DYN_MESSAGE /* @min:%2emessage */]\r\n                    };\r\n                    if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[_DYN_ERROR /* @min:%2eerror */])) {\r\n                        _sendCORSException(Exception[_DYN__CREATE_AUTO_EXCEPTI14 /* @min:%2eCreateAutoException */](\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0, exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0, error, evt, null, errorSrc), properties);\r\n                    }\r\n                    else {\r\n                        if (!exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */]) {\r\n                            exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] = errorSrc;\r\n                        }\r\n                        _self.trackException({ exception: exception, severityLevel: 3 /* eSeverityLevel.Error */ }, properties);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    var errorString = error ? (error.name + \", \" + error[_DYN_MESSAGE /* @min:%2emessage */]) : \"null\";\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 11 /* _eInternalMessageId.ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \"\r\n                        + getExceptionName(e), { exception: dumpObj(e), errorString: errorString });\r\n                }\r\n            };\r\n            _self[_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */] = function (telemetryInitializer) {\r\n                if (_self[_DYN_CORE /* @min:%2ecore */]) {\r\n                    // Just add to the core\r\n                    return _self[_DYN_CORE /* @min:%2ecore */][_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */](telemetryInitializer);\r\n                }\r\n                // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\r\n                if (!_preInitTelemetryInitializers) {\r\n                    _preInitTelemetryInitializers = [];\r\n                }\r\n                _preInitTelemetryInitializers.push(telemetryInitializer);\r\n            };\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (_self.isInitialized()) {\r\n                    return;\r\n                }\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                try {\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                    if (_preInitTelemetryInitializers) {\r\n                        arrForEach(_preInitTelemetryInitializers, function (initializer) {\r\n                            core[_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */](initializer);\r\n                        });\r\n                        _preInitTelemetryInitializers = null;\r\n                    }\r\n                    var extConfig = _populateDefaults(config);\r\n                    _updateStorageUsage(extConfig);\r\n                    _pageViewPerformanceManager = new PageViewPerformanceManager(_self[_DYN_CORE /* @min:%2ecore */]);\r\n                    _pageViewManager = new PageViewManager(_this, extConfig[_DYN_OVERRIDE_PAGE_VIEW_D2 /* @min:%2eoverridePageViewDuration */], _self[_DYN_CORE /* @min:%2ecore */], _pageViewPerformanceManager);\r\n                    _pageVisitTimeManager = new PageVisitTimeManager(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), function (pageName, pageUrl, pageVisitTime) { return trackPageVisitTime(pageName, pageUrl, pageVisitTime); });\r\n                    _updateBrowserLinkTracking(extConfig, config);\r\n                    _eventTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackEvent\");\r\n                    _eventTracking.action =\r\n                        function (name, url, duration, properties, measurements) {\r\n                            if (!properties) {\r\n                                properties = {};\r\n                            }\r\n                            if (!measurements) {\r\n                                measurements = {};\r\n                            }\r\n                            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                            _self.trackEvent({ name: name, properties: properties, measurements: measurements });\r\n                        };\r\n                    // initialize page view timing\r\n                    _pageTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackPageView\");\r\n                    _pageTracking.action = function (name, url, duration, properties, measurements) {\r\n                        // duration must be a custom property in order for the collector to extract it\r\n                        if (isNullOrUndefined(properties)) {\r\n                            properties = {};\r\n                        }\r\n                        properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                        var pageViewItem = {\r\n                            name: name,\r\n                            uri: url,\r\n                            properties: properties,\r\n                            measurements: measurements\r\n                        };\r\n                        _self[_DYN_SEND_PAGE_VIEW_INTER10 /* @min:%2esendPageViewInternal */](pageViewItem, properties);\r\n                    };\r\n                    if (hasWindow()) {\r\n                        _updateExceptionTracking(extConfig);\r\n                        _updateLocationChange(extConfig);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // resetting the initialized state because of failure\r\n                    _self.setInitialized(false);\r\n                    throw e;\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\r\n                // Just register to remove all events associated with this namespace\r\n                eventOff(window, null, null, _evtNamespace);\r\n                _initDefaults();\r\n            };\r\n            function _populateDefaults(config) {\r\n                var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\r\n                var identifier = _self.identifier;\r\n                // load default values if specified\r\n                var defaults = _getDefaultConfig(config);\r\n                var extConfig = _self.config = ctx.getExtCfg(identifier);\r\n                if (defaults !== undefined) {\r\n                    objForEachKey(defaults, function (field, value) {\r\n                        // for each unspecified field, set the default value\r\n                        extConfig[field] = ctx.getConfig(identifier, field, value);\r\n                        if (extConfig[field] === undefined) {\r\n                            extConfig = value;\r\n                        }\r\n                    });\r\n                }\r\n                return extConfig;\r\n            }\r\n            function _updateBrowserLinkTracking(extConfig, config) {\r\n                _isBrowserLinkTrackingEnabled = extConfig[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */] || config[_DYN_IS_BROWSER_LINK_TRAC5 /* @min:%2eisBrowserLinkTrackingEnabled */];\r\n                _addDefaultTelemetryInitializers();\r\n            }\r\n            /**\r\n             * Log a page visit time\r\n             * @param    pageName    Name of page\r\n             * @param    pageVisitDuration Duration of visit to the page in milleseconds\r\n             */\r\n            function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\r\n                var properties = { PageName: pageName, PageUrl: pageUrl };\r\n                _self.trackMetric({\r\n                    name: \"PageVisitTime\",\r\n                    average: pageVisitTime,\r\n                    max: pageVisitTime,\r\n                    min: pageVisitTime,\r\n                    sampleCount: 1\r\n                }, properties);\r\n            }\r\n            function _addDefaultTelemetryInitializers() {\r\n                if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\r\n                    var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\r\n                    var dropBrowserLinkRequests = function (envelope) {\r\n                        if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n                            var remoteData = envelope.baseData;\r\n                            if (remoteData) {\r\n                                for (var i = 0; i < browserLinkPaths_1[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                                    if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    };\r\n                    _self[_DYN_ADD_TELEMETRY_INITIA15 /* @min:%2eaddTelemetryInitializer */](dropBrowserLinkRequests);\r\n                    _browserLinkInitializerAdded = true;\r\n                }\r\n            }\r\n            function _sendCORSException(exception, properties) {\r\n                var telemetryItem = createTelemetryItem(exception, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            }\r\n            function _updateExceptionTracking(extConfig) {\r\n                var _window = getWindow();\r\n                var locn = getLocation(true);\r\n                _disableExceptionTracking = extConfig[_DYN_DISABLE_EXCEPTION_TR0 /* @min:%2edisableExceptionTracking */];\r\n                if (!_disableExceptionTracking && !_autoExceptionInstrumented && !extConfig.autoExceptionInstrumented) {\r\n                    // We want to enable exception auto collection and it has not been done so yet\r\n                    _addHook(InstrumentEvent(_window, \"onerror\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function (callDetails, message, url, lineNumber, columnNumber, error) {\r\n                            if (!_disableExceptionTracking && callDetails.rslt !== true) {\r\n                                _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI14 /* @min:%2eCreateAutoException */](message, url, lineNumber, columnNumber, error, callDetails.evt));\r\n                            }\r\n                        }\r\n                    }, false));\r\n                    _autoExceptionInstrumented = true;\r\n                }\r\n                _addUnhandledPromiseRejectionTracking(extConfig, _window, locn);\r\n            }\r\n            function _updateLocationChange(extConfig) {\r\n                var win = getWindow();\r\n                var locn = getLocation(true);\r\n                _enableAutoRouteTracking = extConfig[_DYN_ENABLE_AUTO_ROUTE_TR6 /* @min:%2eenableAutoRouteTracking */] === true;\r\n                /**\r\n                 * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n                 */\r\n                if (win && _enableAutoRouteTracking && hasHistory()) {\r\n                    var _history = getHistory();\r\n                    if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\r\n                        _addHistoryListener(extConfig, win, _history, locn);\r\n                    }\r\n                }\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                if (!distributedTraceCtx) {\r\n                    // Fallback when using an older Core and PropertiesPlugin\r\n                    var properties = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                    if (properties) {\r\n                        var context = properties.plugin.context;\r\n                        if (context) {\r\n                            distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);\r\n                        }\r\n                    }\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            /**\r\n             * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n             */\r\n            function _addHistoryListener(extConfig, win, history, locn) {\r\n                var namePrefix = extConfig[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\";\r\n                function _popstateHandler() {\r\n                    if (_enableAutoRouteTracking) {\r\n                        _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                    }\r\n                }\r\n                function _locationChangeHandler() {\r\n                    // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\r\n                    if (_currUri) {\r\n                        _prevUri = _currUri;\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    else {\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    if (_enableAutoRouteTracking) {\r\n                        var distributedTraceCtx = _getDistributedTraceCtx();\r\n                        if (distributedTraceCtx) {\r\n                            distributedTraceCtx.setTraceId(generateW3CId());\r\n                            var traceLocationName = \"_unknown_\";\r\n                            if (locn && locn.pathname) {\r\n                                traceLocationName = locn.pathname + (locn.hash || \"\");\r\n                            }\r\n                            // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\r\n                            distributedTraceCtx.setName(dataSanitizeString(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), traceLocationName));\r\n                        }\r\n                        setTimeout((function (uri) {\r\n                            // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */]({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                        }).bind(this, _prevUri), _self.autoRoutePVDelay);\r\n                    }\r\n                }\r\n                if (!_historyListenerAdded) {\r\n                    _addHook(InstrumentEvent(history, \"pushState\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function () {\r\n                            if (_enableAutoRouteTracking) {\r\n                                _dispatchEvent(win, createDomEvent(namePrefix + \"pushState\"));\r\n                                _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                            }\r\n                        }\r\n                    }, true));\r\n                    _addHook(InstrumentEvent(history, \"replaceState\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function () {\r\n                            if (_enableAutoRouteTracking) {\r\n                                _dispatchEvent(win, createDomEvent(namePrefix + \"replaceState\"));\r\n                                _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                            }\r\n                        }\r\n                    }, true));\r\n                    eventOn(win, namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\r\n                    eventOn(win, namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\r\n                    _historyListenerAdded = true;\r\n                }\r\n            }\r\n            function _addUnhandledPromiseRejectionTracking(extConfig, _window, _location) {\r\n                _enableUnhandledPromiseRejectionTracking = extConfig[_DYN_ENABLE_UNHANDLED_PRO3 /* @min:%2eenableUnhandledPromiseRejectionTracking */] === true;\r\n                if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\r\n                    // We want to enable exception auto collection and it has not been done so yet\r\n                    _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\r\n                        ns: _evtNamespace,\r\n                        rsp: function (callDetails, error) {\r\n                            if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) { // handled could be typeof function\r\n                                _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI14 /* @min:%2eCreateAutoException */](_getReason(error), _location ? _location[_DYN_HREF /* @min:%2ehref */] : \"\", 0, 0, error, callDetails.evt));\r\n                            }\r\n                        }\r\n                    }, false));\r\n                    _autoUnhandledPromiseInstrumented = true;\r\n                    extConfig.autoUnhandledPromiseInstrumented = _autoUnhandledPromiseInstrumented;\r\n                }\r\n            }\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity {eLoggingSeverity} - The severity of the log message\r\n             * @param message {_InternalLogMessage} - The log message.\r\n             */\r\n            function _throwInternal(severity, msgId, msg, properties, isUserAct) {\r\n                _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]().throwInternal(severity, msgId, msg, properties, isUserAct);\r\n            }\r\n            function _initDefaults() {\r\n                _eventTracking = null;\r\n                _pageTracking = null;\r\n                _pageViewManager = null;\r\n                _pageViewPerformanceManager = null;\r\n                _pageVisitTimeManager = null;\r\n                _preInitTelemetryInitializers = null;\r\n                _isBrowserLinkTrackingEnabled = false;\r\n                _browserLinkInitializerAdded = false;\r\n                _enableAutoRouteTracking = false;\r\n                _historyListenerAdded = false;\r\n                _disableExceptionTracking = false;\r\n                _autoExceptionInstrumented = false;\r\n                _enableUnhandledPromiseRejectionTracking = false;\r\n                _autoUnhandledPromiseInstrumented = false;\r\n                // Counts number of trackAjax invocations.\r\n                // By default we only monitor X ajax call per view to avoid too much load.\r\n                // Default value is set in config.\r\n                // This counter keeps increasing even after the limit is reached.\r\n                _trackAjaxAttempts = 0;\r\n                // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n                var location = getLocation(true);\r\n                _prevUri = location && location[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                _currUri = null;\r\n                _evtNamespace = null;\r\n            }\r\n            // For backward compatibility\r\n            objDefineAccessors(_self, \"_pageViewManager\", function () { return _pageViewManager; });\r\n            objDefineAccessors(_self, \"_pageViewPerformanceManager\", function () { return _pageViewPerformanceManager; });\r\n            objDefineAccessors(_self, \"_pageVisitTimeManager\", function () { return _pageVisitTimeManager; });\r\n            objDefineAccessors(_self, \"_evtNamespace\", function () { return \".\" + _evtNamespace; });\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AnalyticsPlugin.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n     * @param   name    A string that identifies this event uniquely within the document.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param {ITraceTelemetry} trace\r\n     * @param ICustomProperties.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n     * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView Page view item to be sent\r\n     * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance\r\n     * @param properties\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance\r\n     * @param customProperties\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackPage = function (name, url, properties, measurement) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception\r\n    * @param properties\r\n    * @param systemProperties\r\n    */\r\n    AnalyticsPlugin.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.Version = '2.8.12'; // Not currently used anywhere\r\n    AnalyticsPlugin.getDefaultConfig = _getDefaultConfig;\r\n    return AnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { AnalyticsPlugin };\r\n//# sourceMappingURL=AnalyticsPlugin.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}