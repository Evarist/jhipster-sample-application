{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { _DYN_ADD_NOTIFICATION_LIS1, _DYN_IS_ASYNC, _DYN_IS_CHILD_EVT, _DYN_LISTENERS, _DYN_PUSH, _DYN_REMOVE_NOTIFICATION_2, _DYN_SPLICE } from \"../__DynamicConstants\";\nimport { arrForEach, arrIndexOf } from \"./HelperFuncs\";\nimport { STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_EVENTS_SENT, STR_PERF_EVENT } from \"./InternalConstants\";\nfunction _runListeners(listeners, name, isAsync, callback) {\n  arrForEach(listeners, function (listener) {\n    if (listener && listener[name]) {\n      if (isAsync) {\n        setTimeout(function () {\n          return callback(listener);\n        }, 0);\n      } else {\n        try {\n          callback(listener);\n        } catch (e) {\n          // Catch errors to ensure we don't block sending the requests\n        }\n      }\n    }\n  });\n}\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\nvar NotificationManager = /** @class */function () {\n  function NotificationManager(config) {\n    this.listeners = [];\n    var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;\n    dynamicProto(NotificationManager, this, function (_self) {\n      _self[_DYN_ADD_NOTIFICATION_LIS1 /* @min:%2eaddNotificationListener */] = function (listener) {\n        _self.listeners[_DYN_PUSH /* @min:%2epush */](listener);\n      };\n      /**\r\n       * Removes all instances of the listener.\r\n       * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n       */\n      _self[_DYN_REMOVE_NOTIFICATION_2 /* @min:%2eremoveNotificationListener */] = function (listener) {\n        var index = arrIndexOf(_self[_DYN_LISTENERS /* @min:%2elisteners */], listener);\n        while (index > -1) {\n          _self.listeners[_DYN_SPLICE /* @min:%2esplice */](index, 1);\n          index = arrIndexOf(_self[_DYN_LISTENERS /* @min:%2elisteners */], listener);\n        }\n      };\n      /**\r\n       * Notification for events sent.\r\n       * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n       */\n      _self[STR_EVENTS_SENT /* @min:%2eeventsSent */] = function (events) {\n        _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_SENT, true, function (listener) {\n          listener[STR_EVENTS_SENT /* @min:%2eeventsSent */](events);\n        });\n      };\n      /**\r\n       * Notification for events being discarded.\r\n       * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n       * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n       * constant should be used to check the different values.\r\n       */\n      _self[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */] = function (events, reason) {\n        _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_DISCARDED, true, function (listener) {\n          listener[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */](events, reason);\n        });\n      };\n      /**\r\n       * [Optional] A function called when the events have been requested to be sent to the sever.\r\n       * @param {number} sendReason - The reason why the event batch is being sent.\r\n       * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n       */\n      _self[STR_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */] = function (sendReason, isAsync) {\n        _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_SEND_REQUEST, isAsync, function (listener) {\n          listener[STR_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */](sendReason, isAsync);\n        });\n      };\n      _self[STR_PERF_EVENT /* @min:%2eperfEvent */] = function (perfEvent) {\n        if (perfEvent) {\n          // Send all events or only parent events\n          if (perfEvtsSendAll || !perfEvent[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */]()) {\n            _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_PERF_EVENT, false, function (listener) {\n              if (perfEvent[_DYN_IS_ASYNC /* @min:%2eisAsync */]) {\n                setTimeout(function () {\n                  return listener[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent);\n                }, 0);\n              } else {\n                listener[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent);\n              }\n            });\n          }\n        }\n      };\n    });\n  }\n  // Removed Stub for NotificationManager.prototype.addNotificationListener.\n  // Removed Stub for NotificationManager.prototype.removeNotificationListener.\n  // Removed Stub for NotificationManager.prototype.eventsSent.\n  // Removed Stub for NotificationManager.prototype.eventsDiscarded.\n  // Removed Stub for NotificationManager.prototype.eventsSendRequest.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  NotificationManager.__ieDyn = 1;\n  return NotificationManager;\n}();\nexport { NotificationManager };","map":{"version":3,"names":["dynamicProto","_DYN_ADD_NOTIFICATION_LIS1","_DYN_IS_ASYNC","_DYN_IS_CHILD_EVT","_DYN_LISTENERS","_DYN_PUSH","_DYN_REMOVE_NOTIFICATION_2","_DYN_SPLICE","arrForEach","arrIndexOf","STR_EVENTS_DISCARDED","STR_EVENTS_SEND_REQUEST","STR_EVENTS_SENT","STR_PERF_EVENT","_runListeners","listeners","name","isAsync","callback","listener","setTimeout","e","NotificationManager","config","perfEvtsSendAll","_self","index","events","reason","sendReason","perfEvent"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _DYN_ADD_NOTIFICATION_LIS1, _DYN_IS_ASYNC, _DYN_IS_CHILD_EVT, _DYN_LISTENERS, _DYN_PUSH, _DYN_REMOVE_NOTIFICATION_2, _DYN_SPLICE } from \"../__DynamicConstants\";\r\nimport { arrForEach, arrIndexOf } from \"./HelperFuncs\";\r\nimport { STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_EVENTS_SENT, STR_PERF_EVENT } from \"./InternalConstants\";\r\nfunction _runListeners(listeners, name, isAsync, callback) {\r\n    arrForEach(listeners, function (listener) {\r\n        if (listener && listener[name]) {\r\n            if (isAsync) {\r\n                setTimeout(function () { return callback(listener); }, 0);\r\n            }\r\n            else {\r\n                try {\r\n                    callback(listener);\r\n                }\r\n                catch (e) {\r\n                    // Catch errors to ensure we don't block sending the requests\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar NotificationManager = /** @class */ (function () {\r\n    function NotificationManager(config) {\r\n        this.listeners = [];\r\n        var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;\r\n        dynamicProto(NotificationManager, this, function (_self) {\r\n            _self[_DYN_ADD_NOTIFICATION_LIS1 /* @min:%2eaddNotificationListener */] = function (listener) {\r\n                _self.listeners[_DYN_PUSH /* @min:%2epush */](listener);\r\n            };\r\n            /**\r\n             * Removes all instances of the listener.\r\n             * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n             */\r\n            _self[_DYN_REMOVE_NOTIFICATION_2 /* @min:%2eremoveNotificationListener */] = function (listener) {\r\n                var index = arrIndexOf(_self[_DYN_LISTENERS /* @min:%2elisteners */], listener);\r\n                while (index > -1) {\r\n                    _self.listeners[_DYN_SPLICE /* @min:%2esplice */](index, 1);\r\n                    index = arrIndexOf(_self[_DYN_LISTENERS /* @min:%2elisteners */], listener);\r\n                }\r\n            };\r\n            /**\r\n             * Notification for events sent.\r\n             * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n             */\r\n            _self[STR_EVENTS_SENT /* @min:%2eeventsSent */] = function (events) {\r\n                _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_SENT, true, function (listener) {\r\n                    listener[STR_EVENTS_SENT /* @min:%2eeventsSent */](events);\r\n                });\r\n            };\r\n            /**\r\n             * Notification for events being discarded.\r\n             * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n             * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n             * constant should be used to check the different values.\r\n             */\r\n            _self[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */] = function (events, reason) {\r\n                _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_DISCARDED, true, function (listener) {\r\n                    listener[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */](events, reason);\r\n                });\r\n            };\r\n            /**\r\n             * [Optional] A function called when the events have been requested to be sent to the sever.\r\n             * @param {number} sendReason - The reason why the event batch is being sent.\r\n             * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n             */\r\n            _self[STR_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */] = function (sendReason, isAsync) {\r\n                _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_SEND_REQUEST, isAsync, function (listener) {\r\n                    listener[STR_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */](sendReason, isAsync);\r\n                });\r\n            };\r\n            _self[STR_PERF_EVENT /* @min:%2eperfEvent */] = function (perfEvent) {\r\n                if (perfEvent) {\r\n                    // Send all events or only parent events\r\n                    if (perfEvtsSendAll || !perfEvent[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */]()) {\r\n                        _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_PERF_EVENT, false, function (listener) {\r\n                            if (perfEvent[_DYN_IS_ASYNC /* @min:%2eisAsync */]) {\r\n                                setTimeout(function () { return listener[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent); }, 0);\r\n                            }\r\n                            else {\r\n                                listener[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    NotificationManager.prototype.addNotificationListener = function (listener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    NotificationManager.prototype.removeNotificationListener = function (listener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    NotificationManager.prototype.eventsSent = function (events) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    NotificationManager.prototype.eventsDiscarded = function (events, reason) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * [Optional] A function called when the events have been requested to be sent to the sever.\r\n     * @param {number} sendReason - The reason why the event batch is being sent.\r\n     * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n     */\r\n    NotificationManager.prototype.eventsSendRequest = function (sendReason, isAsync) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return NotificationManager;\r\n}());\r\nexport { NotificationManager };\r\n//# sourceMappingURL=NotificationManager.js.map"],"mappings":";;;;;AAEA,OAAAA,YAAA;AACA,SAAAC,0BAAA,EAAAC,aAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,SAAA,EAAAC,0BAAA,EAAAC,WAAA;AACA,SAAAC,UAAA,EAAAC,UAAA;AACA,SAAAC,oBAAA,EAAAC,uBAAA,EAAAC,eAAA,EAAAC,cAAA;AACA,SAAAC,cAAAC,SAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,QAAA;EACAV,UAAA,CAAAO,SAAA,YAAAI,QAAA;IACA,IAAAA,QAAA,IAAAA,QAAA,CAAAH,IAAA;MACA,IAAAC,OAAA;QACAG,UAAA;UAAA,OAAAF,QAAA,CAAAC,QAAA;QAAA;MACA,OACA;QACA;UACAD,QAAA,CAAAC,QAAA;QACA,EACA,OAAAE,CAAA;UACA;QAAA;MAEA;IACA;EACA;AACA;AACA;AACA;AACA;AACA,IAAAC,mBAAA;EACA,SAAAA,oBAAAC,MAAA;IACA,KAAAR,SAAA;IACA,IAAAS,eAAA,MAAAD,MAAA,QAAAC,eAAA;IACAxB,YAAA,CAAAsB,mBAAA,kBAAAG,KAAA;MACAA,KAAA,CAAAxB,0BAAA,oDAAAkB,QAAA;QACAM,KAAA,CAAAV,SAAA,CAAAV,SAAA,qBAAAc,QAAA;MACA;MACA;AACA;AACA;AACA;MACAM,KAAA,CAAAnB,0BAAA,uDAAAa,QAAA;QACA,IAAAO,KAAA,GAAAjB,UAAA,CAAAgB,KAAA,CAAArB,cAAA,2BAAAe,QAAA;QACA,OAAAO,KAAA;UACAD,KAAA,CAAAV,SAAA,CAAAR,WAAA,uBAAAmB,KAAA;UACAA,KAAA,GAAAjB,UAAA,CAAAgB,KAAA,CAAArB,cAAA,2BAAAe,QAAA;QACA;MACA;MACA;AACA;AACA;AACA;MACAM,KAAA,CAAAb,eAAA,uCAAAe,MAAA;QACAb,aAAA,CAAAW,KAAA,CAAArB,cAAA,2BAAAQ,eAAA,kBAAAO,QAAA;UACAA,QAAA,CAAAP,eAAA,2BAAAe,MAAA;QACA;MACA;MACA;AACA;AACA;AACA;AACA;AACA;MACAF,KAAA,CAAAf,oBAAA,4CAAAiB,MAAA,EAAAC,MAAA;QACAd,aAAA,CAAAW,KAAA,CAAArB,cAAA,2BAAAM,oBAAA,kBAAAS,QAAA;UACAA,QAAA,CAAAT,oBAAA,gCAAAiB,MAAA,EAAAC,MAAA;QACA;MACA;MACA;AACA;AACA;AACA;AACA;MACAH,KAAA,CAAAd,uBAAA,8CAAAkB,UAAA,EAAAZ,OAAA;QACAH,aAAA,CAAAW,KAAA,CAAArB,cAAA,2BAAAO,uBAAA,EAAAM,OAAA,YAAAE,QAAA;UACAA,QAAA,CAAAR,uBAAA,kCAAAkB,UAAA,EAAAZ,OAAA;QACA;MACA;MACAQ,KAAA,CAAAZ,cAAA,sCAAAiB,SAAA;QACA,IAAAA,SAAA;UACA;UACA,IAAAN,eAAA,KAAAM,SAAA,CAAA3B,iBAAA;YACAW,aAAA,CAAAW,KAAA,CAAArB,cAAA,2BAAAS,cAAA,mBAAAM,QAAA;cACA,IAAAW,SAAA,CAAA5B,aAAA;gBACAkB,UAAA;kBAAA,OAAAD,QAAA,CAAAN,cAAA,0BAAAiB,SAAA;gBAAA;cACA,OACA;gBACAX,QAAA,CAAAN,cAAA,0BAAAiB,SAAA;cACA;YACA;UACA;QACA;MACA;IACA;EACA;EACA;;;;;;;;;;AAuCA;AACA,SAAAR,mBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}