{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { _throwInternal, arrForEach, arrIndexOf, isNotNullOrUndefined, isNullOrUndefined, randomValue, safeGetLogger, strTrim } from \"@microsoft/applicationinsights-core-js\";\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"./StorageHelperFuncs\";\nimport { _DYN_COUNT, _DYN_DATE, _DYN_DAYS_OF_MONTH, _DYN_DISABLED, _DYN_GET_UTCDATE, _DYN_INTERVAL, _DYN_LENGTH, _DYN_MESSAGE, _DYN_PRE_TRIGGER_DATE, _DYN_STRINGIFY } from \"./__DynamicConstants\";\nvar THROTTLE_STORAGE_PREFIX = \"appInsightsThrottle\";\nvar ThrottleMgr = /** @class */function () {\n  function ThrottleMgr(throttleMgr, core, namePrefix) {\n    var _self = this;\n    var _canUseLocalStorage;\n    var _logger;\n    var _config;\n    var _localStorageName;\n    var _localStorageObj;\n    var _isTriggered; //_isTriggered is to make sure that we only trigger throttle once a day\n    var _namePrefix;\n    var _queue;\n    var _isReady = false;\n    var _isSpecificDaysGiven = false;\n    _initConfig();\n    _self.getConfig = function () {\n      return _config;\n    };\n    /**\r\n     * Check if it is the correct day to send message.\r\n     * If _isTriggered is true, even if canThrottle returns true, message will not be sent,\r\n     * because we only allow triggering sendMessage() once a day.\r\n     * @returns if the current date is the valid date to send message\r\n     */\n    _self.canThrottle = function () {\n      return _canThrottle(_config, _canUseLocalStorage, _localStorageObj);\n    };\n    /**\r\n     * Check if throttle is triggered on current day(UTC)\r\n     * if canThrottle returns false, isTriggered will return false\r\n     * @returns if throttle is triggered on current day(UTC)\r\n     */\n    _self.isTriggered = function () {\n      return _isTriggered;\n    };\n    /**\r\n     * Before isReady set to true, all message will be stored in queue.\r\n     * Message will only be sent out after isReady set to true.\r\n     * Initial and default value: false\r\n     * @returns isReady state\r\n     */\n    _self.isReady = function () {\n      return _isReady;\n    };\n    /**\r\n     * Flush all message in queue with isReady state set to true.\r\n     * @returns if message queue is flushed\r\n     */\n    _self.flush = function () {\n      try {\n        if (_isReady && _queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\n          arrForEach(_queue, function (item) {\n            _self.sendMessage(item.msgID, item[_DYN_MESSAGE /* @min:%2emessage */], item.severity);\n          });\n          return true;\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    };\n    /**\r\n     * Set isReady State\r\n     * if isReady set to true, message queue will be flushed automatically.\r\n     * @param isReady isReady State\r\n     * @returns if message queue is flushed\r\n     */\n    _self.onReadyState = function (isReady) {\n      _isReady = isNullOrUndefined(isReady) ? true : isReady;\n      return _self.flush();\n    };\n    _self.sendMessage = function (msgID, message, severity) {\n      if (_isReady) {\n        var isSampledIn = _canSampledIn();\n        if (!isSampledIn) {\n          return;\n        }\n        var canThrottle = _canThrottle(_config, _canUseLocalStorage, _localStorageObj);\n        var throttled = false;\n        var number = 0;\n        try {\n          if (canThrottle && !_isTriggered) {\n            number = Math.min(_config.limit.maxSendNumber, _localStorageObj[_DYN_COUNT /* @min:%2ecount */] + 1);\n            _localStorageObj[_DYN_COUNT /* @min:%2ecount */] = 0;\n            throttled = true;\n            _isTriggered = true;\n            _localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */] = new Date();\n          } else {\n            _isTriggered = canThrottle;\n            _localStorageObj[_DYN_COUNT /* @min:%2ecount */] += 1;\n          }\n          _resetLocalStorage(_logger, _localStorageName, _localStorageObj);\n          for (var i = 0; i < number; i++) {\n            _sendMessage(msgID, _logger, message, severity);\n          }\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n        return {\n          isThrottled: throttled,\n          throttleNum: number\n        };\n      } else {\n        _queue.push({\n          msgID: msgID,\n          message: message,\n          severity: severity\n        });\n      }\n      return null;\n    };\n    function _initConfig() {\n      var _a, _b;\n      _canUseLocalStorage = utlCanUseLocalStorage();\n      _logger = safeGetLogger(core);\n      _isTriggered = false;\n      _namePrefix = isNotNullOrUndefined(namePrefix) ? namePrefix : \"\";\n      _queue = [];\n      var configMgr = throttleMgr;\n      _config = {};\n      _config[_DYN_DISABLED /* @min:%2edisabled */] = !!configMgr[_DYN_DISABLED /* @min:%2edisabled */];\n      _config.msgKey = configMgr.msgKey;\n      var configInterval = configMgr[_DYN_INTERVAL /* @min:%2einterval */] || {};\n      _isSpecificDaysGiven = (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth) && (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth[_DYN_LENGTH /* @min:%2elength */]) > 0;\n      _config[_DYN_INTERVAL /* @min:%2einterval */] = _getIntervalConfig(configInterval);\n      var limit = {\n        samplingRate: ((_a = configMgr.limit) === null || _a === void 0 ? void 0 : _a.samplingRate) || 100,\n        // dafault: every time sent only 1 event\n        maxSendNumber: ((_b = configMgr.limit) === null || _b === void 0 ? void 0 : _b.maxSendNumber) || 1\n      };\n      _config.limit = limit;\n      _localStorageName = _getLocalStorageName(_config.msgKey, _namePrefix);\n      if (_canUseLocalStorage && _localStorageName) {\n        _localStorageObj = _getLocalStorageObj(utlGetLocalStorage(_logger, _localStorageName), _logger, _localStorageName);\n      }\n      if (_localStorageObj) {\n        _isTriggered = _isTriggeredOnCurDate(_localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]);\n      }\n    }\n\n    function _getIntervalConfig(interval) {\n      interval = interval || {};\n      var monthInterval = interval === null || interval === void 0 ? void 0 : interval.monthInterval;\n      var dayInterval = interval === null || interval === void 0 ? void 0 : interval.dayInterval;\n      // default: send data every 3 month each year\n      if (isNullOrUndefined(monthInterval) && isNullOrUndefined(dayInterval)) {\n        interval.monthInterval = 3;\n        if (!_isSpecificDaysGiven) {\n          // default: send data on 28th\n          interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */] = [28];\n          _isSpecificDaysGiven = true;\n        }\n      }\n      interval = {\n        // dafault: sent every three months\n        monthInterval: interval === null || interval === void 0 ? void 0 : interval.monthInterval,\n        dayInterval: interval === null || interval === void 0 ? void 0 : interval.dayInterval,\n        daysOfMonth: interval === null || interval === void 0 ? void 0 : interval.daysOfMonth\n      };\n      return interval;\n    }\n    function _canThrottle(config, canUseLocalStorage, localStorageObj) {\n      if (!config[_DYN_DISABLED /* @min:%2edisabled */] && canUseLocalStorage && isNotNullOrUndefined(localStorageObj)) {\n        var curDate = _getThrottleDate();\n        var date = localStorageObj[_DYN_DATE /* @min:%2edate */];\n        var interval = config[_DYN_INTERVAL /* @min:%2einterval */];\n        var monthCheck = 1;\n        if (interval === null || interval === void 0 ? void 0 : interval.monthInterval) {\n          var monthExpand = (curDate.getUTCFullYear() - date.getUTCFullYear()) * 12 + curDate.getUTCMonth() - date.getUTCMonth();\n          monthCheck = _checkInterval(interval.monthInterval, 0, monthExpand);\n        }\n        var dayCheck = 1;\n        if (_isSpecificDaysGiven) {\n          dayCheck = arrIndexOf(interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */], curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]());\n        } else if (interval === null || interval === void 0 ? void 0 : interval.dayInterval) {\n          var daySpan = Math.floor((curDate.getTime() - date.getTime()) / 86400000);\n          dayCheck = _checkInterval(interval.dayInterval, 0, daySpan);\n        }\n        return monthCheck >= 0 && dayCheck >= 0;\n      }\n      return false;\n    }\n    function _getLocalStorageName(msgKey, prefix) {\n      var fix = isNotNullOrUndefined(prefix) ? prefix : \"\";\n      if (msgKey) {\n        return THROTTLE_STORAGE_PREFIX + fix + \"-\" + msgKey;\n      }\n      return null;\n    }\n    // returns if throttle is triggered on current Date\n    function _isTriggeredOnCurDate(preTriggerDate) {\n      try {\n        if (preTriggerDate) {\n          var curDate = new Date();\n          return preTriggerDate.getUTCFullYear() === curDate.getUTCFullYear() && preTriggerDate.getUTCMonth() === curDate.getUTCMonth() && preTriggerDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]() === curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]();\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    }\n    // transfer local storage string value to object that identifies start date, current count and preTriggerDate\n    function _getLocalStorageObj(value, logger, storageName) {\n      try {\n        var storageObj = {\n          date: _getThrottleDate(),\n          count: 0\n        };\n        if (value) {\n          var obj = JSON.parse(value);\n          return {\n            date: _getThrottleDate(obj[_DYN_DATE /* @min:%2edate */]) || storageObj[_DYN_DATE /* @min:%2edate */],\n            count: obj[_DYN_COUNT /* @min:%2ecount */] || storageObj[_DYN_COUNT /* @min:%2ecount */],\n            preTriggerDate: obj.preTriggerDate ? _getThrottleDate(obj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]) : undefined\n          };\n        } else {\n          _resetLocalStorage(logger, storageName, storageObj);\n          return storageObj;\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return null;\n    }\n    // if datestr is not defined, current date will be returned\n    function _getThrottleDate(dateStr) {\n      // if new Date() can't be created through the provided dateStr, null will be returned.\n      try {\n        if (dateStr) {\n          var date = new Date(dateStr);\n          //make sure it is a valid Date Object\n          if (!isNaN(date.getDate())) {\n            return date;\n          }\n        } else {\n          return new Date();\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return null;\n    }\n    function _resetLocalStorage(logger, storageName, obj) {\n      try {\n        return utlSetLocalStorage(logger, storageName, strTrim(JSON[_DYN_STRINGIFY /* @min:%2estringify */](obj)));\n      } catch (e) {\n        //     // eslint-disable-next-line no-empty\n      }\n      return false;\n    }\n    function _checkInterval(interval, start, current) {\n      // count from start year\n      return current >= start && (current - start) % interval == 0 ? Math.floor((current - start) / interval) + 1 : -1;\n    }\n    function _sendMessage(msgID, logger, message, severity) {\n      _throwInternal(logger, severity || 1 /* eLoggingSeverity.CRITICAL */, msgID, message);\n    }\n    // NOTE: config.limit.samplingRate is set to 4 decimal places,\n    // so config.limit.samplingRate = 1 means 0.0001%\n    function _canSampledIn() {\n      return randomValue(1000000) <= _config.limit.samplingRate;\n    }\n  }\n  return ThrottleMgr;\n}();\nexport { ThrottleMgr };","map":{"version":3,"names":["_throwInternal","arrForEach","arrIndexOf","isNotNullOrUndefined","isNullOrUndefined","randomValue","safeGetLogger","strTrim","utlCanUseLocalStorage","utlGetLocalStorage","utlSetLocalStorage","_DYN_COUNT","_DYN_DATE","_DYN_DAYS_OF_MONTH","_DYN_DISABLED","_DYN_GET_UTCDATE","_DYN_INTERVAL","_DYN_LENGTH","_DYN_MESSAGE","_DYN_PRE_TRIGGER_DATE","_DYN_STRINGIFY","THROTTLE_STORAGE_PREFIX","ThrottleMgr","throttleMgr","core","namePrefix","_self","_canUseLocalStorage","_logger","_config","_localStorageName","_localStorageObj","_isTriggered","_namePrefix","_queue","_isReady","_isSpecificDaysGiven","_initConfig","getConfig","canThrottle","_canThrottle","isTriggered","isReady","flush","item","sendMessage","msgID","severity","err","onReadyState","message","isSampledIn","_canSampledIn","throttled","number","Math","min","limit","maxSendNumber","Date","_resetLocalStorage","i","_sendMessage","e","isThrottled","throttleNum","push","_a","_b","configMgr","msgKey","configInterval","daysOfMonth","_getIntervalConfig","samplingRate","_getLocalStorageName","_getLocalStorageObj","_isTriggeredOnCurDate","interval","monthInterval","dayInterval","config","canUseLocalStorage","localStorageObj","curDate","_getThrottleDate","date","monthCheck","monthExpand","getUTCFullYear","getUTCMonth","_checkInterval","dayCheck","daySpan","floor","getTime","prefix","fix","preTriggerDate","value","logger","storageName","storageObj","count","obj","JSON","parse","undefined","dateStr","isNaN","getDate","start","current"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-common/dist-esm/ThrottleMgr.js"],"sourcesContent":["import { _throwInternal, arrForEach, arrIndexOf, isNotNullOrUndefined, isNullOrUndefined, randomValue, safeGetLogger, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"./StorageHelperFuncs\";\r\nimport { _DYN_COUNT, _DYN_DATE, _DYN_DAYS_OF_MONTH, _DYN_DISABLED, _DYN_GET_UTCDATE, _DYN_INTERVAL, _DYN_LENGTH, _DYN_MESSAGE, _DYN_PRE_TRIGGER_DATE, _DYN_STRINGIFY } from \"./__DynamicConstants\";\r\nvar THROTTLE_STORAGE_PREFIX = \"appInsightsThrottle\";\r\nvar ThrottleMgr = /** @class */ (function () {\r\n    function ThrottleMgr(throttleMgr, core, namePrefix) {\r\n        var _self = this;\r\n        var _canUseLocalStorage;\r\n        var _logger;\r\n        var _config;\r\n        var _localStorageName;\r\n        var _localStorageObj;\r\n        var _isTriggered; //_isTriggered is to make sure that we only trigger throttle once a day\r\n        var _namePrefix;\r\n        var _queue;\r\n        var _isReady = false;\r\n        var _isSpecificDaysGiven = false;\r\n        _initConfig();\r\n        _self.getConfig = function () {\r\n            return _config;\r\n        };\r\n        /**\r\n         * Check if it is the correct day to send message.\r\n         * If _isTriggered is true, even if canThrottle returns true, message will not be sent,\r\n         * because we only allow triggering sendMessage() once a day.\r\n         * @returns if the current date is the valid date to send message\r\n         */\r\n        _self.canThrottle = function () {\r\n            return _canThrottle(_config, _canUseLocalStorage, _localStorageObj);\r\n        };\r\n        /**\r\n         * Check if throttle is triggered on current day(UTC)\r\n         * if canThrottle returns false, isTriggered will return false\r\n         * @returns if throttle is triggered on current day(UTC)\r\n         */\r\n        _self.isTriggered = function () {\r\n            return _isTriggered;\r\n        };\r\n        /**\r\n         * Before isReady set to true, all message will be stored in queue.\r\n         * Message will only be sent out after isReady set to true.\r\n         * Initial and default value: false\r\n         * @returns isReady state\r\n         */\r\n        _self.isReady = function () {\r\n            return _isReady;\r\n        };\r\n        /**\r\n         * Flush all message in queue with isReady state set to true.\r\n         * @returns if message queue is flushed\r\n         */\r\n        _self.flush = function () {\r\n            try {\r\n                if (_isReady && _queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    arrForEach(_queue, function (item) {\r\n                        _self.sendMessage(item.msgID, item[_DYN_MESSAGE /* @min:%2emessage */], item.severity);\r\n                    });\r\n                    return true;\r\n                }\r\n            }\r\n            catch (err) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Set isReady State\r\n         * if isReady set to true, message queue will be flushed automatically.\r\n         * @param isReady isReady State\r\n         * @returns if message queue is flushed\r\n         */\r\n        _self.onReadyState = function (isReady) {\r\n            _isReady = isNullOrUndefined(isReady) ? true : isReady;\r\n            return _self.flush();\r\n        };\r\n        _self.sendMessage = function (msgID, message, severity) {\r\n            if (_isReady) {\r\n                var isSampledIn = _canSampledIn();\r\n                if (!isSampledIn) {\r\n                    return;\r\n                }\r\n                var canThrottle = _canThrottle(_config, _canUseLocalStorage, _localStorageObj);\r\n                var throttled = false;\r\n                var number = 0;\r\n                try {\r\n                    if (canThrottle && !_isTriggered) {\r\n                        number = Math.min(_config.limit.maxSendNumber, _localStorageObj[_DYN_COUNT /* @min:%2ecount */] + 1);\r\n                        _localStorageObj[_DYN_COUNT /* @min:%2ecount */] = 0;\r\n                        throttled = true;\r\n                        _isTriggered = true;\r\n                        _localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */] = new Date();\r\n                    }\r\n                    else {\r\n                        _isTriggered = canThrottle;\r\n                        _localStorageObj[_DYN_COUNT /* @min:%2ecount */] += 1;\r\n                    }\r\n                    _resetLocalStorage(_logger, _localStorageName, _localStorageObj);\r\n                    for (var i = 0; i < number; i++) {\r\n                        _sendMessage(msgID, _logger, message, severity);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return {\r\n                    isThrottled: throttled,\r\n                    throttleNum: number\r\n                };\r\n            }\r\n            else {\r\n                _queue.push({\r\n                    msgID: msgID,\r\n                    message: message,\r\n                    severity: severity\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n        function _initConfig() {\r\n            var _a, _b;\r\n            _canUseLocalStorage = utlCanUseLocalStorage();\r\n            _logger = safeGetLogger(core);\r\n            _isTriggered = false;\r\n            _namePrefix = isNotNullOrUndefined(namePrefix) ? namePrefix : \"\";\r\n            _queue = [];\r\n            var configMgr = throttleMgr;\r\n            _config = {};\r\n            _config[_DYN_DISABLED /* @min:%2edisabled */] = !!configMgr[_DYN_DISABLED /* @min:%2edisabled */];\r\n            _config.msgKey = configMgr.msgKey;\r\n            var configInterval = configMgr[_DYN_INTERVAL /* @min:%2einterval */] || {};\r\n            _isSpecificDaysGiven = (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth) && (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth[_DYN_LENGTH /* @min:%2elength */]) > 0;\r\n            _config[_DYN_INTERVAL /* @min:%2einterval */] = _getIntervalConfig(configInterval);\r\n            var limit = {\r\n                samplingRate: ((_a = configMgr.limit) === null || _a === void 0 ? void 0 : _a.samplingRate) || 100,\r\n                // dafault: every time sent only 1 event\r\n                maxSendNumber: ((_b = configMgr.limit) === null || _b === void 0 ? void 0 : _b.maxSendNumber) || 1\r\n            };\r\n            _config.limit = limit;\r\n            _localStorageName = _getLocalStorageName(_config.msgKey, _namePrefix);\r\n            if (_canUseLocalStorage && _localStorageName) {\r\n                _localStorageObj = _getLocalStorageObj(utlGetLocalStorage(_logger, _localStorageName), _logger, _localStorageName);\r\n            }\r\n            if (_localStorageObj) {\r\n                _isTriggered = _isTriggeredOnCurDate(_localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]);\r\n            }\r\n        }\r\n        function _getIntervalConfig(interval) {\r\n            interval = interval || {};\r\n            var monthInterval = interval === null || interval === void 0 ? void 0 : interval.monthInterval;\r\n            var dayInterval = interval === null || interval === void 0 ? void 0 : interval.dayInterval;\r\n            // default: send data every 3 month each year\r\n            if (isNullOrUndefined(monthInterval) && isNullOrUndefined(dayInterval)) {\r\n                interval.monthInterval = 3;\r\n                if (!_isSpecificDaysGiven) {\r\n                    // default: send data on 28th\r\n                    interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */] = [28];\r\n                    _isSpecificDaysGiven = true;\r\n                }\r\n            }\r\n            interval = {\r\n                // dafault: sent every three months\r\n                monthInterval: interval === null || interval === void 0 ? void 0 : interval.monthInterval,\r\n                dayInterval: interval === null || interval === void 0 ? void 0 : interval.dayInterval,\r\n                daysOfMonth: interval === null || interval === void 0 ? void 0 : interval.daysOfMonth\r\n            };\r\n            return interval;\r\n        }\r\n        function _canThrottle(config, canUseLocalStorage, localStorageObj) {\r\n            if (!config[_DYN_DISABLED /* @min:%2edisabled */] && canUseLocalStorage && isNotNullOrUndefined(localStorageObj)) {\r\n                var curDate = _getThrottleDate();\r\n                var date = localStorageObj[_DYN_DATE /* @min:%2edate */];\r\n                var interval = config[_DYN_INTERVAL /* @min:%2einterval */];\r\n                var monthCheck = 1;\r\n                if (interval === null || interval === void 0 ? void 0 : interval.monthInterval) {\r\n                    var monthExpand = (curDate.getUTCFullYear() - date.getUTCFullYear()) * 12 + curDate.getUTCMonth() - date.getUTCMonth();\r\n                    monthCheck = _checkInterval(interval.monthInterval, 0, monthExpand);\r\n                }\r\n                var dayCheck = 1;\r\n                if (_isSpecificDaysGiven) {\r\n                    dayCheck = arrIndexOf(interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */], curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]());\r\n                }\r\n                else if (interval === null || interval === void 0 ? void 0 : interval.dayInterval) {\r\n                    var daySpan = Math.floor((curDate.getTime() - date.getTime()) / 86400000);\r\n                    dayCheck = _checkInterval(interval.dayInterval, 0, daySpan);\r\n                }\r\n                return monthCheck >= 0 && dayCheck >= 0;\r\n            }\r\n            return false;\r\n        }\r\n        function _getLocalStorageName(msgKey, prefix) {\r\n            var fix = isNotNullOrUndefined(prefix) ? prefix : \"\";\r\n            if (msgKey) {\r\n                return THROTTLE_STORAGE_PREFIX + fix + \"-\" + msgKey;\r\n            }\r\n            return null;\r\n        }\r\n        // returns if throttle is triggered on current Date\r\n        function _isTriggeredOnCurDate(preTriggerDate) {\r\n            try {\r\n                if (preTriggerDate) {\r\n                    var curDate = new Date();\r\n                    return preTriggerDate.getUTCFullYear() === curDate.getUTCFullYear() &&\r\n                        preTriggerDate.getUTCMonth() === curDate.getUTCMonth() &&\r\n                        preTriggerDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]() === curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]();\r\n                }\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        }\r\n        // transfer local storage string value to object that identifies start date, current count and preTriggerDate\r\n        function _getLocalStorageObj(value, logger, storageName) {\r\n            try {\r\n                var storageObj = {\r\n                    date: _getThrottleDate(),\r\n                    count: 0\r\n                };\r\n                if (value) {\r\n                    var obj = JSON.parse(value);\r\n                    return {\r\n                        date: _getThrottleDate(obj[_DYN_DATE /* @min:%2edate */]) || storageObj[_DYN_DATE /* @min:%2edate */],\r\n                        count: obj[_DYN_COUNT /* @min:%2ecount */] || storageObj[_DYN_COUNT /* @min:%2ecount */],\r\n                        preTriggerDate: obj.preTriggerDate ? _getThrottleDate(obj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]) : undefined\r\n                    };\r\n                }\r\n                else {\r\n                    _resetLocalStorage(logger, storageName, storageObj);\r\n                    return storageObj;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return null;\r\n        }\r\n        // if datestr is not defined, current date will be returned\r\n        function _getThrottleDate(dateStr) {\r\n            // if new Date() can't be created through the provided dateStr, null will be returned.\r\n            try {\r\n                if (dateStr) {\r\n                    var date = new Date(dateStr);\r\n                    //make sure it is a valid Date Object\r\n                    if (!isNaN(date.getDate())) {\r\n                        return date;\r\n                    }\r\n                }\r\n                else {\r\n                    return new Date();\r\n                }\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return null;\r\n        }\r\n        function _resetLocalStorage(logger, storageName, obj) {\r\n            try {\r\n                return utlSetLocalStorage(logger, storageName, strTrim(JSON[_DYN_STRINGIFY /* @min:%2estringify */](obj)));\r\n            }\r\n            catch (e) {\r\n                //     // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        }\r\n        function _checkInterval(interval, start, current) {\r\n            // count from start year\r\n            return (current >= start) && (current - start) % interval == 0 ? Math.floor((current - start) / interval) + 1 : -1;\r\n        }\r\n        function _sendMessage(msgID, logger, message, severity) {\r\n            _throwInternal(logger, severity || 1 /* eLoggingSeverity.CRITICAL */, msgID, message);\r\n        }\r\n        // NOTE: config.limit.samplingRate is set to 4 decimal places,\r\n        // so config.limit.samplingRate = 1 means 0.0001%\r\n        function _canSampledIn() {\r\n            return randomValue(1000000) <= _config.limit.samplingRate;\r\n        }\r\n    }\r\n    return ThrottleMgr;\r\n}());\r\nexport { ThrottleMgr };\r\n//# sourceMappingURL=ThrottleMgr.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}