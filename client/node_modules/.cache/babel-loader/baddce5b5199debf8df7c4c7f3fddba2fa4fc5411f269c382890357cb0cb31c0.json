{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web Analytics, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { utlCanUseSessionStorage, utlGetSessionStorage, utlRemoveSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\nimport { _warnToConsole, dateNow, dumpObj, getJSON, hasJSON, objDefineAccessors, throwError } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_PAGE_VISIT_START_TIM20, _DYN_TRACK_PREVIOUS_PAGE_9 } from \"../../__DynamicConstants\";\n/**\r\n * Used to track page visit durations\r\n */\nvar PageVisitTimeManager = /** @class */function () {\n  /**\r\n   * Creates a new instance of PageVisitTimeManager\r\n   * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n   * @returns {}\r\n   */\n  function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {\n    var prevPageVisitDataKeyName = \"prevPageVisitData\";\n    dynamicProto(PageVisitTimeManager, this, function (_self) {\n      _self[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */] = function (currentPageName, currentPageUrl) {\n        try {\n          // Restart timer for new page view\n          var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);\n          // If there was a page already being timed, track the visit time for it now.\n          if (prevPageVisitTimeData) {\n            pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\n          }\n        } catch (e) {\n          _warnToConsole(logger, \"Auto track page visit time failed, metric will not be collected: \" + dumpObj(e));\n        }\n      };\n      /**\r\n       * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n       * @param pageName Name of page to begin timing visit duration\r\n       * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.\r\n       */\n      function restartPageVisitTimer(pageName, pageUrl) {\n        var prevPageVisitData = null;\n        try {\n          prevPageVisitData = stopPageVisitTimer();\n          startPageVisitTimer(pageName, pageUrl);\n        } catch (e) {\n          _warnToConsole(logger, \"Call to restart failed: \" + dumpObj(e));\n          prevPageVisitData = null;\n        }\n        return prevPageVisitData;\n      }\n      /**\r\n       * Starts timing visit duration of pageName\r\n       * @param pageName\r\n       * @returns {}\r\n       */\n      function startPageVisitTimer(pageName, pageUrl) {\n        try {\n          if (utlCanUseSessionStorage()) {\n            if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {\n              throwError(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\n            }\n            var currPageVisitData = new PageVisitData(pageName, pageUrl);\n            var currPageVisitDataStr = getJSON().stringify(currPageVisitData);\n            utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);\n          }\n        } catch (e) {\n          // TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out\n          _warnToConsole(logger, \"Call to start failed: \" + dumpObj(e));\n        }\n      }\n      /**\r\n       * Stops timing of current page, if exists.\r\n       * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.\r\n       */\n      function stopPageVisitTimer() {\n        var prevPageVisitData = null;\n        try {\n          if (utlCanUseSessionStorage()) {\n            // Define end time of page's visit\n            var pageVisitEndTime = dateNow();\n            // Try to retrieve  page name and start time from session storage\n            var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);\n            if (pageVisitDataJsonStr && hasJSON()) {\n              // if previous page data exists, set end time of visit\n              prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);\n              prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData[_DYN_PAGE_VISIT_START_TIM20 /* @min:%2epageVisitStartTime */];\n              // Remove data from storage since we already used it\n              utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);\n            }\n          }\n        } catch (e) {\n          _warnToConsole(logger, \"Stop page visit timer failed: \" + dumpObj(e));\n          prevPageVisitData = null;\n        }\n        return prevPageVisitData;\n      }\n      // For backward compatibility\n      objDefineAccessors(_self, \"_logger\", function () {\n        return logger;\n      });\n      objDefineAccessors(_self, \"pageVisitTimeTrackingHandler\", function () {\n        return pageVisitTimeTrackingHandler;\n      });\n    });\n  }\n  // Removed Stub for PageVisitTimeManager.prototype.trackPreviousPageVisit.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  PageVisitTimeManager.__ieDyn = 1;\n  return PageVisitTimeManager;\n}();\nexport { PageVisitTimeManager };\nvar PageVisitData = /** @class */function () {\n  function PageVisitData(pageName, pageUrl) {\n    this[_DYN_PAGE_VISIT_START_TIM20 /* @min:%2epageVisitStartTime */] = dateNow();\n    this.pageName = pageName;\n    this.pageUrl = pageUrl;\n  }\n  return PageVisitData;\n}();\nexport { PageVisitData };","map":{"version":3,"names":["dynamicProto","utlCanUseSessionStorage","utlGetSessionStorage","utlRemoveSessionStorage","utlSetSessionStorage","_warnToConsole","dateNow","dumpObj","getJSON","hasJSON","objDefineAccessors","throwError","_DYN_PAGE_VISIT_START_TIM20","_DYN_TRACK_PREVIOUS_PAGE_9","PageVisitTimeManager","logger","pageVisitTimeTrackingHandler","prevPageVisitDataKeyName","_self","currentPageName","currentPageUrl","prevPageVisitTimeData","restartPageVisitTimer","pageName","pageUrl","pageVisitTime","e","prevPageVisitData","stopPageVisitTimer","startPageVisitTimer","currPageVisitData","PageVisitData","currPageVisitDataStr","stringify","pageVisitEndTime","pageVisitDataJsonStr","parse"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlCanUseSessionStorage, utlGetSessionStorage, utlRemoveSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _warnToConsole, dateNow, dumpObj, getJSON, hasJSON, objDefineAccessors, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_PAGE_VISIT_START_TIM20, _DYN_TRACK_PREVIOUS_PAGE_9 } from \"../../__DynamicConstants\";\r\n/**\r\n * Used to track page visit durations\r\n */\r\nvar PageVisitTimeManager = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of PageVisitTimeManager\r\n     * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n     * @returns {}\r\n     */\r\n    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {\r\n        var prevPageVisitDataKeyName = \"prevPageVisitData\";\r\n        dynamicProto(PageVisitTimeManager, this, function (_self) {\r\n            _self[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */] = function (currentPageName, currentPageUrl) {\r\n                try {\r\n                    // Restart timer for new page view\r\n                    var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);\r\n                    // If there was a page already being timed, track the visit time for it now.\r\n                    if (prevPageVisitTimeData) {\r\n                        pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Auto track page visit time failed, metric will not be collected: \" + dumpObj(e));\r\n                }\r\n            };\r\n            /**\r\n             * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n             * @param pageName Name of page to begin timing visit duration\r\n             * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.\r\n             */\r\n            function restartPageVisitTimer(pageName, pageUrl) {\r\n                var prevPageVisitData = null;\r\n                try {\r\n                    prevPageVisitData = stopPageVisitTimer();\r\n                    startPageVisitTimer(pageName, pageUrl);\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Call to restart failed: \" + dumpObj(e));\r\n                    prevPageVisitData = null;\r\n                }\r\n                return prevPageVisitData;\r\n            }\r\n            /**\r\n             * Starts timing visit duration of pageName\r\n             * @param pageName\r\n             * @returns {}\r\n             */\r\n            function startPageVisitTimer(pageName, pageUrl) {\r\n                try {\r\n                    if (utlCanUseSessionStorage()) {\r\n                        if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {\r\n                            throwError(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\r\n                        }\r\n                        var currPageVisitData = new PageVisitData(pageName, pageUrl);\r\n                        var currPageVisitDataStr = getJSON().stringify(currPageVisitData);\r\n                        utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out\r\n                    _warnToConsole(logger, \"Call to start failed: \" + dumpObj(e));\r\n                }\r\n            }\r\n            /**\r\n             * Stops timing of current page, if exists.\r\n             * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.\r\n             */\r\n            function stopPageVisitTimer() {\r\n                var prevPageVisitData = null;\r\n                try {\r\n                    if (utlCanUseSessionStorage()) {\r\n                        // Define end time of page's visit\r\n                        var pageVisitEndTime = dateNow();\r\n                        // Try to retrieve  page name and start time from session storage\r\n                        var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);\r\n                        if (pageVisitDataJsonStr && hasJSON()) {\r\n                            // if previous page data exists, set end time of visit\r\n                            prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);\r\n                            prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData[_DYN_PAGE_VISIT_START_TIM20 /* @min:%2epageVisitStartTime */];\r\n                            // Remove data from storage since we already used it\r\n                            utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Stop page visit timer failed: \" + dumpObj(e));\r\n                    prevPageVisitData = null;\r\n                }\r\n                return prevPageVisitData;\r\n            }\r\n            // For backward compatibility\r\n            objDefineAccessors(_self, \"_logger\", function () { return logger; });\r\n            objDefineAccessors(_self, \"pageVisitTimeTrackingHandler\", function () { return pageVisitTimeTrackingHandler; });\r\n        });\r\n    }\r\n    /**\r\n    * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time\r\n    * @param currentPageName Name of page to begin timing for visit duration\r\n    * @param currentPageUrl Url of page to begin timing for visit duration\r\n    */\r\n    PageVisitTimeManager.prototype.trackPreviousPageVisit = function (currentPageName, currentPageUrl) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageVisitTimeManager;\r\n}());\r\nexport { PageVisitTimeManager };\r\nvar PageVisitData = /** @class */ (function () {\r\n    function PageVisitData(pageName, pageUrl) {\r\n        this[_DYN_PAGE_VISIT_START_TIM20 /* @min:%2epageVisitStartTime */] = dateNow();\r\n        this.pageName = pageName;\r\n        this.pageUrl = pageUrl;\r\n    }\r\n    return PageVisitData;\r\n}());\r\nexport { PageVisitData };\r\n//# sourceMappingURL=PageVisitTimeManager.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}