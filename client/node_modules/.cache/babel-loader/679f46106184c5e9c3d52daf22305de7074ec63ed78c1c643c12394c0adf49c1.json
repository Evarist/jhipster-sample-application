{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Channel, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { utlGetSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\nimport { _throwInternal, arrForEach, arrIndexOf, dumpObj, getExceptionName, getJSON, isArray, isFunction, isString } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_BATCH_PAYLOADS, _DYN_BUFFER_OVERRIDE, _DYN_CLEAR, _DYN_CLEAR_SENT, _DYN_COUNT, _DYN_EMIT_LINE_DELIMITED_0, _DYN_ENQUEUE, _DYN_LENGTH, _DYN_MARK_AS_SENT, _DYN_NAME_PREFIX, _DYN_PUSH, _DYN_STRINGIFY, _DYN__BUFFER__KEY, _DYN__MAX__BUFFER__SIZE, _DYN__SENT__BUFFER__KEY } from \"./__DynamicConstants\";\nvar BaseSendBuffer = /** @class */function () {\n  function BaseSendBuffer(logger, config) {\n    var _buffer = [];\n    var _bufferFullMessageSent = false;\n    this._get = function () {\n      return _buffer;\n    };\n    this._set = function (buffer) {\n      _buffer = buffer;\n      return _buffer;\n    };\n    dynamicProto(BaseSendBuffer, this, function (_self) {\n      _self[_DYN_ENQUEUE /* @min:%2eenqueue */] = function (payload) {\n        if (_self[_DYN_COUNT /* @min:%2ecount */]() >= config.eventsLimitInMem()) {\n          // sent internal log only once per page view\n          if (!_bufferFullMessageSent) {\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 105 /* _eInternalMessageId.InMemoryStorageBufferFull */, \"Maximum in-memory buffer size reached: \" + _self[_DYN_COUNT /* @min:%2ecount */](), true);\n            _bufferFullMessageSent = true;\n          }\n          return;\n        }\n        _buffer[_DYN_PUSH /* @min:%2epush */](payload);\n      };\n      _self[_DYN_COUNT /* @min:%2ecount */] = function () {\n        return _buffer[_DYN_LENGTH /* @min:%2elength */];\n      };\n\n      _self.size = function () {\n        var size = _buffer[_DYN_LENGTH /* @min:%2elength */];\n        for (var lp = 0; lp < _buffer[_DYN_LENGTH /* @min:%2elength */]; lp++) {\n          size += _buffer[lp][_DYN_LENGTH /* @min:%2elength */];\n        }\n\n        if (!config[_DYN_EMIT_LINE_DELIMITED_0 /* @min:%2eemitLineDelimitedJson */]()) {\n          size += 2;\n        }\n        return size;\n      };\n      _self[_DYN_CLEAR /* @min:%2eclear */] = function () {\n        _buffer = [];\n        _bufferFullMessageSent = false;\n      };\n      _self.getItems = function () {\n        return _buffer.slice(0);\n      };\n      _self[_DYN_BATCH_PAYLOADS /* @min:%2ebatchPayloads */] = function (payload) {\n        if (payload && payload[_DYN_LENGTH /* @min:%2elength */] > 0) {\n          var batch = config[_DYN_EMIT_LINE_DELIMITED_0 /* @min:%2eemitLineDelimitedJson */]() ? payload.join(\"\\n\") : \"[\" + payload.join(\",\") + \"]\";\n          return batch;\n        }\n        return null;\n      };\n    });\n  }\n  // Removed Stub for BaseSendBuffer.prototype.enqueue.\n  // Removed Stub for BaseSendBuffer.prototype.count.\n  // Removed Stub for BaseSendBuffer.prototype.size.\n  // Removed Stub for BaseSendBuffer.prototype.clear.\n  // Removed Stub for BaseSendBuffer.prototype.getItems.\n  // Removed Stub for BaseSendBuffer.prototype.batchPayloads.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  BaseSendBuffer.__ieDyn = 1;\n  return BaseSendBuffer;\n}();\n/*\r\n * An array based send buffer.\r\n */\nvar ArraySendBuffer = /** @class */function (_super) {\n  __extends(ArraySendBuffer, _super);\n  function ArraySendBuffer(logger, config) {\n    var _this = _super.call(this, logger, config) || this;\n    dynamicProto(ArraySendBuffer, _this, function (_self, _base) {\n      _self[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */] = function (payload) {\n        _base[_DYN_CLEAR /* @min:%2eclear */]();\n      };\n\n      _self[_DYN_CLEAR_SENT /* @min:%2eclearSent */] = function (payload) {\n        // not supported\n      };\n    });\n    return _this;\n  }\n  // Removed Stub for ArraySendBuffer.prototype.markAsSent.\n  // Removed Stub for ArraySendBuffer.prototype.clearSent.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  ArraySendBuffer.__ieDyn = 1;\n  return ArraySendBuffer;\n}(BaseSendBuffer);\nexport { ArraySendBuffer };\n/*\r\n * Session storage buffer holds a copy of all unsent items in the browser session storage.\r\n */\nvar SessionStorageSendBuffer = /** @class */function (_super) {\n  __extends(SessionStorageSendBuffer, _super);\n  function SessionStorageSendBuffer(logger, config) {\n    var _this = _super.call(this, logger, config) || this;\n    var _bufferFullMessageSent = false;\n    var _a = config[_DYN_BUFFER_OVERRIDE /* @min:%2ebufferOverride */]() || {\n        getItem: utlGetSessionStorage,\n        setItem: utlSetSessionStorage\n      },\n      getItem = _a.getItem,\n      setItem = _a.setItem;\n    dynamicProto(SessionStorageSendBuffer, _this, function (_self, _base) {\n      var bufferItems = _getBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */]);\n      var notDeliveredItems = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\n      var buffer = _self._set(bufferItems.concat(notDeliveredItems));\n      // If the buffer has too many items, drop items from the end.\n      if (buffer[_DYN_LENGTH /* @min:%2elength */] > SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\n        buffer[_DYN_LENGTH /* @min:%2elength */] = SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */];\n      }\n\n      _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], []);\n      _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], buffer);\n      _self[_DYN_ENQUEUE /* @min:%2eenqueue */] = function (payload) {\n        if (_self[_DYN_COUNT /* @min:%2ecount */]() >= SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\n          // sent internal log only once per page view\n          if (!_bufferFullMessageSent) {\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 67 /* _eInternalMessageId.SessionStorageBufferFull */, \"Maximum buffer size reached: \" + _self[_DYN_COUNT /* @min:%2ecount */](), true);\n            _bufferFullMessageSent = true;\n          }\n          return;\n        }\n        _base[_DYN_ENQUEUE /* @min:%2eenqueue */](payload);\n        _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._get());\n      };\n      _self[_DYN_CLEAR /* @min:%2eclear */] = function () {\n        _base[_DYN_CLEAR /* @min:%2eclear */]();\n        _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._get());\n        _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], []);\n        _bufferFullMessageSent = false;\n      };\n      _self[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */] = function (payload) {\n        _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._set(_removePayloadsFromBuffer(payload, _self._get())));\n        var sentElements = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\n        if (sentElements instanceof Array && payload instanceof Array) {\n          sentElements = sentElements.concat(payload);\n          if (sentElements[_DYN_LENGTH /* @min:%2elength */] > SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\n            // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\n            // until we receive a response from the backend and the buffer has free space again (see clearSent method)\n            _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 67 /* _eInternalMessageId.SessionStorageBufferFull */, \"Sent buffer reached its maximum size: \" + sentElements[_DYN_LENGTH /* @min:%2elength */], true);\n            sentElements[_DYN_LENGTH /* @min:%2elength */] = SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */];\n          }\n\n          _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], sentElements);\n        }\n      };\n      _self[_DYN_CLEAR_SENT /* @min:%2eclearSent */] = function (payload) {\n        var sentElements = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\n        sentElements = _removePayloadsFromBuffer(payload, sentElements);\n        _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], sentElements);\n      };\n      function _removePayloadsFromBuffer(payloads, buffer) {\n        var remaining = [];\n        arrForEach(buffer, function (value) {\n          if (!isFunction(value) && arrIndexOf(payloads, value) === -1) {\n            remaining[_DYN_PUSH /* @min:%2epush */](value);\n          }\n        });\n        return remaining;\n      }\n      function _getBuffer(key) {\n        var prefixedKey = key;\n        try {\n          prefixedKey = config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] && config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() ? config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() + \"_\" + prefixedKey : prefixedKey;\n          var bufferJson = getItem(logger, prefixedKey);\n          if (bufferJson) {\n            var buffer_1 = getJSON().parse(bufferJson);\n            if (isString(buffer_1)) {\n              // When using some version prototype.js the stringify / parse cycle does not decode array's correctly\n              buffer_1 = getJSON().parse(buffer_1);\n            }\n            if (buffer_1 && isArray(buffer_1)) {\n              return buffer_1;\n            }\n          }\n        } catch (e) {\n          _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 42 /* _eInternalMessageId.FailedToRestoreStorageBuffer */, \" storage key: \" + prefixedKey + \", \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n        return [];\n      }\n      function _setBuffer(key, buffer) {\n        var prefixedKey = key;\n        try {\n          prefixedKey = config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] && config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() ? config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() + \"_\" + prefixedKey : prefixedKey;\n          var bufferJson = JSON[_DYN_STRINGIFY /* @min:%2estringify */](buffer);\n          setItem(logger, prefixedKey, bufferJson);\n        } catch (e) {\n          // if there was an error, clear the buffer\n          // telemetry is stored in the _buffer array so we won't loose any items\n          setItem(logger, prefixedKey, JSON[_DYN_STRINGIFY /* @min:%2estringify */]([]));\n          _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 41 /* _eInternalMessageId.FailedToSetStorageBuffer */, \" storage key: \" + prefixedKey + \", \" + getExceptionName(e) + \". Buffer cleared\", {\n            exception: dumpObj(e)\n          });\n        }\n      }\n    });\n    return _this;\n  }\n  // Removed Stub for SessionStorageSendBuffer.prototype.enqueue.\n  // Removed Stub for SessionStorageSendBuffer.prototype.clear.\n  // Removed Stub for SessionStorageSendBuffer.prototype.markAsSent.\n  // Removed Stub for SessionStorageSendBuffer.prototype.clearSent.\n  SessionStorageSendBuffer.BUFFER_KEY = \"AI_buffer\";\n  SessionStorageSendBuffer.SENT_BUFFER_KEY = \"AI_sentBuffer\";\n  // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.\n  SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;\n  return SessionStorageSendBuffer;\n}(BaseSendBuffer);\nexport { SessionStorageSendBuffer };","map":{"version":3,"names":["__extendsFn","__extends","dynamicProto","utlGetSessionStorage","utlSetSessionStorage","_throwInternal","arrForEach","arrIndexOf","dumpObj","getExceptionName","getJSON","isArray","isFunction","isString","_DYN_BATCH_PAYLOADS","_DYN_BUFFER_OVERRIDE","_DYN_CLEAR","_DYN_CLEAR_SENT","_DYN_COUNT","_DYN_EMIT_LINE_DELIMITED_0","_DYN_ENQUEUE","_DYN_LENGTH","_DYN_MARK_AS_SENT","_DYN_NAME_PREFIX","_DYN_PUSH","_DYN_STRINGIFY","_DYN__BUFFER__KEY","_DYN__MAX__BUFFER__SIZE","_DYN__SENT__BUFFER__KEY","BaseSendBuffer","logger","config","_buffer","_bufferFullMessageSent","_get","_set","buffer","_self","payload","eventsLimitInMem","size","lp","getItems","slice","batch","join","ArraySendBuffer","_super","_this","call","_base","SessionStorageSendBuffer","_a","getItem","setItem","bufferItems","_getBuffer","notDeliveredItems","concat","_setBuffer","_removePayloadsFromBuffer","sentElements","Array","payloads","remaining","value","key","prefixedKey","bufferJson","buffer_1","parse","e","exception","JSON","BUFFER_KEY","SENT_BUFFER_KEY","MAX_BUFFER_SIZE"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlGetSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, arrForEach, arrIndexOf, dumpObj, getExceptionName, getJSON, isArray, isFunction, isString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_BATCH_PAYLOADS, _DYN_BUFFER_OVERRIDE, _DYN_CLEAR, _DYN_CLEAR_SENT, _DYN_COUNT, _DYN_EMIT_LINE_DELIMITED_0, _DYN_ENQUEUE, _DYN_LENGTH, _DYN_MARK_AS_SENT, _DYN_NAME_PREFIX, _DYN_PUSH, _DYN_STRINGIFY, _DYN__BUFFER__KEY, _DYN__MAX__BUFFER__SIZE, _DYN__SENT__BUFFER__KEY } from \"./__DynamicConstants\";\r\nvar BaseSendBuffer = /** @class */ (function () {\r\n    function BaseSendBuffer(logger, config) {\r\n        var _buffer = [];\r\n        var _bufferFullMessageSent = false;\r\n        this._get = function () {\r\n            return _buffer;\r\n        };\r\n        this._set = function (buffer) {\r\n            _buffer = buffer;\r\n            return _buffer;\r\n        };\r\n        dynamicProto(BaseSendBuffer, this, function (_self) {\r\n            _self[_DYN_ENQUEUE /* @min:%2eenqueue */] = function (payload) {\r\n                if (_self[_DYN_COUNT /* @min:%2ecount */]() >= config.eventsLimitInMem()) {\r\n                    // sent internal log only once per page view\r\n                    if (!_bufferFullMessageSent) {\r\n                        _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 105 /* _eInternalMessageId.InMemoryStorageBufferFull */, \"Maximum in-memory buffer size reached: \" + _self[_DYN_COUNT /* @min:%2ecount */](), true);\r\n                        _bufferFullMessageSent = true;\r\n                    }\r\n                    return;\r\n                }\r\n                _buffer[_DYN_PUSH /* @min:%2epush */](payload);\r\n            };\r\n            _self[_DYN_COUNT /* @min:%2ecount */] = function () {\r\n                return _buffer[_DYN_LENGTH /* @min:%2elength */];\r\n            };\r\n            _self.size = function () {\r\n                var size = _buffer[_DYN_LENGTH /* @min:%2elength */];\r\n                for (var lp = 0; lp < _buffer[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n                    size += _buffer[lp][_DYN_LENGTH /* @min:%2elength */];\r\n                }\r\n                if (!config[_DYN_EMIT_LINE_DELIMITED_0 /* @min:%2eemitLineDelimitedJson */]()) {\r\n                    size += 2;\r\n                }\r\n                return size;\r\n            };\r\n            _self[_DYN_CLEAR /* @min:%2eclear */] = function () {\r\n                _buffer = [];\r\n                _bufferFullMessageSent = false;\r\n            };\r\n            _self.getItems = function () {\r\n                return _buffer.slice(0);\r\n            };\r\n            _self[_DYN_BATCH_PAYLOADS /* @min:%2ebatchPayloads */] = function (payload) {\r\n                if (payload && payload[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var batch = config[_DYN_EMIT_LINE_DELIMITED_0 /* @min:%2eemitLineDelimitedJson */]() ?\r\n                        payload.join(\"\\n\") :\r\n                        \"[\" + payload.join(\",\") + \"]\";\r\n                    return batch;\r\n                }\r\n                return null;\r\n            };\r\n        });\r\n    }\r\n    BaseSendBuffer.prototype.enqueue = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    BaseSendBuffer.prototype.count = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    };\r\n    BaseSendBuffer.prototype.size = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    };\r\n    BaseSendBuffer.prototype.clear = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    BaseSendBuffer.prototype.getItems = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    BaseSendBuffer.prototype.batchPayloads = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return BaseSendBuffer;\r\n}());\r\n/*\r\n * An array based send buffer.\r\n */\r\nvar ArraySendBuffer = /** @class */ (function (_super) {\r\n    __extends(ArraySendBuffer, _super);\r\n    function ArraySendBuffer(logger, config) {\r\n        var _this = _super.call(this, logger, config) || this;\r\n        dynamicProto(ArraySendBuffer, _this, function (_self, _base) {\r\n            _self[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */] = function (payload) {\r\n                _base[_DYN_CLEAR /* @min:%2eclear */]();\r\n            };\r\n            _self[_DYN_CLEAR_SENT /* @min:%2eclearSent */] = function (payload) {\r\n                // not supported\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n    ArraySendBuffer.prototype.markAsSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ArraySendBuffer.prototype.clearSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return ArraySendBuffer;\r\n}(BaseSendBuffer));\r\nexport { ArraySendBuffer };\r\n/*\r\n * Session storage buffer holds a copy of all unsent items in the browser session storage.\r\n */\r\nvar SessionStorageSendBuffer = /** @class */ (function (_super) {\r\n    __extends(SessionStorageSendBuffer, _super);\r\n    function SessionStorageSendBuffer(logger, config) {\r\n        var _this = _super.call(this, logger, config) || this;\r\n        var _bufferFullMessageSent = false;\r\n        var _a = config[_DYN_BUFFER_OVERRIDE /* @min:%2ebufferOverride */]() || { getItem: utlGetSessionStorage, setItem: utlSetSessionStorage }, getItem = _a.getItem, setItem = _a.setItem;\r\n        dynamicProto(SessionStorageSendBuffer, _this, function (_self, _base) {\r\n            var bufferItems = _getBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */]);\r\n            var notDeliveredItems = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\r\n            var buffer = _self._set(bufferItems.concat(notDeliveredItems));\r\n            // If the buffer has too many items, drop items from the end.\r\n            if (buffer[_DYN_LENGTH /* @min:%2elength */] > SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\r\n                buffer[_DYN_LENGTH /* @min:%2elength */] = SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */];\r\n            }\r\n            _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], []);\r\n            _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], buffer);\r\n            _self[_DYN_ENQUEUE /* @min:%2eenqueue */] = function (payload) {\r\n                if (_self[_DYN_COUNT /* @min:%2ecount */]() >= SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\r\n                    // sent internal log only once per page view\r\n                    if (!_bufferFullMessageSent) {\r\n                        _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 67 /* _eInternalMessageId.SessionStorageBufferFull */, \"Maximum buffer size reached: \" + _self[_DYN_COUNT /* @min:%2ecount */](), true);\r\n                        _bufferFullMessageSent = true;\r\n                    }\r\n                    return;\r\n                }\r\n                _base[_DYN_ENQUEUE /* @min:%2eenqueue */](payload);\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._get());\r\n            };\r\n            _self[_DYN_CLEAR /* @min:%2eclear */] = function () {\r\n                _base[_DYN_CLEAR /* @min:%2eclear */]();\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._get());\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], []);\r\n                _bufferFullMessageSent = false;\r\n            };\r\n            _self[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */] = function (payload) {\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._set(_removePayloadsFromBuffer(payload, _self._get())));\r\n                var sentElements = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\r\n                if (sentElements instanceof Array && payload instanceof Array) {\r\n                    sentElements = sentElements.concat(payload);\r\n                    if (sentElements[_DYN_LENGTH /* @min:%2elength */] > SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\r\n                        // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\r\n                        // until we receive a response from the backend and the buffer has free space again (see clearSent method)\r\n                        _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 67 /* _eInternalMessageId.SessionStorageBufferFull */, \"Sent buffer reached its maximum size: \" + sentElements[_DYN_LENGTH /* @min:%2elength */], true);\r\n                        sentElements[_DYN_LENGTH /* @min:%2elength */] = SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */];\r\n                    }\r\n                    _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], sentElements);\r\n                }\r\n            };\r\n            _self[_DYN_CLEAR_SENT /* @min:%2eclearSent */] = function (payload) {\r\n                var sentElements = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\r\n                sentElements = _removePayloadsFromBuffer(payload, sentElements);\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], sentElements);\r\n            };\r\n            function _removePayloadsFromBuffer(payloads, buffer) {\r\n                var remaining = [];\r\n                arrForEach(buffer, function (value) {\r\n                    if (!isFunction(value) && arrIndexOf(payloads, value) === -1) {\r\n                        remaining[_DYN_PUSH /* @min:%2epush */](value);\r\n                    }\r\n                });\r\n                return remaining;\r\n            }\r\n            function _getBuffer(key) {\r\n                var prefixedKey = key;\r\n                try {\r\n                    prefixedKey = config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] && config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() ? config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() + \"_\" + prefixedKey : prefixedKey;\r\n                    var bufferJson = getItem(logger, prefixedKey);\r\n                    if (bufferJson) {\r\n                        var buffer_1 = getJSON().parse(bufferJson);\r\n                        if (isString(buffer_1)) {\r\n                            // When using some version prototype.js the stringify / parse cycle does not decode array's correctly\r\n                            buffer_1 = getJSON().parse(buffer_1);\r\n                        }\r\n                        if (buffer_1 && isArray(buffer_1)) {\r\n                            return buffer_1;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 42 /* _eInternalMessageId.FailedToRestoreStorageBuffer */, \" storage key: \" + prefixedKey + \", \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n                return [];\r\n            }\r\n            function _setBuffer(key, buffer) {\r\n                var prefixedKey = key;\r\n                try {\r\n                    prefixedKey = config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] && config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() ? config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() + \"_\" + prefixedKey : prefixedKey;\r\n                    var bufferJson = JSON[_DYN_STRINGIFY /* @min:%2estringify */](buffer);\r\n                    setItem(logger, prefixedKey, bufferJson);\r\n                }\r\n                catch (e) {\r\n                    // if there was an error, clear the buffer\r\n                    // telemetry is stored in the _buffer array so we won't loose any items\r\n                    setItem(logger, prefixedKey, JSON[_DYN_STRINGIFY /* @min:%2estringify */]([]));\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 41 /* _eInternalMessageId.FailedToSetStorageBuffer */, \" storage key: \" + prefixedKey + \", \" + getExceptionName(e) + \". Buffer cleared\", { exception: dumpObj(e) });\r\n                }\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    SessionStorageSendBuffer.prototype.enqueue = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.clear = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.markAsSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.clearSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.BUFFER_KEY = \"AI_buffer\";\r\n    SessionStorageSendBuffer.SENT_BUFFER_KEY = \"AI_sentBuffer\";\r\n    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.\r\n    SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;\r\n    return SessionStorageSendBuffer;\r\n}(BaseSendBuffer));\r\nexport { SessionStorageSendBuffer };\r\n//# sourceMappingURL=SendBuffer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}