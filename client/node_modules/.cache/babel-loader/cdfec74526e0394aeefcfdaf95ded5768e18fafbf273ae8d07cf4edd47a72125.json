{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { _DYN_LENGTH, _DYN_SPAN_ID, _DYN_SUBSTR, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_VERSION } from \"../__DynamicConstants\";\nimport { generateW3CId } from \"./CoreUtils\";\nimport { findMetaTag, findNamedServerTiming } from \"./EnvUtils\";\nimport { isArray, isString, strTrim } from \"./HelperFuncs\";\n// using {0,16} for leading and trailing whitespace just to constrain the possible runtime of a random string\nvar TRACE_PARENT_REGEX = /^([\\da-f]{2})-([\\da-f]{32})-([\\da-f]{16})-([\\da-f]{2})(-[^\\s]*)?$/;\nvar DEFAULT_VERSION = \"00\";\nvar INVALID_VERSION = \"ff\";\nvar INVALID_TRACE_ID = \"00000000000000000000000000000000\";\nvar INVALID_SPAN_ID = \"0000000000000000\";\nvar SAMPLED_FLAG = 0x01;\nfunction _isValid(value, len, invalidValue) {\n  if (value && value[_DYN_LENGTH /* @min:%2elength */] === len && value !== invalidValue) {\n    return !!value.match(/^[\\da-f]*$/);\n  }\n  return false;\n}\nfunction _formatValue(value, len, defValue) {\n  if (_isValid(value, len)) {\n    return value;\n  }\n  return defValue;\n}\nfunction _formatFlags(value) {\n  if (isNaN(value) || value < 0 || value > 255) {\n    value = 0x01;\n  }\n  var result = value.toString(16);\n  while (result[_DYN_LENGTH /* @min:%2elength */] < 2) {\n    result = \"0\" + result;\n  }\n  return result;\n}\n/**\r\n * Create a new ITraceParent instance using the provided values.\r\n * @param traceId - The traceId to use, when invalid a new random W3C id will be generated.\r\n * @param spanId - The parent/span id to use, a new random value will be generated if it is invalid.\r\n * @param flags - The traceFlags to use, defaults to zero (0) if not supplied or invalid\r\n * @param version - The version to used, defaults to version \"01\" if not supplied or invalid.\r\n * @returns\r\n */\nexport function createTraceParent(traceId, spanId, flags, version) {\n  var _a;\n  return _a = {}, _a[_DYN_VERSION /* @min:version */] = _isValid(version, 2, INVALID_VERSION) ? version : DEFAULT_VERSION, _a[_DYN_TRACE_ID /* @min:traceId */] = isValidTraceId(traceId) ? traceId : generateW3CId(), _a.spanId = isValidSpanId(spanId) ? spanId : generateW3CId()[_DYN_SUBSTR /* @min:%2esubstr */](0, 16), _a.traceFlags = flags >= 0 && flags <= 0xFF ? flags : 1, _a;\n}\n/**\r\n * Attempt to parse the provided string as a W3C TraceParent header value (https://www.w3.org/TR/trace-context/#traceparent-header)\r\n *\r\n * @param value\r\n * @returns\r\n */\nexport function parseTraceParent(value) {\n  var _a;\n  if (!value) {\n    // Don't pass a null/undefined or empty string\n    return null;\n  }\n  if (isArray(value)) {\n    // The value may have been encoded on the page into an array so handle this automatically\n    value = value[0] || \"\";\n  }\n  if (!value || !isString(value) || value[_DYN_LENGTH /* @min:%2elength */] > 8192) {\n    // limit potential processing based on total length\n    return null;\n  }\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  var match = TRACE_PARENT_REGEX.exec(strTrim(value));\n  if (!match ||\n  // No match\n  match[1] === INVALID_VERSION ||\n  // version ff is forbidden\n  match[2] === INVALID_TRACE_ID ||\n  // All zeros is considered to be invalid\n  match[3] === INVALID_SPAN_ID) {\n    // All zeros is considered to be invalid\n    return null;\n  }\n  return _a = {}, _a[_DYN_VERSION /* @min:version */] = match[1], _a[_DYN_TRACE_ID /* @min:traceId */] = match[2], _a[_DYN_SPAN_ID /* @min:spanId */] = match[3], _a[_DYN_TRACE_FLAGS /* @min:traceFlags */] = parseInt(match[4], 16), _a;\n}\n/**\r\n * Is the provided W3c Trace Id a valid string representation, it must be a 32-character string\r\n * of lowercase hexadecimal characters for example, 4bf92f3577b34da6a3ce929d0e0e4736.\r\n * If all characters as zero (00000000000000000000000000000000) it will be considered an invalid value.\r\n * @param value - The W3c trace Id to be validated\r\n * @returns true if valid otherwise false\r\n */\nexport function isValidTraceId(value) {\n  return _isValid(value, 32, INVALID_TRACE_ID);\n}\n/**\r\n * Is the provided W3c span id (aka. parent id) a valid string representation, it must be a 16-character\r\n * string of lowercase hexadecimal characters, for example, 00f067aa0ba902b7.\r\n * If all characters are zero (0000000000000000) this is considered an invalid value.\r\n * @param value - The W3c span id to be validated\r\n * @returns true if valid otherwise false\r\n */\nexport function isValidSpanId(value) {\n  return _isValid(value, 16, INVALID_SPAN_ID);\n}\n/**\r\n * Validates that the provided ITraceParent instance conforms to the currently supported specifications\r\n * @param value\r\n * @returns\r\n */\nexport function isValidTraceParent(value) {\n  if (!value || !_isValid(value[_DYN_VERSION /* @min:%2eversion */], 2, INVALID_VERSION) || !_isValid(value[_DYN_TRACE_ID /* @min:%2etraceId */], 32, INVALID_TRACE_ID) || !_isValid(value[_DYN_SPAN_ID /* @min:%2espanId */], 16, INVALID_SPAN_ID) || !_isValid(_formatFlags(value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */]), 2)) {\n    // Each known field must contain a valid value\n    return false;\n  }\n  return true;\n}\n/**\r\n * Is the parsed traceParent indicating that the trace is currently sampled.\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\nexport function isSampledFlag(value) {\n  if (isValidTraceParent(value)) {\n    return (value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] & SAMPLED_FLAG) === SAMPLED_FLAG;\n  }\n  return false;\n}\n/**\r\n * Format the ITraceParent value as a string using the supported and know version formats.\r\n * So even if the passed traceParent is a later version the string value returned from this\r\n * function will convert it to only the known version formats.\r\n * This currently only supports version \"00\" and invalid \"ff\"\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\nexport function formatTraceParent(value) {\n  if (value) {\n    // Special Note: This only supports formatting as version 00, future versions should encode any known supported version\n    // So parsing a future version will populate the correct version value but reformatting will reduce it to version 00.\n    var flags = _formatFlags(value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */]);\n    if (!_isValid(flags, 2)) {\n      flags = \"01\";\n    }\n    var version = value[_DYN_VERSION /* @min:%2eversion */] || DEFAULT_VERSION;\n    if (version !== \"00\" && version !== \"ff\") {\n      // Reduce version to \"00\"\n      version = DEFAULT_VERSION;\n    }\n    // Format as version 00\n    return \"\".concat(version, \"-\").concat(_formatValue(value.traceId, 32, INVALID_TRACE_ID), \"-\").concat(_formatValue(value.spanId, 16, INVALID_SPAN_ID), \"-\").concat(flags);\n  }\n  return \"\";\n}\n/**\r\n * Helper function to fetch the passed traceparent from the page, looking for it as a meta-tag or a Server-Timing header.\r\n * @returns\r\n */\nexport function findW3cTraceParent() {\n  var name = \"traceparent\";\n  var traceParent = parseTraceParent(findMetaTag(name));\n  if (!traceParent) {\n    traceParent = parseTraceParent(findNamedServerTiming(name));\n  }\n  return traceParent;\n}","map":{"version":3,"names":["_DYN_LENGTH","_DYN_SPAN_ID","_DYN_SUBSTR","_DYN_TRACE_FLAGS","_DYN_TRACE_ID","_DYN_VERSION","generateW3CId","findMetaTag","findNamedServerTiming","isArray","isString","strTrim","TRACE_PARENT_REGEX","DEFAULT_VERSION","INVALID_VERSION","INVALID_TRACE_ID","INVALID_SPAN_ID","SAMPLED_FLAG","_isValid","value","len","invalidValue","match","_formatValue","defValue","_formatFlags","isNaN","result","toString","createTraceParent","traceId","spanId","flags","version","_a","isValidTraceId","isValidSpanId","traceFlags","parseTraceParent","exec","parseInt","isValidTraceParent","isSampledFlag","formatTraceParent","concat","findW3cTraceParent","name","traceParent"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/W3cTraceParent.js"],"sourcesContent":["import { _DYN_LENGTH, _DYN_SPAN_ID, _DYN_SUBSTR, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_VERSION } from \"../__DynamicConstants\";\r\nimport { generateW3CId } from \"./CoreUtils\";\r\nimport { findMetaTag, findNamedServerTiming } from \"./EnvUtils\";\r\nimport { isArray, isString, strTrim } from \"./HelperFuncs\";\r\n// using {0,16} for leading and trailing whitespace just to constrain the possible runtime of a random string\r\nvar TRACE_PARENT_REGEX = /^([\\da-f]{2})-([\\da-f]{32})-([\\da-f]{16})-([\\da-f]{2})(-[^\\s]*)?$/;\r\nvar DEFAULT_VERSION = \"00\";\r\nvar INVALID_VERSION = \"ff\";\r\nvar INVALID_TRACE_ID = \"00000000000000000000000000000000\";\r\nvar INVALID_SPAN_ID = \"0000000000000000\";\r\nvar SAMPLED_FLAG = 0x01;\r\nfunction _isValid(value, len, invalidValue) {\r\n    if (value && value[_DYN_LENGTH /* @min:%2elength */] === len && value !== invalidValue) {\r\n        return !!value.match(/^[\\da-f]*$/);\r\n    }\r\n    return false;\r\n}\r\nfunction _formatValue(value, len, defValue) {\r\n    if (_isValid(value, len)) {\r\n        return value;\r\n    }\r\n    return defValue;\r\n}\r\nfunction _formatFlags(value) {\r\n    if (isNaN(value) || value < 0 || value > 255) {\r\n        value = 0x01;\r\n    }\r\n    var result = value.toString(16);\r\n    while (result[_DYN_LENGTH /* @min:%2elength */] < 2) {\r\n        result = \"0\" + result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create a new ITraceParent instance using the provided values.\r\n * @param traceId - The traceId to use, when invalid a new random W3C id will be generated.\r\n * @param spanId - The parent/span id to use, a new random value will be generated if it is invalid.\r\n * @param flags - The traceFlags to use, defaults to zero (0) if not supplied or invalid\r\n * @param version - The version to used, defaults to version \"01\" if not supplied or invalid.\r\n * @returns\r\n */\r\nexport function createTraceParent(traceId, spanId, flags, version) {\r\n    var _a;\r\n    return _a = {},\r\n        _a[_DYN_VERSION /* @min:version */] = _isValid(version, 2, INVALID_VERSION) ? version : DEFAULT_VERSION,\r\n        _a[_DYN_TRACE_ID /* @min:traceId */] = isValidTraceId(traceId) ? traceId : generateW3CId(),\r\n        _a.spanId = isValidSpanId(spanId) ? spanId : generateW3CId()[_DYN_SUBSTR /* @min:%2esubstr */](0, 16),\r\n        _a.traceFlags = flags >= 0 && flags <= 0xFF ? flags : 1,\r\n        _a;\r\n}\r\n/**\r\n * Attempt to parse the provided string as a W3C TraceParent header value (https://www.w3.org/TR/trace-context/#traceparent-header)\r\n *\r\n * @param value\r\n * @returns\r\n */\r\nexport function parseTraceParent(value) {\r\n    var _a;\r\n    if (!value) {\r\n        // Don't pass a null/undefined or empty string\r\n        return null;\r\n    }\r\n    if (isArray(value)) {\r\n        // The value may have been encoded on the page into an array so handle this automatically\r\n        value = value[0] || \"\";\r\n    }\r\n    if (!value || !isString(value) || value[_DYN_LENGTH /* @min:%2elength */] > 8192) {\r\n        // limit potential processing based on total length\r\n        return null;\r\n    }\r\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\r\n    var match = TRACE_PARENT_REGEX.exec(strTrim(value));\r\n    if (!match || // No match\r\n        match[1] === INVALID_VERSION || // version ff is forbidden\r\n        match[2] === INVALID_TRACE_ID || // All zeros is considered to be invalid\r\n        match[3] === INVALID_SPAN_ID) { // All zeros is considered to be invalid\r\n        return null;\r\n    }\r\n    return _a = {},\r\n        _a[_DYN_VERSION /* @min:version */] = match[1],\r\n        _a[_DYN_TRACE_ID /* @min:traceId */] = match[2],\r\n        _a[_DYN_SPAN_ID /* @min:spanId */] = match[3],\r\n        _a[_DYN_TRACE_FLAGS /* @min:traceFlags */] = parseInt(match[4], 16),\r\n        _a;\r\n}\r\n/**\r\n * Is the provided W3c Trace Id a valid string representation, it must be a 32-character string\r\n * of lowercase hexadecimal characters for example, 4bf92f3577b34da6a3ce929d0e0e4736.\r\n * If all characters as zero (00000000000000000000000000000000) it will be considered an invalid value.\r\n * @param value - The W3c trace Id to be validated\r\n * @returns true if valid otherwise false\r\n */\r\nexport function isValidTraceId(value) {\r\n    return _isValid(value, 32, INVALID_TRACE_ID);\r\n}\r\n/**\r\n * Is the provided W3c span id (aka. parent id) a valid string representation, it must be a 16-character\r\n * string of lowercase hexadecimal characters, for example, 00f067aa0ba902b7.\r\n * If all characters are zero (0000000000000000) this is considered an invalid value.\r\n * @param value - The W3c span id to be validated\r\n * @returns true if valid otherwise false\r\n */\r\nexport function isValidSpanId(value) {\r\n    return _isValid(value, 16, INVALID_SPAN_ID);\r\n}\r\n/**\r\n * Validates that the provided ITraceParent instance conforms to the currently supported specifications\r\n * @param value\r\n * @returns\r\n */\r\nexport function isValidTraceParent(value) {\r\n    if (!value ||\r\n        !_isValid(value[_DYN_VERSION /* @min:%2eversion */], 2, INVALID_VERSION) ||\r\n        !_isValid(value[_DYN_TRACE_ID /* @min:%2etraceId */], 32, INVALID_TRACE_ID) ||\r\n        !_isValid(value[_DYN_SPAN_ID /* @min:%2espanId */], 16, INVALID_SPAN_ID) ||\r\n        !_isValid(_formatFlags(value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */]), 2)) {\r\n        // Each known field must contain a valid value\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Is the parsed traceParent indicating that the trace is currently sampled.\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\r\nexport function isSampledFlag(value) {\r\n    if (isValidTraceParent(value)) {\r\n        return (value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] & SAMPLED_FLAG) === SAMPLED_FLAG;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Format the ITraceParent value as a string using the supported and know version formats.\r\n * So even if the passed traceParent is a later version the string value returned from this\r\n * function will convert it to only the known version formats.\r\n * This currently only supports version \"00\" and invalid \"ff\"\r\n * @param value - The parsed traceParent value\r\n * @returns\r\n */\r\nexport function formatTraceParent(value) {\r\n    if (value) {\r\n        // Special Note: This only supports formatting as version 00, future versions should encode any known supported version\r\n        // So parsing a future version will populate the correct version value but reformatting will reduce it to version 00.\r\n        var flags = _formatFlags(value[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */]);\r\n        if (!_isValid(flags, 2)) {\r\n            flags = \"01\";\r\n        }\r\n        var version = value[_DYN_VERSION /* @min:%2eversion */] || DEFAULT_VERSION;\r\n        if (version !== \"00\" && version !== \"ff\") {\r\n            // Reduce version to \"00\"\r\n            version = DEFAULT_VERSION;\r\n        }\r\n        // Format as version 00\r\n        return \"\".concat(version, \"-\").concat(_formatValue(value.traceId, 32, INVALID_TRACE_ID), \"-\").concat(_formatValue(value.spanId, 16, INVALID_SPAN_ID), \"-\").concat(flags);\r\n    }\r\n    return \"\";\r\n}\r\n/**\r\n * Helper function to fetch the passed traceparent from the page, looking for it as a meta-tag or a Server-Timing header.\r\n * @returns\r\n */\r\nexport function findW3cTraceParent() {\r\n    var name = \"traceparent\";\r\n    var traceParent = parseTraceParent(findMetaTag(name));\r\n    if (!traceParent) {\r\n        traceParent = parseTraceParent(findNamedServerTiming(name));\r\n    }\r\n    return traceParent;\r\n}\r\n//# sourceMappingURL=W3cTraceParent.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}