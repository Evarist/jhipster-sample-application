{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Dependencies Plugin, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { __assignFn as __assign, __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { CorrelationIdHelper, DisabledPropertyName, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, createDistributedTraceContextFromTrace, createTelemetryItem, createTraceParent, dateTimeUtilsNow, formatTraceParent, isInternalApplicationInsightsEndpoint } from \"@microsoft/applicationinsights-common\";\nimport { BaseTelemetryPlugin, InstrumentFunc, InstrumentProto, _throwInternal, arrForEach, createProcessTelemetryContext, createUniqueNamespace, deepFreeze, dumpObj, eventOn, generateW3CId, getExceptionName, getGlobal, getIEVersion, getLocation, getPerformance, isFunction, isNullOrUndefined, isString, isXhrSupported, mergeEvtNamespace, objForEachKey, strPrototype, strTrim } from \"@microsoft/applicationinsights-core-js\";\nimport { STR_PROPERTIES } from \"./InternalConstants\";\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_ADD_REQUEST_CONTEXT, _DYN_AJAX_PERF_LOOKUP_DEL18, _DYN_APP_ID, _DYN_CAN_INCLUDE_CORRELAT3, _DYN_CONTEXT, _DYN_CORE, _DYN_DISABLE_AJAX_TRACKIN12, _DYN_DISABLE_FETCH_TRACKI13, _DYN_DISTRIBUTED_TRACING_5, _DYN_ENABLE_AJAX_ERROR_ST7, _DYN_ENABLE_AJAX_PERF_TRA8, _DYN_ENABLE_REQUEST_HEADE6, _DYN_ENABLE_RESPONSE_HEAD10, _DYN_ERROR_STATUS_TEXT, _DYN_EXCLUDE_REQUEST_FROM11, _DYN_GET_ABSOLUTE_URL, _DYN_GET_ALL_RESPONSE_HEA16, _DYN_GET_CORRELATION_CONT17, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADERS, _DYN_HEADER_MAP, _DYN_INCLUDE_CORRELATION_2, _DYN_INST, _DYN_LENGTH, _DYN_MAX_AJAX_CALLS_PER_V9, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI15, _DYN_RESPONSE_TEXT, _DYN_SEND_DONE, _DYN_SET_REQUEST_HEADER, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE14, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TO_LOWER_CASE, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN_TRACK_DEPENDENCY_DAT4, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\nimport { ajaxRecord } from \"./ajaxRecord\";\nvar AJAX_MONITOR_PREFIX = \"ai.ajxmn.\";\nvar strDiagLog = \"diagLog\";\nvar strAjaxData = \"ajaxData\";\nvar STR_FETCH = \"fetch\";\nvar ERROR_HEADER = \"Failed to monitor XMLHttpRequest\";\nvar ERROR_PREFIX = \", monitoring data for this ajax call \";\nvar ERROR_POSTFIX = ERROR_PREFIX + \"may be incorrect.\";\nvar ERROR_NOT_SENT = ERROR_PREFIX + \"won't be sent.\";\nvar CORRELATION_HEADER_ERROR = \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\";\nvar CUSTOM_REQUEST_CONTEXT_ERROR = \"Failed to add custom defined request context as configured call back may missing a null check.\";\nvar FAILED_TO_CALCULATE_DURATION_ERROR = \"Failed to calculate the duration of the \";\n// Using a global value so that to handle same iKey with multiple app insights instances (mostly for testing)\nvar _markCount = 0;\n/** @Ignore */\nfunction _supportsFetch() {\n  var _global = getGlobal();\n  if (!_global || isNullOrUndefined(_global.Request) || isNullOrUndefined(_global.Request[strPrototype]) || isNullOrUndefined(_global[STR_FETCH])) {\n    return null;\n  }\n  return _global[STR_FETCH];\n}\nvar _isWebWorker = null;\nfunction isWebWorker() {\n  if (_isWebWorker == null) {\n    try {\n      _isWebWorker = !!(self && self instanceof WorkerGlobalScope);\n    } catch (e) {\n      _isWebWorker = false;\n    }\n  }\n  return _isWebWorker;\n}\n/**\r\n * Determines whether ajax monitoring can be enabled on this document\r\n * @returns True if Ajax monitoring is supported on this page, otherwise false\r\n * @ignore\r\n */\nfunction _supportsAjaxMonitoring(ajaxMonitorInstance) {\n  var result = false;\n  if (isXhrSupported()) {\n    var proto = XMLHttpRequest[strPrototype];\n    result = !isNullOrUndefined(proto) && !isNullOrUndefined(proto.open) &&\n    // eslint-disable-line security/detect-non-literal-fs-filename -- false positive\n    !isNullOrUndefined(proto.send) && !isNullOrUndefined(proto.abort);\n  }\n  var ieVer = getIEVersion();\n  if (ieVer && ieVer < 9) {\n    result = false;\n  }\n  if (result) {\n    // Disable if the XmlHttpRequest can't be extended or hooked\n    try {\n      var xhr = new XMLHttpRequest();\n      xhr[strAjaxData] = {};\n      // Check that we can update the prototype\n      var theOpen = XMLHttpRequest[strPrototype].open;\n      XMLHttpRequest[strPrototype].open = theOpen;\n    } catch (e) {\n      // We can't decorate the xhr object so disable monitoring\n      result = false;\n      _throwInternalCritical(ajaxMonitorInstance, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to enable XMLHttpRequest monitoring, extension is not supported\", {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return result;\n}\n/** @Ignore */\nfunction _getFailedAjaxDiagnosticsMessage(xhr) {\n  var result = \"\";\n  try {\n    if (xhr && xhr[strAjaxData] && xhr[strAjaxData][_DYN_REQUEST_URL /* @min:%2erequestUrl */]) {\n      result += \"(url: '\" + xhr[strAjaxData][_DYN_REQUEST_URL /* @min:%2erequestUrl */] + \"')\";\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-empty\n  }\n  return result;\n}\n/** @ignore */\nfunction _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\n  _throwInternal(ajaxMonitorInstance[strDiagLog](), 1 /* eLoggingSeverity.CRITICAL */, msgId, message, properties, isUserAct);\n}\n/** @ignore */\nfunction _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\n  _throwInternal(ajaxMonitorInstance[strDiagLog](), 2 /* eLoggingSeverity.WARNING */, msgId, message, properties, isUserAct);\n}\n/** @Ignore */\nfunction _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {\n  // tslint:disable-next-line\n  return function (args) {\n    _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, {\n      ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(args[_DYN_INST /* @min:%2einst */]),\n      exception: dumpObj(args.err)\n    });\n  };\n}\nfunction _indexOf(value, match) {\n  if (value && match) {\n    return value.indexOf(match);\n  }\n  return -1;\n}\nfunction _addHandler(container, id, theFunc) {\n  var theHandler = {\n    id: id,\n    fn: theFunc\n  };\n  container.push(theHandler);\n  return {\n    remove: function remove() {\n      arrForEach(container, function (initializer, idx) {\n        if (initializer.id === theHandler.id) {\n          container.splice(idx, 1);\n          return -1;\n        }\n      });\n    }\n  };\n}\nfunction _processDependencyContainer(core, container, details, message) {\n  var result = true;\n  arrForEach(container, function (theFunc, idx) {\n    try {\n      if (theFunc.fn.call(null, details) === false) {\n        result = false;\n      }\n    } catch (e) {\n      _throwInternal(core && core.logger, 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Dependency \" + message + \" [#\" + idx + \"] failed: \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      }, true);\n    }\n  });\n  return result;\n}\nfunction _processDependencyListeners(listeners, core, ajaxData, xhr, input, init) {\n  var initializersCount = listeners[_DYN_LENGTH /* @min:%2elength */];\n  if (initializersCount > 0) {\n    var details = {\n      core: core,\n      xhr: xhr,\n      input: input,\n      init: init,\n      traceId: ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */],\n      spanId: ajaxData[_DYN_SPAN_ID /* @min:%2espanID */],\n      traceFlags: ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */],\n      context: ajaxData[_DYN_CONTEXT /* @min:%2econtext */] || {},\n      aborted: !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */]\n    };\n\n    _processDependencyContainer(core, listeners, details, \"listener\");\n    ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] = details[_DYN_TRACE_ID0 /* @min:%2etraceId */];\n    ajaxData[_DYN_SPAN_ID /* @min:%2espanID */] = details[_DYN_SPAN_ID1 /* @min:%2espanId */];\n    ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = details[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n    ajaxData[_DYN_CONTEXT /* @min:%2econtext */] = details[_DYN_CONTEXT /* @min:%2econtext */];\n  }\n}\n\nvar BLOB_CORE = \"*.blob.core.\";\nexport var DfltAjaxCorrelationHeaderExDomains = deepFreeze([BLOB_CORE + \"windows.net\", BLOB_CORE + \"chinacloudapi.cn\", BLOB_CORE + \"cloudapi.de\", BLOB_CORE + \"usgovcloudapi.net\"]);\nvar _internalExcludeEndpoints = [/https:\\/\\/[^\\/]*(\\.pipe\\.aria|aria\\.pipe|events\\.data|collector\\.azure)\\.[^\\/]+\\/(OneCollector\\/1|Collector\\/3)\\.0/i];\nfunction _getDefaultConfig() {\n  var config = {\n    maxAjaxCallsPerView: 500,\n    disableAjaxTracking: false,\n    disableFetchTracking: false,\n    excludeRequestFromAutoTrackingPatterns: undefined,\n    disableCorrelationHeaders: false,\n    distributedTracingMode: 1 /* eDistributedTracingModes.AI_AND_W3C */,\n    correlationHeaderExcludedDomains: DfltAjaxCorrelationHeaderExDomains,\n    correlationHeaderDomains: undefined,\n    correlationHeaderExcludePatterns: undefined,\n    appId: undefined,\n    enableCorsCorrelation: false,\n    enableRequestHeaderTracking: false,\n    enableResponseHeaderTracking: false,\n    enableAjaxErrorStatusText: false,\n    enableAjaxPerfTracking: false,\n    maxAjaxPerfLookupAttempts: 3,\n    ajaxPerfLookupDelay: 25,\n    ignoreHeaders: [\"Authorization\", \"X-API-Key\", \"WWW-Authenticate\"],\n    addRequestContext: undefined,\n    addIntEndpoints: true\n  };\n  return config;\n}\nfunction _getEmptyConfig() {\n  var emptyConfig = _getDefaultConfig();\n  objForEachKey(emptyConfig, function (value) {\n    emptyConfig[value] = undefined;\n  });\n  return emptyConfig;\n}\nvar AjaxMonitor = /** @class */function (_super) {\n  __extends(AjaxMonitor, _super);\n  function AjaxMonitor() {\n    var _this = _super.call(this) || this;\n    _this.identifier = AjaxMonitor.identifier;\n    _this.priority = 120;\n    var _fetchInitialized; // fetch monitoring initialized\n    var _xhrInitialized; // XHR monitoring initialized\n    var _currentWindowHost;\n    var _config;\n    var _enableRequestHeaderTracking;\n    var _enableAjaxErrorStatusText;\n    var _trackAjaxAttempts;\n    var _context;\n    var _isUsingW3CHeaders;\n    var _isUsingAIHeaders;\n    var _markPrefix;\n    var _enableAjaxPerfTracking;\n    var _maxAjaxCallsPerView;\n    var _enableResponseHeaderTracking;\n    var _disabledUrls;\n    var _disableAjaxTracking;\n    var _disableFetchTracking;\n    var _excludeRequestFromAutoTrackingPatterns;\n    var _addRequestContext;\n    var _evtNamespace;\n    var _dependencyHandlerId;\n    var _dependencyListeners;\n    var _dependencyInitializers;\n    dynamicProto(AjaxMonitor, _this, function (_self, _base) {\n      var _addHook = _base._addHook;\n      _initDefaults();\n      _self.initialize = function (config, core, extensions, pluginChain) {\n        if (!_self.isInitialized()) {\n          _base.initialize(config, core, extensions, pluginChain);\n          _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"ajax\"), core && core.evtNamespace && core.evtNamespace());\n          _populateDefaults(config);\n          _instrumentXhr();\n          _instrumentFetch();\n          _populateContext();\n        }\n      };\n      _self._doTeardown = function () {\n        _initDefaults();\n      };\n      _self.trackDependencyData = function (dependency, properties) {\n        _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], null, dependency, properties);\n      };\n      _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */] = function (ajaxData, input, init, xhr) {\n        // Test Hook to allow the overriding of the location host\n        var currentWindowHost = _self[\"_currentWindowHost\"] || _currentWindowHost;\n        _processDependencyListeners(_dependencyListeners, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, xhr, input, init);\n        if (input) {\n          // Fetch\n          if (CorrelationIdHelper[_DYN_CAN_INCLUDE_CORRELAT3 /* @min:%2ecanIncludeCorrelationHeader */](_config, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\n            if (!init) {\n              init = {};\n            }\n            // init headers override original request headers\n            // so, if they exist use only them, otherwise use request's because they should have been applied in the first place\n            // not using original request headers will result in them being lost\n            var headers = new Headers(init[_DYN_HEADERS /* @min:%2eheaders */] || (input instanceof Request ? input[_DYN_HEADERS /* @min:%2eheaders */] || {} : {}));\n            if (_isUsingAIHeaders) {\n              var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\n              headers.set(RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\n              }\n            }\n            var appId = _config[_DYN_APP_ID /* @min:%2eappId */] || _context && _context[_DYN_APP_ID /* @min:%2eappId */]();\n            if (appId) {\n              headers.set(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\n              }\n            }\n            if (_isUsingW3CHeaders) {\n              var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n              if (isNullOrUndefined(traceFlags)) {\n                traceFlags = 0x01;\n              }\n              var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\n              headers.set(RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\n              }\n            }\n            init[_DYN_HEADERS /* @min:%2eheaders */] = headers;\n          }\n          return init;\n        } else if (xhr) {\n          // XHR\n          if (CorrelationIdHelper[_DYN_CAN_INCLUDE_CORRELAT3 /* @min:%2ecanIncludeCorrelationHeader */](_config, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\n            if (_isUsingAIHeaders) {\n              var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\n              xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\n              }\n            }\n            var appId = _config[_DYN_APP_ID /* @min:%2eappId */] || _context && _context[_DYN_APP_ID /* @min:%2eappId */]();\n            if (appId) {\n              xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\n              }\n            }\n            if (_isUsingW3CHeaders) {\n              var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n              if (isNullOrUndefined(traceFlags)) {\n                traceFlags = 0x01;\n              }\n              var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\n              xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\n              }\n            }\n          }\n          return xhr;\n        }\n        return undefined;\n      };\n      _self[_DYN_TRACK_DEPENDENCY_DAT4 /* @min:%2etrackDependencyDataInternal */] = function (dependency, properties, systemProperties) {\n        if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {\n          // Hack since expected format in w3c mode is |abc.def.\n          // Non-w3c format is |abc.def\n          // @todo Remove if better solution is available, e.g. handle in portal\n          if ((_config[_DYN_DISTRIBUTED_TRACING_5 /* @min:%2edistributedTracingMode */] === 2 /* eDistributedTracingModes.W3C */ || _config[_DYN_DISTRIBUTED_TRACING_5 /* @min:%2edistributedTracingMode */] === 1 /* eDistributedTracingModes.AI_AND_W3C */) && typeof dependency.id === \"string\" && dependency.id[dependency.id[_DYN_LENGTH /* @min:%2elength */] - 1] !== \".\") {\n            dependency.id += \".\";\n          }\n          if (isNullOrUndefined(dependency[_DYN_START_TIME /* @min:%2estartTime */])) {\n            dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\n          }\n          var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);\n          _self[_DYN_CORE /* @min:%2ecore */].track(item);\n        } else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {\n          _throwInternalCritical(_self, 55 /* _eInternalMessageId.MaxAjaxPerPVExceeded */, \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\", true);\n        }\n        ++_trackAjaxAttempts;\n      };\n      _self.addDependencyListener = function (dependencyListener) {\n        return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);\n      };\n      _self.addDependencyInitializer = function (dependencyInitializer) {\n        return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);\n      };\n      function _initDefaults() {\n        var location = getLocation();\n        _fetchInitialized = false; // fetch monitoring initialized\n        _xhrInitialized = false; // XHR monitoring initialized\n        _currentWindowHost = location && location.host && location.host[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n        _config = AjaxMonitor.getEmptyConfig();\n        _enableRequestHeaderTracking = false;\n        _enableAjaxErrorStatusText = false;\n        _trackAjaxAttempts = 0;\n        _context = null;\n        _isUsingW3CHeaders = false;\n        _isUsingAIHeaders = false;\n        _markPrefix = null;\n        _enableAjaxPerfTracking = false;\n        _maxAjaxCallsPerView = 0;\n        _enableResponseHeaderTracking = false;\n        _disabledUrls = {};\n        _disableAjaxTracking = false;\n        _disableFetchTracking = false;\n        _excludeRequestFromAutoTrackingPatterns = null;\n        _addRequestContext = null;\n        _evtNamespace = null;\n        _dependencyHandlerId = 0;\n        _dependencyListeners = [];\n        _dependencyInitializers = [];\n      }\n      function _populateDefaults(config) {\n        var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\n        // Reset to the empty config\n        _config = _getEmptyConfig();\n        var defaultConfig = _getDefaultConfig();\n        objForEachKey(defaultConfig, function (field, value) {\n          _config[field] = ctx.getConfig(AjaxMonitor.identifier, field, value);\n        });\n        var distributedTracingMode = _config[_DYN_DISTRIBUTED_TRACING_5 /* @min:%2edistributedTracingMode */];\n        _enableRequestHeaderTracking = _config[_DYN_ENABLE_REQUEST_HEADE6 /* @min:%2eenableRequestHeaderTracking */];\n        _enableAjaxErrorStatusText = _config[_DYN_ENABLE_AJAX_ERROR_ST7 /* @min:%2eenableAjaxErrorStatusText */];\n        _enableAjaxPerfTracking = _config[_DYN_ENABLE_AJAX_PERF_TRA8 /* @min:%2eenableAjaxPerfTracking */];\n        _maxAjaxCallsPerView = _config[_DYN_MAX_AJAX_CALLS_PER_V9 /* @min:%2emaxAjaxCallsPerView */];\n        _enableResponseHeaderTracking = _config[_DYN_ENABLE_RESPONSE_HEAD10 /* @min:%2eenableResponseHeaderTracking */];\n        _excludeRequestFromAutoTrackingPatterns = [].concat(_config[_DYN_EXCLUDE_REQUEST_FROM11 /* @min:%2eexcludeRequestFromAutoTrackingPatterns */] || [], _config.addIntEndpoints !== false ? _internalExcludeEndpoints : []);\n        _addRequestContext = _config[_DYN_ADD_REQUEST_CONTEXT /* @min:%2eaddRequestContext */];\n        _isUsingAIHeaders = distributedTracingMode === 0 /* eDistributedTracingModes.AI */ || distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */;\n        _isUsingW3CHeaders = distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */ || distributedTracingMode === 2 /* eDistributedTracingModes.W3C */;\n        if (_enableAjaxPerfTracking) {\n          var iKey = config.instrumentationKey || \"unkwn\";\n          if (iKey[_DYN_LENGTH /* @min:%2elength */] > 5) {\n            _markPrefix = AJAX_MONITOR_PREFIX + iKey.substring(iKey[_DYN_LENGTH /* @min:%2elength */] - 5) + \".\";\n          } else {\n            _markPrefix = AJAX_MONITOR_PREFIX + iKey + \".\";\n          }\n        }\n        _disableAjaxTracking = !!_config[_DYN_DISABLE_AJAX_TRACKIN12 /* @min:%2edisableAjaxTracking */];\n        _disableFetchTracking = !!_config[_DYN_DISABLE_FETCH_TRACKI13 /* @min:%2edisableFetchTracking */];\n      }\n\n      function _populateContext() {\n        var propExt = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\n        if (propExt) {\n          _context = propExt.plugin[_DYN_CONTEXT /* @min:%2econtext */]; // we could move IPropertiesPlugin to common as well\n        }\n      }\n      // discard the header if it's defined as ignoreHeaders in ICorrelationConfig\n      function _canIncludeHeaders(header) {\n        var rlt = true;\n        if (header || _config.ignoreHeaders) {\n          arrForEach(_config.ignoreHeaders, function (key) {\n            if (key[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === header[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]()) {\n              rlt = false;\n              return -1;\n            }\n          });\n        }\n        return rlt;\n      }\n      // Fetch Stuff\n      function _instrumentFetch() {\n        var fetch = _supportsFetch();\n        if (!fetch) {\n          return;\n        }\n        var global = getGlobal();\n        var isPolyfill = fetch.polyfill;\n        if (!_disableFetchTracking && !_fetchInitialized) {\n          _addHook(InstrumentFunc(global, STR_FETCH, {\n            ns: _evtNamespace,\n            // Add request hook\n            req: function req(callDetails, input, init) {\n              var fetchData;\n              if (!_disableFetchTracking && _fetchInitialized && !_isDisabledRequest(null, input, init) &&\n              // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates\n              !(isPolyfill && _xhrInitialized)) {\n                var ctx = callDetails.ctx();\n                fetchData = _createFetchRecord(input, init);\n                var newInit = _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](fetchData, input, init);\n                if (newInit !== init) {\n                  callDetails.set(1, newInit);\n                }\n                ctx.data = fetchData;\n              }\n            },\n            rsp: function rsp(callDetails, input) {\n              if (!_disableFetchTracking) {\n                var fetchData_1 = callDetails.ctx().data;\n                if (fetchData_1) {\n                  // Replace the result with the new promise from this code\n                  callDetails.rslt = callDetails.rslt.then(function (response) {\n                    _reportFetchMetrics(callDetails, (response || {})[_DYN_STATUS /* @min:%2estatus */], input, response, fetchData_1, function () {\n                      var ajaxResponse = {\n                        statusText: (response || {})[_DYN_STATUS_TEXT /* @min:%2estatusText */],\n                        headerMap: null,\n                        correlationContext: _getFetchCorrelationContext(response)\n                      };\n                      if (_enableResponseHeaderTracking && response) {\n                        var responseHeaderMap_1 = {};\n                        response.headers.forEach(function (value, name) {\n                          if (_canIncludeHeaders(name)) {\n                            responseHeaderMap_1[name] = value;\n                          }\n                        });\n                        ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_1;\n                      }\n                      return ajaxResponse;\n                    });\n                    return response;\n                  })[\"catch\"](function (reason) {\n                    _reportFetchMetrics(callDetails, 0, input, null, fetchData_1, null, {\n                      error: reason.message || dumpObj(reason)\n                    });\n                    throw reason;\n                  });\n                }\n              }\n            },\n            // Create an error callback to report any hook errors\n            hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to monitor Window.fetch\" + ERROR_POSTFIX)\n          }, true, isWebWorker()));\n          _fetchInitialized = true;\n        } else if (isPolyfill) {\n          // If fetch is a polyfill we need to capture the request to ensure that we correctly track\n          // disabled request URLS (i.e. internal urls) to ensure we don't end up in a constant loop\n          // of reporting ourselves, for example React Native uses a polyfill for fetch\n          // Note: Polyfill implementations that don't support the \"poyyfill\" tag are not supported\n          // the workaround is to add a polyfill property to your fetch implementation before initializing\n          // App Insights\n          _addHook(InstrumentFunc(global, STR_FETCH, {\n            ns: _evtNamespace,\n            req: function req(callDetails, input, init) {\n              // Just call so that we record any disabled URL\n              _isDisabledRequest(null, input, init);\n            }\n          }));\n        }\n        if (isPolyfill) {\n          // retag the instrumented fetch with the same polyfill settings this is mostly for testing\n          // But also supports multiple App Insights usages\n          global[STR_FETCH].polyfill = isPolyfill;\n        }\n      }\n      function _hookProto(target, funcName, callbacks) {\n        _addHook(InstrumentProto(target, funcName, callbacks));\n      }\n      function _instrumentXhr() {\n        if (_supportsAjaxMonitoring(_self) && !_disableAjaxTracking && !_xhrInitialized) {\n          // Instrument open\n          _hookProto(XMLHttpRequest, \"open\", {\n            ns: _evtNamespace,\n            req: function req(args, method, url, async) {\n              if (!_disableAjaxTracking) {\n                var xhr = args[_DYN_INST /* @min:%2einst */];\n                var ajaxData = xhr[strAjaxData];\n                if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, true)) {\n                  if (!ajaxData || !ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */]) {\n                    // Only create a single ajaxData (even when multiple AI instances are running)\n                    _openHandler(xhr, method, url, async);\n                  }\n                  // always attach to the on ready state change (required for handling multiple instances)\n                  _attachToOnReadyStateChange(xhr);\n                }\n              }\n            },\n            hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, ERROR_HEADER + \".open\" + ERROR_POSTFIX)\n          });\n          // Instrument send\n          _hookProto(XMLHttpRequest, \"send\", {\n            ns: _evtNamespace,\n            req: function req(args, context) {\n              if (!_disableAjaxTracking) {\n                var xhr = args[_DYN_INST /* @min:%2einst */];\n                var ajaxData = xhr[strAjaxData];\n                if (_isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */]) {\n                  _createMarkId(\"xhr\", ajaxData);\n                  ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\n                  _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](ajaxData, undefined, undefined, xhr);\n                  ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */] = true;\n                }\n              }\n            },\n            hkErr: _createErrorCallbackFunc(_self, 17 /* _eInternalMessageId.FailedMonitorAjaxSend */, ERROR_HEADER + ERROR_POSTFIX)\n          });\n          // Instrument abort\n          _hookProto(XMLHttpRequest, \"abort\", {\n            ns: _evtNamespace,\n            req: function req(args) {\n              if (!_disableAjaxTracking) {\n                var xhr = args[_DYN_INST /* @min:%2einst */];\n                var ajaxData = xhr[strAjaxData];\n                if (_isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */]) {\n                  ajaxData[_DYN_ABORTED /* @min:%2eaborted */] = 1;\n                  ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */] = true;\n                }\n              }\n            },\n            hkErr: _createErrorCallbackFunc(_self, 13 /* _eInternalMessageId.FailedMonitorAjaxAbort */, ERROR_HEADER + \".abort\" + ERROR_POSTFIX)\n          });\n          // Instrument setRequestHeader\n          _hookProto(XMLHttpRequest, \"setRequestHeader\", {\n            ns: _evtNamespace,\n            req: function req(args, header, value) {\n              if (!_disableAjaxTracking && _enableRequestHeaderTracking) {\n                var xhr = args[_DYN_INST /* @min:%2einst */];\n                if (_isMonitoredXhrInstance(xhr) && _canIncludeHeaders(header)) {\n                  xhr[strAjaxData][_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][header] = value;\n                }\n              }\n            },\n            hkErr: _createErrorCallbackFunc(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, ERROR_HEADER + \".setRequestHeader\" + ERROR_POSTFIX)\n          });\n          _xhrInitialized = true;\n        }\n      }\n      function _isDisabledRequest(xhr, request, init) {\n        var isDisabled = false;\n        var theUrl = ((!isString(request) ? (request || {}).url || \"\" : request) || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n        // check excludeRequestFromAutoTrackingPatterns before stripping off any query string\n        arrForEach(_excludeRequestFromAutoTrackingPatterns, function (regex) {\n          var theRegex = regex;\n          if (isString(regex)) {\n            theRegex = new RegExp(regex);\n          }\n          if (!isDisabled) {\n            isDisabled = theRegex.test(theUrl);\n          }\n        });\n        // if request url matches with exclude regex pattern, return true and no need to check for headers\n        if (isDisabled) {\n          return isDisabled;\n        }\n        var idx = _indexOf(theUrl, \"?\");\n        var idx2 = _indexOf(theUrl, \"#\");\n        if (idx === -1 || idx2 !== -1 && idx2 < idx) {\n          idx = idx2;\n        }\n        if (idx !== -1) {\n          // Strip off any Query string\n          theUrl = theUrl.substring(0, idx);\n        }\n        // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\n        if (!isNullOrUndefined(xhr)) {\n          // Look on the XMLHttpRequest of the URL string value\n          isDisabled = xhr[DisabledPropertyName] === true || theUrl[DisabledPropertyName] === true;\n        } else if (!isNullOrUndefined(request)) {\n          // fetch\n          // Look for DisabledPropertyName in either Request or RequestInit\n          isDisabled = (typeof request === \"object\" ? request[DisabledPropertyName] === true : false) || (init ? init[DisabledPropertyName] === true : false);\n        }\n        // Also add extra check just in case the XHR or fetch objects where not decorated with the DisableProperty due to sealing or freezing\n        if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {\n          isDisabled = true;\n        }\n        if (isDisabled) {\n          // Add the disabled url if not present\n          if (!_disabledUrls[theUrl]) {\n            _disabledUrls[theUrl] = 1;\n          }\n        } else {\n          // Check to see if the url is listed as disabled\n          if (_disabledUrls[theUrl]) {\n            isDisabled = true;\n          }\n        }\n        return isDisabled;\n      }\n      /// <summary>Verifies that particalar instance of XMLHttpRequest needs to be monitored</summary>\n      /// <param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\n      /// <returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\n      function _isMonitoredXhrInstance(xhr, excludeAjaxDataValidation) {\n        var ajaxValidation = true;\n        var initialized = _xhrInitialized;\n        if (!isNullOrUndefined(xhr)) {\n          ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(xhr[strAjaxData]);\n        }\n        // checking to see that all interested functions on xhr were instrumented\n        return initialized\n        // checking on ajaxData to see that it was not removed in user code\n        && ajaxValidation;\n      }\n      function _getDistributedTraceCtx() {\n        var distributedTraceCtx = null;\n        if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\n          distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\n        }\n        // Fall back\n        if (!distributedTraceCtx && _context && _context.telemetryTrace) {\n          distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);\n        }\n        return distributedTraceCtx;\n      }\n      function _openHandler(xhr, method, url, async) {\n        var _a;\n        var distributedTraceCtx = _getDistributedTraceCtx();\n        var traceID = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]() || generateW3CId();\n        var spanID = generateW3CId().substr(0, 16);\n        var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\n        ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\n        ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = url;\n        ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */] = true;\n        ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = {};\n        ajaxData.async = async;\n        ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\n        xhr[strAjaxData] = ajaxData;\n      }\n      function _attachToOnReadyStateChange(xhr) {\n        xhr[strAjaxData].xhrMonitoringState[_DYN_STATE_CHANGE_ATTACHE14 /* @min:%2estateChangeAttached */] = eventOn(xhr, \"readystatechange\", function () {\n          try {\n            if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr)) {\n              _onAjaxComplete(xhr);\n            }\n          } catch (e) {\n            var exceptionText = dumpObj(e);\n            // ignore messages with c00c023f, as this a known IE9 XHR abort issue\n            if (!exceptionText || _indexOf(exceptionText[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), \"c00c023f\") === -1) {\n              _throwInternalCritical(_self, 16 /* _eInternalMessageId.FailedMonitorAjaxRSC */, ERROR_HEADER + \" 'readystatechange' event handler\" + ERROR_POSTFIX, {\n                ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),\n                exception: exceptionText\n              });\n            }\n          }\n        }, _evtNamespace);\n      }\n      function _getResponseText(xhr) {\n        try {\n          var responseType = xhr.responseType;\n          if (responseType === \"\" || responseType === \"text\") {\n            // As per the specification responseText is only valid if the type is an empty string or \"text\"\n            return xhr[_DYN_RESPONSE_TEXT /* @min:%2eresponseText */];\n          }\n        } catch (e) {\n          // This shouldn't happen because of the above check -- but just in case, so just ignore\n        }\n        return null;\n      }\n      function _onAjaxComplete(xhr) {\n        var ajaxData = xhr[strAjaxData];\n        ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\n        ajaxData[_DYN_STATUS /* @min:%2estatus */] = xhr[_DYN_STATUS /* @min:%2estatus */];\n        function _reportXhrError(e, failedProps) {\n          var errorProps = failedProps || {};\n          errorProps[\"ajaxDiagnosticsMessage\"] = _getFailedAjaxDiagnosticsMessage(xhr);\n          if (e) {\n            errorProps[\"exception\"] = dumpObj(e);\n          }\n          _throwInternalWarning(_self, 14 /* _eInternalMessageId.FailedMonitorAjaxDur */, FAILED_TO_CALCULATE_DURATION_ERROR + \"ajax call\" + ERROR_NOT_SENT, errorProps);\n        }\n        _findPerfResourceEntry(\"xmlhttprequest\", ajaxData, function () {\n          try {\n            var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Ajax\", _enableRequestHeaderTracking, function () {\n              var ajaxResponse = {\n                statusText: xhr[_DYN_STATUS_TEXT /* @min:%2estatusText */],\n                headerMap: null,\n                correlationContext: _getAjaxCorrelationContext(xhr),\n                type: xhr.responseType,\n                responseText: _getResponseText(xhr),\n                response: xhr[_DYN_RESPONSE /* @min:%2eresponse */]\n              };\n\n              if (_enableResponseHeaderTracking) {\n                var headers = xhr[_DYN_GET_ALL_RESPONSE_HEA16 /* @min:%2egetAllResponseHeaders */]();\n                if (headers) {\n                  // xhr.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string or null\n                  // the regex converts the header string into an array of individual headers\n                  var arr = strTrim(headers).split(/[\\r\\n]+/);\n                  var responseHeaderMap_2 = {};\n                  arrForEach(arr, function (line) {\n                    var parts = line.split(\": \");\n                    var header = parts.shift();\n                    var value = parts.join(\": \");\n                    if (_canIncludeHeaders(header)) {\n                      responseHeaderMap_2[header] = value;\n                    }\n                  });\n                  ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_2;\n                }\n              }\n              return ajaxResponse;\n            });\n            var properties = void 0;\n            try {\n              if (!!_addRequestContext) {\n                properties = _addRequestContext({\n                  status: xhr[_DYN_STATUS /* @min:%2estatus */],\n                  xhr: xhr\n                });\n              }\n            } catch (e) {\n              _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\n            }\n            if (dependency) {\n              if (properties !== undefined) {\n                dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\n              }\n              var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\n              _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\n            } else {\n              _reportXhrError(null, {\n                requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\n                responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */]\n              });\n            }\n          } finally {\n            // cleanup telemetry data\n            try {\n              xhr[strAjaxData] = null;\n            } catch (e) {\n              // May throw in environments that prevent extension or freeze xhr\n            }\n          }\n        }, function (e) {\n          _reportXhrError(e, null);\n        });\n      }\n      function _getAjaxCorrelationContext(xhr) {\n        try {\n          var responseHeadersString = xhr[_DYN_GET_ALL_RESPONSE_HEA16 /* @min:%2egetAllResponseHeaders */]();\n          if (responseHeadersString !== null) {\n            var index = _indexOf(responseHeadersString[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), RequestHeaders[8 /* eRequestHeaders.requestContextHeaderLowerCase */]);\n            if (index !== -1) {\n              var responseHeader = xhr.getResponseHeader(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\n              return CorrelationIdHelper[_DYN_GET_CORRELATION_CONT17 /* @min:%2egetCorrelationContext */](responseHeader);\n            }\n          }\n        } catch (e) {\n          _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, {\n            ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),\n            exception: dumpObj(e)\n          });\n        }\n      }\n      function _createMarkId(type, ajaxData) {\n        if (ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] && _markPrefix && _enableAjaxPerfTracking) {\n          var performance_1 = getPerformance();\n          if (performance_1 && isFunction(performance_1.mark)) {\n            _markCount++;\n            var markId = _markPrefix + type + \"#\" + _markCount;\n            performance_1.mark(markId);\n            var entries = performance_1.getEntriesByName(markId);\n            if (entries && entries[_DYN_LENGTH /* @min:%2elength */] === 1) {\n              ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */] = entries[0];\n            }\n          }\n        }\n      }\n      function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {\n        var perfMark = ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */];\n        var performance = getPerformance();\n        var maxAttempts = _config.maxAjaxPerfLookupAttempts;\n        var retryDelay = _config[_DYN_AJAX_PERF_LOOKUP_DEL18 /* @min:%2eajaxPerfLookupDelay */];\n        var requestUrl = ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */];\n        var attempt = 0;\n        (function locateResourceTiming() {\n          try {\n            if (performance && perfMark) {\n              attempt++;\n              var perfTiming = null;\n              var entries = performance.getEntries();\n              for (var lp = entries[_DYN_LENGTH /* @min:%2elength */] - 1; lp >= 0; lp--) {\n                var entry = entries[lp];\n                if (entry) {\n                  if (entry.entryType === \"resource\") {\n                    if (entry.initiatorType === initiatorType && (_indexOf(entry[_DYN_NAME /* @min:%2ename */], requestUrl) !== -1 || _indexOf(requestUrl, entry[_DYN_NAME /* @min:%2ename */]) !== -1)) {\n                      perfTiming = entry;\n                    }\n                  } else if (entry.entryType === \"mark\" && entry[_DYN_NAME /* @min:%2ename */] === perfMark[_DYN_NAME /* @min:%2ename */]) {\n                    // We hit the start event\n                    ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] = perfTiming;\n                    break;\n                  }\n                  if (entry[_DYN_START_TIME /* @min:%2estartTime */] < perfMark[_DYN_START_TIME /* @min:%2estartTime */] - 1000) {\n                    // Fallback to try and reduce the time spent looking for the perf entry\n                    break;\n                  }\n                }\n              }\n            }\n            if (!perfMark ||\n            // - we don't have a perfMark or\n            ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] ||\n            // - we have not found the perf entry or\n            attempt >= maxAttempts ||\n            // - we have tried too many attempts or\n            ajaxData.async === false) {\n              // - this is a sync request\n              if (perfMark && isFunction(performance.clearMarks)) {\n                // Remove the mark so we don't fill up the performance resources too much\n                performance.clearMarks(perfMark[_DYN_NAME /* @min:%2ename */]);\n              }\n\n              ajaxData.perfAttempts = attempt;\n              // just continue and report the track event\n              trackCallback();\n            } else {\n              // We need to wait for the browser to populate the window.performance entry\n              // This needs to be at least 1ms as waiting <= 1 (on firefox) is not enough time for fetch or xhr,\n              // this is a scheduling issue for the browser implementation\n              setTimeout(locateResourceTiming, retryDelay);\n            }\n          } catch (e) {\n            reportError(e);\n          }\n        })();\n      }\n      function _createFetchRecord(input, init) {\n        var _a;\n        var distributedTraceCtx = _getDistributedTraceCtx();\n        var traceID = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]() || generateW3CId();\n        var spanID = generateW3CId().substr(0, 16);\n        var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\n        ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\n        ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\n        if (input instanceof Request) {\n          ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = input ? input.url : \"\";\n        } else {\n          ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = input;\n        }\n        var method = \"GET\";\n        if (init && init[_DYN_METHOD /* @min:%2emethod */]) {\n          method = init[_DYN_METHOD /* @min:%2emethod */];\n        } else if (input && input instanceof Request) {\n          method = input[_DYN_METHOD /* @min:%2emethod */];\n        }\n\n        ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\n        var requestHeaders = {};\n        if (_enableRequestHeaderTracking) {\n          var headers = new Headers((init ? init[_DYN_HEADERS /* @min:%2eheaders */] : 0) || (input instanceof Request ? input[_DYN_HEADERS /* @min:%2eheaders */] || {} : {}));\n          headers.forEach(function (value, key) {\n            if (_canIncludeHeaders(key)) {\n              requestHeaders[key] = value;\n            }\n          });\n        }\n        ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = requestHeaders;\n        _createMarkId(STR_FETCH, ajaxData);\n        return ajaxData;\n      }\n      function _getFailedFetchDiagnosticsMessage(input) {\n        var result = \"\";\n        try {\n          if (!isNullOrUndefined(input)) {\n            if (typeof input === \"string\") {\n              result += \"(url: '\".concat(input, \"')\");\n            } else {\n              result += \"(url: '\".concat(input.url, \"')\");\n            }\n          }\n        } catch (e) {\n          _throwInternalCritical(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to grab failed fetch diagnostics message\", {\n            exception: dumpObj(e)\n          });\n        }\n        return result;\n      }\n      function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {\n        if (!ajaxData) {\n          return;\n        }\n        function _reportFetchError(msgId, e, failedProps) {\n          var errorProps = failedProps || {};\n          errorProps[\"fetchDiagnosticsMessage\"] = _getFailedFetchDiagnosticsMessage(input);\n          if (e) {\n            errorProps[\"exception\"] = dumpObj(e);\n          }\n          _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + \"fetch call\" + ERROR_NOT_SENT, errorProps);\n        }\n        ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\n        ajaxData[_DYN_STATUS /* @min:%2estatus */] = status;\n        _findPerfResourceEntry(STR_FETCH, ajaxData, function () {\n          var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Fetch\", _enableRequestHeaderTracking, getResponse);\n          var properties;\n          try {\n            if (!!_addRequestContext) {\n              properties = _addRequestContext({\n                status: status,\n                request: input,\n                response: response\n              });\n            }\n          } catch (e) {\n            _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\n          }\n          if (dependency) {\n            if (properties !== undefined) {\n              dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\n            }\n            var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\n            _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\n          } else {\n            _reportFetchError(14 /* _eInternalMessageId.FailedMonitorAjaxDur */, null, {\n              requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\n              responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */]\n            });\n          }\n        }, function (e) {\n          _reportFetchError(18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, e, null);\n        });\n      }\n      function _getFetchCorrelationContext(response) {\n        if (response && response[_DYN_HEADERS /* @min:%2eheaders */]) {\n          try {\n            var responseHeader = response[_DYN_HEADERS /* @min:%2eheaders */].get(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\n            return CorrelationIdHelper[_DYN_GET_CORRELATION_CONT17 /* @min:%2egetCorrelationContext */](responseHeader);\n          } catch (e) {\n            _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, {\n              fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response),\n              exception: dumpObj(e)\n            });\n          }\n        }\n      }\n      function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {\n        var result = true;\n        var initializersCount = initializers[_DYN_LENGTH /* @min:%2elength */];\n        if (initializersCount > 0) {\n          var details = {\n            item: dependency,\n            properties: properties,\n            sysProperties: systemProperties,\n            context: ajaxData ? ajaxData[_DYN_CONTEXT /* @min:%2econtext */] : null,\n            aborted: ajaxData ? !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */] : false\n          };\n          result = _processDependencyContainer(core, initializers, details, \"initializer\");\n        }\n        if (result) {\n          _self[_DYN_TRACK_DEPENDENCY_DAT4 /* @min:%2etrackDependencyDataInternal */](dependency, properties, systemProperties);\n        }\n      }\n    });\n    return _this;\n  }\n  // Removed Stub for AjaxMonitor.prototype.initialize.\n  AjaxMonitor.prototype.processTelemetry = function (item, itemCtx) {\n    this.processNext(item, itemCtx);\n  };\n  // Removed Stub for AjaxMonitor.prototype.trackDependencyData.\n  // Removed Stub for AjaxMonitor.prototype.includeCorrelationHeaders.\n  // Removed Stub for AjaxMonitor.prototype.addDependencyListener.\n  /**\r\n   * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n   * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n   * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n   * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n   * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n   * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n   */\n  AjaxMonitor.prototype.addDependencyInitializer = function (dependencyInitializer) {\n    return null;\n  };\n  // Removed Stub for AjaxMonitor.prototype.trackDependencyDataInternal.\n  AjaxMonitor.identifier = \"AjaxDependencyPlugin\";\n  AjaxMonitor.getDefaultConfig = _getDefaultConfig;\n  AjaxMonitor.getEmptyConfig = _getEmptyConfig;\n  return AjaxMonitor;\n}(BaseTelemetryPlugin);\nexport { AjaxMonitor };","map":{"version":3,"names":["__assignFn","__assign","__extendsFn","__extends","dynamicProto","CorrelationIdHelper","DisabledPropertyName","PropertiesPluginIdentifier","RemoteDependencyData","RequestHeaders","createDistributedTraceContextFromTrace","createTelemetryItem","createTraceParent","dateTimeUtilsNow","formatTraceParent","isInternalApplicationInsightsEndpoint","BaseTelemetryPlugin","InstrumentFunc","InstrumentProto","_throwInternal","arrForEach","createProcessTelemetryContext","createUniqueNamespace","deepFreeze","dumpObj","eventOn","generateW3CId","getExceptionName","getGlobal","getIEVersion","getLocation","getPerformance","isFunction","isNullOrUndefined","isString","isXhrSupported","mergeEvtNamespace","objForEachKey","strPrototype","strTrim","STR_PROPERTIES","_DYN_ABORTED","_DYN_ABORT_DONE","_DYN_ADD_REQUEST_CONTEXT","_DYN_AJAX_PERF_LOOKUP_DEL18","_DYN_APP_ID","_DYN_CAN_INCLUDE_CORRELAT3","_DYN_CONTEXT","_DYN_CORE","_DYN_DISABLE_AJAX_TRACKIN12","_DYN_DISABLE_FETCH_TRACKI13","_DYN_DISTRIBUTED_TRACING_5","_DYN_ENABLE_AJAX_ERROR_ST7","_DYN_ENABLE_AJAX_PERF_TRA8","_DYN_ENABLE_REQUEST_HEADE6","_DYN_ENABLE_RESPONSE_HEAD10","_DYN_ERROR_STATUS_TEXT","_DYN_EXCLUDE_REQUEST_FROM11","_DYN_GET_ABSOLUTE_URL","_DYN_GET_ALL_RESPONSE_HEA16","_DYN_GET_CORRELATION_CONT17","_DYN_GET_PART_APROPS","_DYN_GET_TRACE_FLAGS","_DYN_GET_TRACE_ID","_DYN_HEADERS","_DYN_HEADER_MAP","_DYN_INCLUDE_CORRELATION_2","_DYN_INST","_DYN_LENGTH","_DYN_MAX_AJAX_CALLS_PER_V9","_DYN_METHOD","_DYN_NAME","_DYN_OPEN_DONE","_DYN_PERF_MARK","_DYN_PERF_TIMING","_DYN_REQUEST_HEADERS","_DYN_REQUEST_SENT_TIME","_DYN_REQUEST_URL","_DYN_RESPONSE","_DYN_RESPONSE_FINISHED_TI15","_DYN_RESPONSE_TEXT","_DYN_SEND_DONE","_DYN_SET_REQUEST_HEADER","_DYN_SPAN_ID","_DYN_SPAN_ID1","_DYN_START_TIME","_DYN_STATE_CHANGE_ATTACHE14","_DYN_STATUS","_DYN_STATUS_TEXT","_DYN_TO_LOWER_CASE","_DYN_TRACE_FLAGS","_DYN_TRACE_ID","_DYN_TRACE_ID0","_DYN_TRACK_DEPENDENCY_DAT4","_DYN__CREATE_TRACK_ITEM","ajaxRecord","AJAX_MONITOR_PREFIX","strDiagLog","strAjaxData","STR_FETCH","ERROR_HEADER","ERROR_PREFIX","ERROR_POSTFIX","ERROR_NOT_SENT","CORRELATION_HEADER_ERROR","CUSTOM_REQUEST_CONTEXT_ERROR","FAILED_TO_CALCULATE_DURATION_ERROR","_markCount","_supportsFetch","_global","Request","_isWebWorker","isWebWorker","self","WorkerGlobalScope","e","_supportsAjaxMonitoring","ajaxMonitorInstance","result","proto","XMLHttpRequest","open","send","abort","ieVer","xhr","theOpen","_throwInternalCritical","exception","_getFailedAjaxDiagnosticsMessage","msgId","message","properties","isUserAct","_throwInternalWarning","_createErrorCallbackFunc","internalMessage","args","ajaxDiagnosticsMessage","err","_indexOf","value","match","indexOf","_addHandler","container","id","theFunc","theHandler","fn","push","remove","initializer","idx","splice","_processDependencyContainer","core","details","call","logger","_processDependencyListeners","listeners","ajaxData","input","init","initializersCount","traceId","spanId","traceFlags","context","aborted","BLOB_CORE","DfltAjaxCorrelationHeaderExDomains","_internalExcludeEndpoints","_getDefaultConfig","config","maxAjaxCallsPerView","disableAjaxTracking","disableFetchTracking","excludeRequestFromAutoTrackingPatterns","undefined","disableCorrelationHeaders","distributedTracingMode","correlationHeaderExcludedDomains","correlationHeaderDomains","correlationHeaderExcludePatterns","appId","enableCorsCorrelation","enableRequestHeaderTracking","enableResponseHeaderTracking","enableAjaxErrorStatusText","enableAjaxPerfTracking","maxAjaxPerfLookupAttempts","ajaxPerfLookupDelay","ignoreHeaders","addRequestContext","addIntEndpoints","_getEmptyConfig","emptyConfig","AjaxMonitor","_super","_this","identifier","priority","_fetchInitialized","_xhrInitialized","_currentWindowHost","_config","_enableRequestHeaderTracking","_enableAjaxErrorStatusText","_trackAjaxAttempts","_context","_isUsingW3CHeaders","_isUsingAIHeaders","_markPrefix","_enableAjaxPerfTracking","_maxAjaxCallsPerView","_enableResponseHeaderTracking","_disabledUrls","_disableAjaxTracking","_disableFetchTracking","_excludeRequestFromAutoTrackingPatterns","_addRequestContext","_evtNamespace","_dependencyHandlerId","_dependencyListeners","_dependencyInitializers","_self","_base","_addHook","_initDefaults","initialize","extensions","pluginChain","isInitialized","evtNamespace","_populateDefaults","_instrumentXhr","_instrumentFetch","_populateContext","_doTeardown","trackDependencyData","dependency","_reportDependencyInternal","currentWindowHost","headers","Headers","set","traceParent","systemProperties","Date","item","dataType","envelopeType","track","addDependencyListener","dependencyListener","addDependencyInitializer","dependencyInitializer","location","host","getEmptyConfig","ctx","defaultConfig","field","getConfig","concat","iKey","instrumentationKey","substring","propExt","getPlugin","plugin","_canIncludeHeaders","header","rlt","key","fetch","global","isPolyfill","polyfill","ns","req","callDetails","fetchData","_isDisabledRequest","_createFetchRecord","newInit","data","rsp","fetchData_1","rslt","then","response","_reportFetchMetrics","ajaxResponse","statusText","headerMap","correlationContext","_getFetchCorrelationContext","responseHeaderMap_1","forEach","name","reason","error","hkErr","_hookProto","target","funcName","callbacks","method","url","async","_isMonitoredXhrInstance","xhrMonitoringState","_openHandler","_attachToOnReadyStateChange","_createMarkId","request","isDisabled","theUrl","regex","theRegex","RegExp","test","idx2","excludeAjaxDataValidation","ajaxValidation","initialized","_getDistributedTraceCtx","distributedTraceCtx","getTraceCtx","telemetryTrace","_a","traceID","spanID","substr","readyState","_onAjaxComplete","exceptionText","_getResponseText","responseType","_reportXhrError","failedProps","errorProps","_findPerfResourceEntry","_getAjaxCorrelationContext","type","responseText","arr","split","responseHeaderMap_2","line","parts","shift","join","status","sysProperties","requestSentTime","responseFinishedTime","responseHeadersString","index","responseHeader","getResponseHeader","performance_1","mark","markId","entries","getEntriesByName","initiatorType","trackCallback","reportError","perfMark","performance","maxAttempts","retryDelay","requestUrl","attempt","locateResourceTiming","perfTiming","getEntries","lp","entry","entryType","clearMarks","perfAttempts","setTimeout","requestHeaders","_getFailedFetchDiagnosticsMessage","getResponse","_reportFetchError","get","fetchDiagnosticsMessage","initializers","prototype","processTelemetry","itemCtx","processNext","getDefaultConfig"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajax.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { CorrelationIdHelper, DisabledPropertyName, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, createDistributedTraceContextFromTrace, createTelemetryItem, createTraceParent, dateTimeUtilsNow, formatTraceParent, isInternalApplicationInsightsEndpoint } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentFunc, InstrumentProto, _throwInternal, arrForEach, createProcessTelemetryContext, createUniqueNamespace, deepFreeze, dumpObj, eventOn, generateW3CId, getExceptionName, getGlobal, getIEVersion, getLocation, getPerformance, isFunction, isNullOrUndefined, isString, isXhrSupported, mergeEvtNamespace, objForEachKey, strPrototype, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_PROPERTIES } from \"./InternalConstants\";\r\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_ADD_REQUEST_CONTEXT, _DYN_AJAX_PERF_LOOKUP_DEL18, _DYN_APP_ID, _DYN_CAN_INCLUDE_CORRELAT3, _DYN_CONTEXT, _DYN_CORE, _DYN_DISABLE_AJAX_TRACKIN12, _DYN_DISABLE_FETCH_TRACKI13, _DYN_DISTRIBUTED_TRACING_5, _DYN_ENABLE_AJAX_ERROR_ST7, _DYN_ENABLE_AJAX_PERF_TRA8, _DYN_ENABLE_REQUEST_HEADE6, _DYN_ENABLE_RESPONSE_HEAD10, _DYN_ERROR_STATUS_TEXT, _DYN_EXCLUDE_REQUEST_FROM11, _DYN_GET_ABSOLUTE_URL, _DYN_GET_ALL_RESPONSE_HEA16, _DYN_GET_CORRELATION_CONT17, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADERS, _DYN_HEADER_MAP, _DYN_INCLUDE_CORRELATION_2, _DYN_INST, _DYN_LENGTH, _DYN_MAX_AJAX_CALLS_PER_V9, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI15, _DYN_RESPONSE_TEXT, _DYN_SEND_DONE, _DYN_SET_REQUEST_HEADER, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE14, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TO_LOWER_CASE, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN_TRACK_DEPENDENCY_DAT4, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\r\nimport { ajaxRecord } from \"./ajaxRecord\";\r\nvar AJAX_MONITOR_PREFIX = \"ai.ajxmn.\";\r\nvar strDiagLog = \"diagLog\";\r\nvar strAjaxData = \"ajaxData\";\r\nvar STR_FETCH = \"fetch\";\r\nvar ERROR_HEADER = \"Failed to monitor XMLHttpRequest\";\r\nvar ERROR_PREFIX = \", monitoring data for this ajax call \";\r\nvar ERROR_POSTFIX = ERROR_PREFIX + \"may be incorrect.\";\r\nvar ERROR_NOT_SENT = ERROR_PREFIX + \"won't be sent.\";\r\nvar CORRELATION_HEADER_ERROR = \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\";\r\nvar CUSTOM_REQUEST_CONTEXT_ERROR = \"Failed to add custom defined request context as configured call back may missing a null check.\";\r\nvar FAILED_TO_CALCULATE_DURATION_ERROR = \"Failed to calculate the duration of the \";\r\n// Using a global value so that to handle same iKey with multiple app insights instances (mostly for testing)\r\nvar _markCount = 0;\r\n/** @Ignore */\r\nfunction _supportsFetch() {\r\n    var _global = getGlobal();\r\n    if (!_global ||\r\n        isNullOrUndefined(_global.Request) ||\r\n        isNullOrUndefined(_global.Request[strPrototype]) ||\r\n        isNullOrUndefined(_global[STR_FETCH])) {\r\n        return null;\r\n    }\r\n    return _global[STR_FETCH];\r\n}\r\nvar _isWebWorker = null;\r\nfunction isWebWorker() {\r\n    if (_isWebWorker == null) {\r\n        try {\r\n            _isWebWorker = !!(self && self instanceof WorkerGlobalScope);\r\n        }\r\n        catch (e) {\r\n            _isWebWorker = false;\r\n        }\r\n    }\r\n    return _isWebWorker;\r\n}\r\n/**\r\n * Determines whether ajax monitoring can be enabled on this document\r\n * @returns True if Ajax monitoring is supported on this page, otherwise false\r\n * @ignore\r\n */\r\nfunction _supportsAjaxMonitoring(ajaxMonitorInstance) {\r\n    var result = false;\r\n    if (isXhrSupported()) {\r\n        var proto = XMLHttpRequest[strPrototype];\r\n        result = !isNullOrUndefined(proto) &&\r\n            !isNullOrUndefined(proto.open) && // eslint-disable-line security/detect-non-literal-fs-filename -- false positive\r\n            !isNullOrUndefined(proto.send) &&\r\n            !isNullOrUndefined(proto.abort);\r\n    }\r\n    var ieVer = getIEVersion();\r\n    if (ieVer && ieVer < 9) {\r\n        result = false;\r\n    }\r\n    if (result) {\r\n        // Disable if the XmlHttpRequest can't be extended or hooked\r\n        try {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr[strAjaxData] = {};\r\n            // Check that we can update the prototype\r\n            var theOpen = XMLHttpRequest[strPrototype].open;\r\n            XMLHttpRequest[strPrototype].open = theOpen;\r\n        }\r\n        catch (e) {\r\n            // We can't decorate the xhr object so disable monitoring\r\n            result = false;\r\n            _throwInternalCritical(ajaxMonitorInstance, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to enable XMLHttpRequest monitoring, extension is not supported\", {\r\n                exception: dumpObj(e)\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/** @Ignore */\r\nfunction _getFailedAjaxDiagnosticsMessage(xhr) {\r\n    var result = \"\";\r\n    try {\r\n        if (xhr && xhr[strAjaxData] && xhr[strAjaxData][_DYN_REQUEST_URL /* @min:%2erequestUrl */]) {\r\n            result += \"(url: '\" + xhr[strAjaxData][_DYN_REQUEST_URL /* @min:%2erequestUrl */] + \"')\";\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\r\n    _throwInternal(ajaxMonitorInstance[strDiagLog](), 1 /* eLoggingSeverity.CRITICAL */, msgId, message, properties, isUserAct);\r\n}\r\n/** @ignore */\r\nfunction _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\r\n    _throwInternal(ajaxMonitorInstance[strDiagLog](), 2 /* eLoggingSeverity.WARNING */, msgId, message, properties, isUserAct);\r\n}\r\n/** @Ignore */\r\nfunction _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {\r\n    // tslint:disable-next-line\r\n    return function (args) {\r\n        _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, {\r\n            ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(args[_DYN_INST /* @min:%2einst */]),\r\n            exception: dumpObj(args.err)\r\n        });\r\n    };\r\n}\r\nfunction _indexOf(value, match) {\r\n    if (value && match) {\r\n        return value.indexOf(match);\r\n    }\r\n    return -1;\r\n}\r\nfunction _addHandler(container, id, theFunc) {\r\n    var theHandler = {\r\n        id: id,\r\n        fn: theFunc\r\n    };\r\n    container.push(theHandler);\r\n    return {\r\n        remove: function () {\r\n            arrForEach(container, function (initializer, idx) {\r\n                if (initializer.id === theHandler.id) {\r\n                    container.splice(idx, 1);\r\n                    return -1;\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction _processDependencyContainer(core, container, details, message) {\r\n    var result = true;\r\n    arrForEach(container, function (theFunc, idx) {\r\n        try {\r\n            if (theFunc.fn.call(null, details) === false) {\r\n                result = false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            _throwInternal(core && core.logger, 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Dependency \" + message + \" [#\" + idx + \"] failed: \" + getExceptionName(e), { exception: dumpObj(e) }, true);\r\n        }\r\n    });\r\n    return result;\r\n}\r\nfunction _processDependencyListeners(listeners, core, ajaxData, xhr, input, init) {\r\n    var initializersCount = listeners[_DYN_LENGTH /* @min:%2elength */];\r\n    if (initializersCount > 0) {\r\n        var details = {\r\n            core: core,\r\n            xhr: xhr,\r\n            input: input,\r\n            init: init,\r\n            traceId: ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */],\r\n            spanId: ajaxData[_DYN_SPAN_ID /* @min:%2espanID */],\r\n            traceFlags: ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */],\r\n            context: ajaxData[_DYN_CONTEXT /* @min:%2econtext */] || {},\r\n            aborted: !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */]\r\n        };\r\n        _processDependencyContainer(core, listeners, details, \"listener\");\r\n        ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] = details[_DYN_TRACE_ID0 /* @min:%2etraceId */];\r\n        ajaxData[_DYN_SPAN_ID /* @min:%2espanID */] = details[_DYN_SPAN_ID1 /* @min:%2espanId */];\r\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = details[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n        ajaxData[_DYN_CONTEXT /* @min:%2econtext */] = details[_DYN_CONTEXT /* @min:%2econtext */];\r\n    }\r\n}\r\nvar BLOB_CORE = \"*.blob.core.\";\r\nexport var DfltAjaxCorrelationHeaderExDomains = deepFreeze([\r\n    BLOB_CORE + \"windows.net\",\r\n    BLOB_CORE + \"chinacloudapi.cn\",\r\n    BLOB_CORE + \"cloudapi.de\",\r\n    BLOB_CORE + \"usgovcloudapi.net\"\r\n]);\r\nvar _internalExcludeEndpoints = [\r\n    /https:\\/\\/[^\\/]*(\\.pipe\\.aria|aria\\.pipe|events\\.data|collector\\.azure)\\.[^\\/]+\\/(OneCollector\\/1|Collector\\/3)\\.0/i\r\n];\r\nfunction _getDefaultConfig() {\r\n    var config = {\r\n        maxAjaxCallsPerView: 500,\r\n        disableAjaxTracking: false,\r\n        disableFetchTracking: false,\r\n        excludeRequestFromAutoTrackingPatterns: undefined,\r\n        disableCorrelationHeaders: false,\r\n        distributedTracingMode: 1 /* eDistributedTracingModes.AI_AND_W3C */,\r\n        correlationHeaderExcludedDomains: DfltAjaxCorrelationHeaderExDomains,\r\n        correlationHeaderDomains: undefined,\r\n        correlationHeaderExcludePatterns: undefined,\r\n        appId: undefined,\r\n        enableCorsCorrelation: false,\r\n        enableRequestHeaderTracking: false,\r\n        enableResponseHeaderTracking: false,\r\n        enableAjaxErrorStatusText: false,\r\n        enableAjaxPerfTracking: false,\r\n        maxAjaxPerfLookupAttempts: 3,\r\n        ajaxPerfLookupDelay: 25,\r\n        ignoreHeaders: [\r\n            \"Authorization\",\r\n            \"X-API-Key\",\r\n            \"WWW-Authenticate\"\r\n        ],\r\n        addRequestContext: undefined,\r\n        addIntEndpoints: true\r\n    };\r\n    return config;\r\n}\r\nfunction _getEmptyConfig() {\r\n    var emptyConfig = _getDefaultConfig();\r\n    objForEachKey(emptyConfig, function (value) {\r\n        emptyConfig[value] = undefined;\r\n    });\r\n    return emptyConfig;\r\n}\r\nvar AjaxMonitor = /** @class */ (function (_super) {\r\n    __extends(AjaxMonitor, _super);\r\n    function AjaxMonitor() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AjaxMonitor.identifier;\r\n        _this.priority = 120;\r\n        var _fetchInitialized; // fetch monitoring initialized\r\n        var _xhrInitialized; // XHR monitoring initialized\r\n        var _currentWindowHost;\r\n        var _config;\r\n        var _enableRequestHeaderTracking;\r\n        var _enableAjaxErrorStatusText;\r\n        var _trackAjaxAttempts;\r\n        var _context;\r\n        var _isUsingW3CHeaders;\r\n        var _isUsingAIHeaders;\r\n        var _markPrefix;\r\n        var _enableAjaxPerfTracking;\r\n        var _maxAjaxCallsPerView;\r\n        var _enableResponseHeaderTracking;\r\n        var _disabledUrls;\r\n        var _disableAjaxTracking;\r\n        var _disableFetchTracking;\r\n        var _excludeRequestFromAutoTrackingPatterns;\r\n        var _addRequestContext;\r\n        var _evtNamespace;\r\n        var _dependencyHandlerId;\r\n        var _dependencyListeners;\r\n        var _dependencyInitializers;\r\n        dynamicProto(AjaxMonitor, _this, function (_self, _base) {\r\n            var _addHook = _base._addHook;\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (!_self.isInitialized()) {\r\n                    _base.initialize(config, core, extensions, pluginChain);\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"ajax\"), core && core.evtNamespace && core.evtNamespace());\r\n                    _populateDefaults(config);\r\n                    _instrumentXhr();\r\n                    _instrumentFetch();\r\n                    _populateContext();\r\n                }\r\n            };\r\n            _self._doTeardown = function () {\r\n                _initDefaults();\r\n            };\r\n            _self.trackDependencyData = function (dependency, properties) {\r\n                _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], null, dependency, properties);\r\n            };\r\n            _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */] = function (ajaxData, input, init, xhr) {\r\n                // Test Hook to allow the overriding of the location host\r\n                var currentWindowHost = _self[\"_currentWindowHost\"] || _currentWindowHost;\r\n                _processDependencyListeners(_dependencyListeners, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, xhr, input, init);\r\n                if (input) { // Fetch\r\n                    if (CorrelationIdHelper[_DYN_CAN_INCLUDE_CORRELAT3 /* @min:%2ecanIncludeCorrelationHeader */](_config, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\r\n                        if (!init) {\r\n                            init = {};\r\n                        }\r\n                        // init headers override original request headers\r\n                        // so, if they exist use only them, otherwise use request's because they should have been applied in the first place\r\n                        // not using original request headers will result in them being lost\r\n                        var headers = new Headers(init[_DYN_HEADERS /* @min:%2eheaders */] || (input instanceof Request ? (input[_DYN_HEADERS /* @min:%2eheaders */] || {}) : {}));\r\n                        if (_isUsingAIHeaders) {\r\n                            var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\r\n                            headers.set(RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\r\n                            }\r\n                        }\r\n                        var appId = _config[_DYN_APP_ID /* @min:%2eappId */] || (_context && _context[_DYN_APP_ID /* @min:%2eappId */]());\r\n                        if (appId) {\r\n                            headers.set(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\r\n                            }\r\n                        }\r\n                        if (_isUsingW3CHeaders) {\r\n                            var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                            if (isNullOrUndefined(traceFlags)) {\r\n                                traceFlags = 0x01;\r\n                            }\r\n                            var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\r\n                            headers.set(RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\r\n                            }\r\n                        }\r\n                        init[_DYN_HEADERS /* @min:%2eheaders */] = headers;\r\n                    }\r\n                    return init;\r\n                }\r\n                else if (xhr) { // XHR\r\n                    if (CorrelationIdHelper[_DYN_CAN_INCLUDE_CORRELAT3 /* @min:%2ecanIncludeCorrelationHeader */](_config, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\r\n                        if (_isUsingAIHeaders) {\r\n                            var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\r\n                            xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\r\n                            }\r\n                        }\r\n                        var appId = _config[_DYN_APP_ID /* @min:%2eappId */] || (_context && _context[_DYN_APP_ID /* @min:%2eappId */]());\r\n                        if (appId) {\r\n                            xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\r\n                            }\r\n                        }\r\n                        if (_isUsingW3CHeaders) {\r\n                            var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                            if (isNullOrUndefined(traceFlags)) {\r\n                                traceFlags = 0x01;\r\n                            }\r\n                            var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\r\n                            xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\r\n                            }\r\n                        }\r\n                    }\r\n                    return xhr;\r\n                }\r\n                return undefined;\r\n            };\r\n            _self[_DYN_TRACK_DEPENDENCY_DAT4 /* @min:%2etrackDependencyDataInternal */] = function (dependency, properties, systemProperties) {\r\n                if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {\r\n                    // Hack since expected format in w3c mode is |abc.def.\r\n                    // Non-w3c format is |abc.def\r\n                    // @todo Remove if better solution is available, e.g. handle in portal\r\n                    if ((_config[_DYN_DISTRIBUTED_TRACING_5 /* @min:%2edistributedTracingMode */] === 2 /* eDistributedTracingModes.W3C */\r\n                        || _config[_DYN_DISTRIBUTED_TRACING_5 /* @min:%2edistributedTracingMode */] === 1 /* eDistributedTracingModes.AI_AND_W3C */)\r\n                        && typeof dependency.id === \"string\" && dependency.id[dependency.id[_DYN_LENGTH /* @min:%2elength */] - 1] !== \".\") {\r\n                        dependency.id += \".\";\r\n                    }\r\n                    if (isNullOrUndefined(dependency[_DYN_START_TIME /* @min:%2estartTime */])) {\r\n                        dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\r\n                    }\r\n                    var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */].track(item);\r\n                }\r\n                else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {\r\n                    _throwInternalCritical(_self, 55 /* _eInternalMessageId.MaxAjaxPerPVExceeded */, \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\", true);\r\n                }\r\n                ++_trackAjaxAttempts;\r\n            };\r\n            _self.addDependencyListener = function (dependencyListener) {\r\n                return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);\r\n            };\r\n            _self.addDependencyInitializer = function (dependencyInitializer) {\r\n                return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);\r\n            };\r\n            function _initDefaults() {\r\n                var location = getLocation();\r\n                _fetchInitialized = false; // fetch monitoring initialized\r\n                _xhrInitialized = false; // XHR monitoring initialized\r\n                _currentWindowHost = location && location.host && location.host[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                _config = AjaxMonitor.getEmptyConfig();\r\n                _enableRequestHeaderTracking = false;\r\n                _enableAjaxErrorStatusText = false;\r\n                _trackAjaxAttempts = 0;\r\n                _context = null;\r\n                _isUsingW3CHeaders = false;\r\n                _isUsingAIHeaders = false;\r\n                _markPrefix = null;\r\n                _enableAjaxPerfTracking = false;\r\n                _maxAjaxCallsPerView = 0;\r\n                _enableResponseHeaderTracking = false;\r\n                _disabledUrls = {};\r\n                _disableAjaxTracking = false;\r\n                _disableFetchTracking = false;\r\n                _excludeRequestFromAutoTrackingPatterns = null;\r\n                _addRequestContext = null;\r\n                _evtNamespace = null;\r\n                _dependencyHandlerId = 0;\r\n                _dependencyListeners = [];\r\n                _dependencyInitializers = [];\r\n            }\r\n            function _populateDefaults(config) {\r\n                var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\r\n                // Reset to the empty config\r\n                _config = _getEmptyConfig();\r\n                var defaultConfig = _getDefaultConfig();\r\n                objForEachKey(defaultConfig, function (field, value) {\r\n                    _config[field] = ctx.getConfig(AjaxMonitor.identifier, field, value);\r\n                });\r\n                var distributedTracingMode = _config[_DYN_DISTRIBUTED_TRACING_5 /* @min:%2edistributedTracingMode */];\r\n                _enableRequestHeaderTracking = _config[_DYN_ENABLE_REQUEST_HEADE6 /* @min:%2eenableRequestHeaderTracking */];\r\n                _enableAjaxErrorStatusText = _config[_DYN_ENABLE_AJAX_ERROR_ST7 /* @min:%2eenableAjaxErrorStatusText */];\r\n                _enableAjaxPerfTracking = _config[_DYN_ENABLE_AJAX_PERF_TRA8 /* @min:%2eenableAjaxPerfTracking */];\r\n                _maxAjaxCallsPerView = _config[_DYN_MAX_AJAX_CALLS_PER_V9 /* @min:%2emaxAjaxCallsPerView */];\r\n                _enableResponseHeaderTracking = _config[_DYN_ENABLE_RESPONSE_HEAD10 /* @min:%2eenableResponseHeaderTracking */];\r\n                _excludeRequestFromAutoTrackingPatterns = [].concat(_config[_DYN_EXCLUDE_REQUEST_FROM11 /* @min:%2eexcludeRequestFromAutoTrackingPatterns */] || [], _config.addIntEndpoints !== false ? _internalExcludeEndpoints : []);\r\n                _addRequestContext = _config[_DYN_ADD_REQUEST_CONTEXT /* @min:%2eaddRequestContext */];\r\n                _isUsingAIHeaders = distributedTracingMode === 0 /* eDistributedTracingModes.AI */ || distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */;\r\n                _isUsingW3CHeaders = distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */ || distributedTracingMode === 2 /* eDistributedTracingModes.W3C */;\r\n                if (_enableAjaxPerfTracking) {\r\n                    var iKey = config.instrumentationKey || \"unkwn\";\r\n                    if (iKey[_DYN_LENGTH /* @min:%2elength */] > 5) {\r\n                        _markPrefix = AJAX_MONITOR_PREFIX + iKey.substring(iKey[_DYN_LENGTH /* @min:%2elength */] - 5) + \".\";\r\n                    }\r\n                    else {\r\n                        _markPrefix = AJAX_MONITOR_PREFIX + iKey + \".\";\r\n                    }\r\n                }\r\n                _disableAjaxTracking = !!_config[_DYN_DISABLE_AJAX_TRACKIN12 /* @min:%2edisableAjaxTracking */];\r\n                _disableFetchTracking = !!_config[_DYN_DISABLE_FETCH_TRACKI13 /* @min:%2edisableFetchTracking */];\r\n            }\r\n            function _populateContext() {\r\n                var propExt = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                if (propExt) {\r\n                    _context = propExt.plugin[_DYN_CONTEXT /* @min:%2econtext */]; // we could move IPropertiesPlugin to common as well\r\n                }\r\n            }\r\n            // discard the header if it's defined as ignoreHeaders in ICorrelationConfig\r\n            function _canIncludeHeaders(header) {\r\n                var rlt = true;\r\n                if (header || _config.ignoreHeaders) {\r\n                    arrForEach(_config.ignoreHeaders, (function (key) {\r\n                        if (key[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === header[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]()) {\r\n                            rlt = false;\r\n                            return -1;\r\n                        }\r\n                    }));\r\n                }\r\n                return rlt;\r\n            }\r\n            // Fetch Stuff\r\n            function _instrumentFetch() {\r\n                var fetch = _supportsFetch();\r\n                if (!fetch) {\r\n                    return;\r\n                }\r\n                var global = getGlobal();\r\n                var isPolyfill = fetch.polyfill;\r\n                if (!_disableFetchTracking && !_fetchInitialized) {\r\n                    _addHook(InstrumentFunc(global, STR_FETCH, {\r\n                        ns: _evtNamespace,\r\n                        // Add request hook\r\n                        req: function (callDetails, input, init) {\r\n                            var fetchData;\r\n                            if (!_disableFetchTracking && _fetchInitialized &&\r\n                                !_isDisabledRequest(null, input, init) &&\r\n                                // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates\r\n                                !(isPolyfill && _xhrInitialized)) {\r\n                                var ctx = callDetails.ctx();\r\n                                fetchData = _createFetchRecord(input, init);\r\n                                var newInit = _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](fetchData, input, init);\r\n                                if (newInit !== init) {\r\n                                    callDetails.set(1, newInit);\r\n                                }\r\n                                ctx.data = fetchData;\r\n                            }\r\n                        },\r\n                        rsp: function (callDetails, input) {\r\n                            if (!_disableFetchTracking) {\r\n                                var fetchData_1 = callDetails.ctx().data;\r\n                                if (fetchData_1) {\r\n                                    // Replace the result with the new promise from this code\r\n                                    callDetails.rslt = callDetails.rslt.then(function (response) {\r\n                                        _reportFetchMetrics(callDetails, (response || {})[_DYN_STATUS /* @min:%2estatus */], input, response, fetchData_1, function () {\r\n                                            var ajaxResponse = {\r\n                                                statusText: (response || {})[_DYN_STATUS_TEXT /* @min:%2estatusText */],\r\n                                                headerMap: null,\r\n                                                correlationContext: _getFetchCorrelationContext(response)\r\n                                            };\r\n                                            if (_enableResponseHeaderTracking && response) {\r\n                                                var responseHeaderMap_1 = {};\r\n                                                response.headers.forEach(function (value, name) {\r\n                                                    if (_canIncludeHeaders(name)) {\r\n                                                        responseHeaderMap_1[name] = value;\r\n                                                    }\r\n                                                });\r\n                                                ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_1;\r\n                                            }\r\n                                            return ajaxResponse;\r\n                                        });\r\n                                        return response;\r\n                                    })[\"catch\"](function (reason) {\r\n                                        _reportFetchMetrics(callDetails, 0, input, null, fetchData_1, null, { error: reason.message || dumpObj(reason) });\r\n                                        throw reason;\r\n                                    });\r\n                                }\r\n                            }\r\n                        },\r\n                        // Create an error callback to report any hook errors\r\n                        hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to monitor Window.fetch\" + ERROR_POSTFIX)\r\n                    }, true, isWebWorker()));\r\n                    _fetchInitialized = true;\r\n                }\r\n                else if (isPolyfill) {\r\n                    // If fetch is a polyfill we need to capture the request to ensure that we correctly track\r\n                    // disabled request URLS (i.e. internal urls) to ensure we don't end up in a constant loop\r\n                    // of reporting ourselves, for example React Native uses a polyfill for fetch\r\n                    // Note: Polyfill implementations that don't support the \"poyyfill\" tag are not supported\r\n                    // the workaround is to add a polyfill property to your fetch implementation before initializing\r\n                    // App Insights\r\n                    _addHook(InstrumentFunc(global, STR_FETCH, {\r\n                        ns: _evtNamespace,\r\n                        req: function (callDetails, input, init) {\r\n                            // Just call so that we record any disabled URL\r\n                            _isDisabledRequest(null, input, init);\r\n                        }\r\n                    }));\r\n                }\r\n                if (isPolyfill) {\r\n                    // retag the instrumented fetch with the same polyfill settings this is mostly for testing\r\n                    // But also supports multiple App Insights usages\r\n                    global[STR_FETCH].polyfill = isPolyfill;\r\n                }\r\n            }\r\n            function _hookProto(target, funcName, callbacks) {\r\n                _addHook(InstrumentProto(target, funcName, callbacks));\r\n            }\r\n            function _instrumentXhr() {\r\n                if (_supportsAjaxMonitoring(_self) && !_disableAjaxTracking && !_xhrInitialized) {\r\n                    // Instrument open\r\n                    _hookProto(XMLHttpRequest, \"open\", {\r\n                        ns: _evtNamespace,\r\n                        req: function (args, method, url, async) {\r\n                            if (!_disableAjaxTracking) {\r\n                                var xhr = args[_DYN_INST /* @min:%2einst */];\r\n                                var ajaxData = xhr[strAjaxData];\r\n                                if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, true)) {\r\n                                    if (!ajaxData || !ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */]) {\r\n                                        // Only create a single ajaxData (even when multiple AI instances are running)\r\n                                        _openHandler(xhr, method, url, async);\r\n                                    }\r\n                                    // always attach to the on ready state change (required for handling multiple instances)\r\n                                    _attachToOnReadyStateChange(xhr);\r\n                                }\r\n                            }\r\n                        },\r\n                        hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, ERROR_HEADER + \".open\" + ERROR_POSTFIX)\r\n                    });\r\n                    // Instrument send\r\n                    _hookProto(XMLHttpRequest, \"send\", {\r\n                        ns: _evtNamespace,\r\n                        req: function (args, context) {\r\n                            if (!_disableAjaxTracking) {\r\n                                var xhr = args[_DYN_INST /* @min:%2einst */];\r\n                                var ajaxData = xhr[strAjaxData];\r\n                                if (_isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */]) {\r\n                                    _createMarkId(\"xhr\", ajaxData);\r\n                                    ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\r\n                                    _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](ajaxData, undefined, undefined, xhr);\r\n                                    ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */] = true;\r\n                                }\r\n                            }\r\n                        },\r\n                        hkErr: _createErrorCallbackFunc(_self, 17 /* _eInternalMessageId.FailedMonitorAjaxSend */, ERROR_HEADER + ERROR_POSTFIX)\r\n                    });\r\n                    // Instrument abort\r\n                    _hookProto(XMLHttpRequest, \"abort\", {\r\n                        ns: _evtNamespace,\r\n                        req: function (args) {\r\n                            if (!_disableAjaxTracking) {\r\n                                var xhr = args[_DYN_INST /* @min:%2einst */];\r\n                                var ajaxData = xhr[strAjaxData];\r\n                                if (_isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */]) {\r\n                                    ajaxData[_DYN_ABORTED /* @min:%2eaborted */] = 1;\r\n                                    ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */] = true;\r\n                                }\r\n                            }\r\n                        },\r\n                        hkErr: _createErrorCallbackFunc(_self, 13 /* _eInternalMessageId.FailedMonitorAjaxAbort */, ERROR_HEADER + \".abort\" + ERROR_POSTFIX)\r\n                    });\r\n                    // Instrument setRequestHeader\r\n                    _hookProto(XMLHttpRequest, \"setRequestHeader\", {\r\n                        ns: _evtNamespace,\r\n                        req: function (args, header, value) {\r\n                            if (!_disableAjaxTracking && _enableRequestHeaderTracking) {\r\n                                var xhr = args[_DYN_INST /* @min:%2einst */];\r\n                                if (_isMonitoredXhrInstance(xhr) && _canIncludeHeaders(header)) {\r\n                                    xhr[strAjaxData][_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][header] = value;\r\n                                }\r\n                            }\r\n                        },\r\n                        hkErr: _createErrorCallbackFunc(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, ERROR_HEADER + \".setRequestHeader\" + ERROR_POSTFIX)\r\n                    });\r\n                    _xhrInitialized = true;\r\n                }\r\n            }\r\n            function _isDisabledRequest(xhr, request, init) {\r\n                var isDisabled = false;\r\n                var theUrl = ((!isString(request) ? (request || {}).url || \"\" : request) || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                // check excludeRequestFromAutoTrackingPatterns before stripping off any query string\r\n                arrForEach(_excludeRequestFromAutoTrackingPatterns, function (regex) {\r\n                    var theRegex = regex;\r\n                    if (isString(regex)) {\r\n                        theRegex = new RegExp(regex);\r\n                    }\r\n                    if (!isDisabled) {\r\n                        isDisabled = theRegex.test(theUrl);\r\n                    }\r\n                });\r\n                // if request url matches with exclude regex pattern, return true and no need to check for headers\r\n                if (isDisabled) {\r\n                    return isDisabled;\r\n                }\r\n                var idx = _indexOf(theUrl, \"?\");\r\n                var idx2 = _indexOf(theUrl, \"#\");\r\n                if (idx === -1 || (idx2 !== -1 && idx2 < idx)) {\r\n                    idx = idx2;\r\n                }\r\n                if (idx !== -1) {\r\n                    // Strip off any Query string\r\n                    theUrl = theUrl.substring(0, idx);\r\n                }\r\n                // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\r\n                if (!isNullOrUndefined(xhr)) {\r\n                    // Look on the XMLHttpRequest of the URL string value\r\n                    isDisabled = xhr[DisabledPropertyName] === true || theUrl[DisabledPropertyName] === true;\r\n                }\r\n                else if (!isNullOrUndefined(request)) { // fetch\r\n                    // Look for DisabledPropertyName in either Request or RequestInit\r\n                    isDisabled = (typeof request === \"object\" ? request[DisabledPropertyName] === true : false) ||\r\n                        (init ? init[DisabledPropertyName] === true : false);\r\n                }\r\n                // Also add extra check just in case the XHR or fetch objects where not decorated with the DisableProperty due to sealing or freezing\r\n                if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {\r\n                    isDisabled = true;\r\n                }\r\n                if (isDisabled) {\r\n                    // Add the disabled url if not present\r\n                    if (!_disabledUrls[theUrl]) {\r\n                        _disabledUrls[theUrl] = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    // Check to see if the url is listed as disabled\r\n                    if (_disabledUrls[theUrl]) {\r\n                        isDisabled = true;\r\n                    }\r\n                }\r\n                return isDisabled;\r\n            }\r\n            /// <summary>Verifies that particalar instance of XMLHttpRequest needs to be monitored</summary>\r\n            /// <param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\r\n            /// <returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\r\n            function _isMonitoredXhrInstance(xhr, excludeAjaxDataValidation) {\r\n                var ajaxValidation = true;\r\n                var initialized = _xhrInitialized;\r\n                if (!isNullOrUndefined(xhr)) {\r\n                    ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(xhr[strAjaxData]);\r\n                }\r\n                // checking to see that all interested functions on xhr were instrumented\r\n                return initialized\r\n                    // checking on ajaxData to see that it was not removed in user code\r\n                    && ajaxValidation;\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                // Fall back\r\n                if (!distributedTraceCtx && _context && _context.telemetryTrace) {\r\n                    distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            function _openHandler(xhr, method, url, async) {\r\n                var _a;\r\n                var distributedTraceCtx = _getDistributedTraceCtx();\r\n                var traceID = (distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]()) || generateW3CId();\r\n                var spanID = generateW3CId().substr(0, 16);\r\n                var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\r\n                ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\r\n                ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\r\n                ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = url;\r\n                ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */] = true;\r\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = {};\r\n                ajaxData.async = async;\r\n                ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\r\n                xhr[strAjaxData] = ajaxData;\r\n            }\r\n            function _attachToOnReadyStateChange(xhr) {\r\n                xhr[strAjaxData].xhrMonitoringState[_DYN_STATE_CHANGE_ATTACHE14 /* @min:%2estateChangeAttached */] = eventOn(xhr, \"readystatechange\", function () {\r\n                    try {\r\n                        if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr)) {\r\n                            _onAjaxComplete(xhr);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        var exceptionText = dumpObj(e);\r\n                        // ignore messages with c00c023f, as this a known IE9 XHR abort issue\r\n                        if (!exceptionText || _indexOf(exceptionText[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), \"c00c023f\") === -1) {\r\n                            _throwInternalCritical(_self, 16 /* _eInternalMessageId.FailedMonitorAjaxRSC */, ERROR_HEADER + \" 'readystatechange' event handler\" + ERROR_POSTFIX, {\r\n                                ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),\r\n                                exception: exceptionText\r\n                            });\r\n                        }\r\n                    }\r\n                }, _evtNamespace);\r\n            }\r\n            function _getResponseText(xhr) {\r\n                try {\r\n                    var responseType = xhr.responseType;\r\n                    if (responseType === \"\" || responseType === \"text\") {\r\n                        // As per the specification responseText is only valid if the type is an empty string or \"text\"\r\n                        return xhr[_DYN_RESPONSE_TEXT /* @min:%2eresponseText */];\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // This shouldn't happen because of the above check -- but just in case, so just ignore\r\n                }\r\n                return null;\r\n            }\r\n            function _onAjaxComplete(xhr) {\r\n                var ajaxData = xhr[strAjaxData];\r\n                ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_STATUS /* @min:%2estatus */] = xhr[_DYN_STATUS /* @min:%2estatus */];\r\n                function _reportXhrError(e, failedProps) {\r\n                    var errorProps = failedProps || {};\r\n                    errorProps[\"ajaxDiagnosticsMessage\"] = _getFailedAjaxDiagnosticsMessage(xhr);\r\n                    if (e) {\r\n                        errorProps[\"exception\"] = dumpObj(e);\r\n                    }\r\n                    _throwInternalWarning(_self, 14 /* _eInternalMessageId.FailedMonitorAjaxDur */, FAILED_TO_CALCULATE_DURATION_ERROR + \"ajax call\" + ERROR_NOT_SENT, errorProps);\r\n                }\r\n                _findPerfResourceEntry(\"xmlhttprequest\", ajaxData, function () {\r\n                    try {\r\n                        var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Ajax\", _enableRequestHeaderTracking, function () {\r\n                            var ajaxResponse = {\r\n                                statusText: xhr[_DYN_STATUS_TEXT /* @min:%2estatusText */],\r\n                                headerMap: null,\r\n                                correlationContext: _getAjaxCorrelationContext(xhr),\r\n                                type: xhr.responseType,\r\n                                responseText: _getResponseText(xhr),\r\n                                response: xhr[_DYN_RESPONSE /* @min:%2eresponse */]\r\n                            };\r\n                            if (_enableResponseHeaderTracking) {\r\n                                var headers = xhr[_DYN_GET_ALL_RESPONSE_HEA16 /* @min:%2egetAllResponseHeaders */]();\r\n                                if (headers) {\r\n                                    // xhr.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string or null\r\n                                    // the regex converts the header string into an array of individual headers\r\n                                    var arr = strTrim(headers).split(/[\\r\\n]+/);\r\n                                    var responseHeaderMap_2 = {};\r\n                                    arrForEach(arr, function (line) {\r\n                                        var parts = line.split(\": \");\r\n                                        var header = parts.shift();\r\n                                        var value = parts.join(\": \");\r\n                                        if (_canIncludeHeaders(header)) {\r\n                                            responseHeaderMap_2[header] = value;\r\n                                        }\r\n                                    });\r\n                                    ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_2;\r\n                                }\r\n                            }\r\n                            return ajaxResponse;\r\n                        });\r\n                        var properties = void 0;\r\n                        try {\r\n                            if (!!_addRequestContext) {\r\n                                properties = _addRequestContext({ status: xhr[_DYN_STATUS /* @min:%2estatus */], xhr: xhr });\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\r\n                        }\r\n                        if (dependency) {\r\n                            if (properties !== undefined) {\r\n                                dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\r\n                            }\r\n                            var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\r\n                            _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\r\n                        }\r\n                        else {\r\n                            _reportXhrError(null, {\r\n                                requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\r\n                                responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */]\r\n                            });\r\n                        }\r\n                    }\r\n                    finally {\r\n                        // cleanup telemetry data\r\n                        try {\r\n                            xhr[strAjaxData] = null;\r\n                        }\r\n                        catch (e) {\r\n                            // May throw in environments that prevent extension or freeze xhr\r\n                        }\r\n                    }\r\n                }, function (e) {\r\n                    _reportXhrError(e, null);\r\n                });\r\n            }\r\n            function _getAjaxCorrelationContext(xhr) {\r\n                try {\r\n                    var responseHeadersString = xhr[_DYN_GET_ALL_RESPONSE_HEA16 /* @min:%2egetAllResponseHeaders */]();\r\n                    if (responseHeadersString !== null) {\r\n                        var index = _indexOf(responseHeadersString[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), RequestHeaders[8 /* eRequestHeaders.requestContextHeaderLowerCase */]);\r\n                        if (index !== -1) {\r\n                            var responseHeader = xhr.getResponseHeader(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\r\n                            return CorrelationIdHelper[_DYN_GET_CORRELATION_CONT17 /* @min:%2egetCorrelationContext */](responseHeader);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, {\r\n                        ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),\r\n                        exception: dumpObj(e)\r\n                    });\r\n                }\r\n            }\r\n            function _createMarkId(type, ajaxData) {\r\n                if (ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] && _markPrefix && _enableAjaxPerfTracking) {\r\n                    var performance_1 = getPerformance();\r\n                    if (performance_1 && isFunction(performance_1.mark)) {\r\n                        _markCount++;\r\n                        var markId = _markPrefix + type + \"#\" + _markCount;\r\n                        performance_1.mark(markId);\r\n                        var entries = performance_1.getEntriesByName(markId);\r\n                        if (entries && entries[_DYN_LENGTH /* @min:%2elength */] === 1) {\r\n                            ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */] = entries[0];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {\r\n                var perfMark = ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */];\r\n                var performance = getPerformance();\r\n                var maxAttempts = _config.maxAjaxPerfLookupAttempts;\r\n                var retryDelay = _config[_DYN_AJAX_PERF_LOOKUP_DEL18 /* @min:%2eajaxPerfLookupDelay */];\r\n                var requestUrl = ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */];\r\n                var attempt = 0;\r\n                (function locateResourceTiming() {\r\n                    try {\r\n                        if (performance && perfMark) {\r\n                            attempt++;\r\n                            var perfTiming = null;\r\n                            var entries = performance.getEntries();\r\n                            for (var lp = entries[_DYN_LENGTH /* @min:%2elength */] - 1; lp >= 0; lp--) {\r\n                                var entry = entries[lp];\r\n                                if (entry) {\r\n                                    if (entry.entryType === \"resource\") {\r\n                                        if (entry.initiatorType === initiatorType &&\r\n                                            (_indexOf(entry[_DYN_NAME /* @min:%2ename */], requestUrl) !== -1 || _indexOf(requestUrl, entry[_DYN_NAME /* @min:%2ename */]) !== -1)) {\r\n                                            perfTiming = entry;\r\n                                        }\r\n                                    }\r\n                                    else if (entry.entryType === \"mark\" && entry[_DYN_NAME /* @min:%2ename */] === perfMark[_DYN_NAME /* @min:%2ename */]) {\r\n                                        // We hit the start event\r\n                                        ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] = perfTiming;\r\n                                        break;\r\n                                    }\r\n                                    if (entry[_DYN_START_TIME /* @min:%2estartTime */] < perfMark[_DYN_START_TIME /* @min:%2estartTime */] - 1000) {\r\n                                        // Fallback to try and reduce the time spent looking for the perf entry\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!perfMark || // - we don't have a perfMark or\r\n                            ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] || // - we have not found the perf entry or\r\n                            attempt >= maxAttempts || // - we have tried too many attempts or\r\n                            ajaxData.async === false) { // - this is a sync request\r\n                            if (perfMark && isFunction(performance.clearMarks)) {\r\n                                // Remove the mark so we don't fill up the performance resources too much\r\n                                performance.clearMarks(perfMark[_DYN_NAME /* @min:%2ename */]);\r\n                            }\r\n                            ajaxData.perfAttempts = attempt;\r\n                            // just continue and report the track event\r\n                            trackCallback();\r\n                        }\r\n                        else {\r\n                            // We need to wait for the browser to populate the window.performance entry\r\n                            // This needs to be at least 1ms as waiting <= 1 (on firefox) is not enough time for fetch or xhr,\r\n                            // this is a scheduling issue for the browser implementation\r\n                            setTimeout(locateResourceTiming, retryDelay);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        reportError(e);\r\n                    }\r\n                })();\r\n            }\r\n            function _createFetchRecord(input, init) {\r\n                var _a;\r\n                var distributedTraceCtx = _getDistributedTraceCtx();\r\n                var traceID = (distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]()) || generateW3CId();\r\n                var spanID = generateW3CId().substr(0, 16);\r\n                var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\r\n                ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\r\n                ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\r\n                if (input instanceof Request) {\r\n                    ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = input ? input.url : \"\";\r\n                }\r\n                else {\r\n                    ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = input;\r\n                }\r\n                var method = \"GET\";\r\n                if (init && init[_DYN_METHOD /* @min:%2emethod */]) {\r\n                    method = init[_DYN_METHOD /* @min:%2emethod */];\r\n                }\r\n                else if (input && input instanceof Request) {\r\n                    method = input[_DYN_METHOD /* @min:%2emethod */];\r\n                }\r\n                ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\r\n                var requestHeaders = {};\r\n                if (_enableRequestHeaderTracking) {\r\n                    var headers = new Headers((init ? init[_DYN_HEADERS /* @min:%2eheaders */] : 0) || (input instanceof Request ? (input[_DYN_HEADERS /* @min:%2eheaders */] || {}) : {}));\r\n                    headers.forEach(function (value, key) {\r\n                        if (_canIncludeHeaders(key)) {\r\n                            requestHeaders[key] = value;\r\n                        }\r\n                    });\r\n                }\r\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = requestHeaders;\r\n                _createMarkId(STR_FETCH, ajaxData);\r\n                return ajaxData;\r\n            }\r\n            function _getFailedFetchDiagnosticsMessage(input) {\r\n                var result = \"\";\r\n                try {\r\n                    if (!isNullOrUndefined(input)) {\r\n                        if (typeof (input) === \"string\") {\r\n                            result += \"(url: '\".concat(input, \"')\");\r\n                        }\r\n                        else {\r\n                            result += \"(url: '\".concat(input.url, \"')\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternalCritical(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to grab failed fetch diagnostics message\", { exception: dumpObj(e) });\r\n                }\r\n                return result;\r\n            }\r\n            function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {\r\n                if (!ajaxData) {\r\n                    return;\r\n                }\r\n                function _reportFetchError(msgId, e, failedProps) {\r\n                    var errorProps = failedProps || {};\r\n                    errorProps[\"fetchDiagnosticsMessage\"] = _getFailedFetchDiagnosticsMessage(input);\r\n                    if (e) {\r\n                        errorProps[\"exception\"] = dumpObj(e);\r\n                    }\r\n                    _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + \"fetch call\" + ERROR_NOT_SENT, errorProps);\r\n                }\r\n                ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_STATUS /* @min:%2estatus */] = status;\r\n                _findPerfResourceEntry(STR_FETCH, ajaxData, function () {\r\n                    var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Fetch\", _enableRequestHeaderTracking, getResponse);\r\n                    var properties;\r\n                    try {\r\n                        if (!!_addRequestContext) {\r\n                            properties = _addRequestContext({ status: status, request: input, response: response });\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\r\n                    }\r\n                    if (dependency) {\r\n                        if (properties !== undefined) {\r\n                            dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\r\n                        }\r\n                        var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\r\n                        _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\r\n                    }\r\n                    else {\r\n                        _reportFetchError(14 /* _eInternalMessageId.FailedMonitorAjaxDur */, null, {\r\n                            requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\r\n                            responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI15 /* @min:%2eresponseFinishedTime */]\r\n                        });\r\n                    }\r\n                }, function (e) {\r\n                    _reportFetchError(18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, e, null);\r\n                });\r\n            }\r\n            function _getFetchCorrelationContext(response) {\r\n                if (response && response[_DYN_HEADERS /* @min:%2eheaders */]) {\r\n                    try {\r\n                        var responseHeader = response[_DYN_HEADERS /* @min:%2eheaders */].get(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\r\n                        return CorrelationIdHelper[_DYN_GET_CORRELATION_CONT17 /* @min:%2egetCorrelationContext */](responseHeader);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, {\r\n                            fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response),\r\n                            exception: dumpObj(e)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {\r\n                var result = true;\r\n                var initializersCount = initializers[_DYN_LENGTH /* @min:%2elength */];\r\n                if (initializersCount > 0) {\r\n                    var details = {\r\n                        item: dependency,\r\n                        properties: properties,\r\n                        sysProperties: systemProperties,\r\n                        context: ajaxData ? ajaxData[_DYN_CONTEXT /* @min:%2econtext */] : null,\r\n                        aborted: ajaxData ? !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */] : false\r\n                    };\r\n                    result = _processDependencyContainer(core, initializers, details, \"initializer\");\r\n                }\r\n                if (result) {\r\n                    _self[_DYN_TRACK_DEPENDENCY_DAT4 /* @min:%2etrackDependencyDataInternal */](dependency, properties, systemProperties);\r\n                }\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    AjaxMonitor.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.prototype.processTelemetry = function (item, itemCtx) {\r\n        this.processNext(item, itemCtx);\r\n    };\r\n    /**\r\n     * Logs dependency call\r\n     * @param dependencyData dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyData = function (dependency, properties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.prototype.includeCorrelationHeaders = function (ajaxData, input, init, xhr) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers.\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    AjaxMonitor.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    AjaxMonitor.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Protected function to allow sub classes the chance to add additional properties to the dependency event\r\n     * before it's sent. This function calls track, so sub-classes must call this function after they have\r\n     * populated their properties.\r\n     * @param dependencyData dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyDataInternal = function (dependency, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.identifier = \"AjaxDependencyPlugin\";\r\n    AjaxMonitor.getDefaultConfig = _getDefaultConfig;\r\n    AjaxMonitor.getEmptyConfig = _getEmptyConfig;\r\n    return AjaxMonitor;\r\n}(BaseTelemetryPlugin));\r\nexport { AjaxMonitor };\r\n//# sourceMappingURL=ajax.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}