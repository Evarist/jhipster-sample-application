{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { _throwInternal, dumpObj, getExceptionName, getGlobal, getGlobalInst, isNullOrUndefined, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\nimport { StorageType } from \"./Enums\";\nimport { _DYN_REMOVE_ITEM, _DYN_TO_STRING } from \"./__DynamicConstants\";\nvar _canUseLocalStorage = undefined;\nvar _canUseSessionStorage = undefined;\n/**\r\n * Gets the localStorage object if available\r\n * @return {Storage} - Returns the storage object if available else returns null\r\n */\nfunction _getLocalStorageObject() {\n  if (utlCanUseLocalStorage()) {\n    return _getVerifiedStorageObject(StorageType.LocalStorage);\n  }\n  return null;\n}\n/**\r\n * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n * @param storageType Type of storage\r\n * @return {Storage} Returns storage object verified that it is usable\r\n */\nfunction _getVerifiedStorageObject(storageType) {\n  try {\n    if (isNullOrUndefined(getGlobal())) {\n      return null;\n    }\n    var uid = new Date()[_DYN_TO_STRING /* @min:%2etoString */]();\n    var storage = getGlobalInst(storageType === StorageType.LocalStorage ? \"localStorage\" : \"sessionStorage\");\n    storage.setItem(uid, uid);\n    var fail = storage.getItem(uid) !== uid;\n    storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](uid);\n    if (!fail) {\n      return storage;\n    }\n  } catch (exception) {\n    // eslint-disable-next-line no-empty\n  }\n  return null;\n}\n/**\r\n * Gets the sessionStorage object if available\r\n * @return {Storage} - Returns the storage object if available else returns null\r\n */\nfunction _getSessionStorageObject() {\n  if (utlCanUseSessionStorage()) {\n    return _getVerifiedStorageObject(StorageType.SessionStorage);\n  }\n  return null;\n}\n/**\r\n * Disables the global SDK usage of local or session storage if available\r\n */\nexport function utlDisableStorage() {\n  _canUseLocalStorage = false;\n  _canUseSessionStorage = false;\n}\n/**\r\n * Re-enables the global SDK usage of local or session storage if available\r\n */\nexport function utlEnableStorage() {\n  _canUseLocalStorage = utlCanUseLocalStorage(true);\n  _canUseSessionStorage = utlCanUseSessionStorage(true);\n}\n/**\r\n * Returns whether LocalStorage can be used, if the reset parameter is passed a true this will override\r\n * any previous disable calls.\r\n * @param reset - Should the usage be reset and determined only based on whether LocalStorage is available\r\n */\nexport function utlCanUseLocalStorage(reset) {\n  if (reset || _canUseLocalStorage === undefined) {\n    _canUseLocalStorage = !!_getVerifiedStorageObject(StorageType.LocalStorage);\n  }\n  return _canUseLocalStorage;\n}\nexport function utlGetLocalStorage(logger, name) {\n  var storage = _getLocalStorageObject();\n  if (storage !== null) {\n    try {\n      return storage.getItem(name);\n    } catch (e) {\n      _canUseLocalStorage = false;\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 1 /* _eInternalMessageId.BrowserCannotReadLocalStorage */, \"Browser failed read of local storage. \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return null;\n}\nexport function utlSetLocalStorage(logger, name, data) {\n  var storage = _getLocalStorageObject();\n  if (storage !== null) {\n    try {\n      storage.setItem(name, data);\n      return true;\n    } catch (e) {\n      _canUseLocalStorage = false;\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 3 /* _eInternalMessageId.BrowserCannotWriteLocalStorage */, \"Browser failed write to local storage. \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return false;\n}\nexport function utlRemoveStorage(logger, name) {\n  var storage = _getLocalStorageObject();\n  if (storage !== null) {\n    try {\n      storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name);\n      return true;\n    } catch (e) {\n      _canUseLocalStorage = false;\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 5 /* _eInternalMessageId.BrowserFailedRemovalFromLocalStorage */, \"Browser failed removal of local storage item. \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return false;\n}\nexport function utlCanUseSessionStorage(reset) {\n  if (reset || _canUseSessionStorage === undefined) {\n    _canUseSessionStorage = !!_getVerifiedStorageObject(StorageType.SessionStorage);\n  }\n  return _canUseSessionStorage;\n}\nexport function utlGetSessionStorageKeys() {\n  var keys = [];\n  if (utlCanUseSessionStorage()) {\n    objForEachKey(getGlobalInst(\"sessionStorage\"), function (key) {\n      keys.push(key);\n    });\n  }\n  return keys;\n}\nexport function utlGetSessionStorage(logger, name) {\n  var storage = _getSessionStorageObject();\n  if (storage !== null) {\n    try {\n      return storage.getItem(name);\n    } catch (e) {\n      _canUseSessionStorage = false;\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 2 /* _eInternalMessageId.BrowserCannotReadSessionStorage */, \"Browser failed read of session storage. \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return null;\n}\nexport function utlSetSessionStorage(logger, name, data) {\n  var storage = _getSessionStorageObject();\n  if (storage !== null) {\n    try {\n      storage.setItem(name, data);\n      return true;\n    } catch (e) {\n      _canUseSessionStorage = false;\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 4 /* _eInternalMessageId.BrowserCannotWriteSessionStorage */, \"Browser failed write to session storage. \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return false;\n}\nexport function utlRemoveSessionStorage(logger, name) {\n  var storage = _getSessionStorageObject();\n  if (storage !== null) {\n    try {\n      storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name);\n      return true;\n    } catch (e) {\n      _canUseSessionStorage = false;\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 6 /* _eInternalMessageId.BrowserFailedRemovalFromSessionStorage */, \"Browser failed removal of session storage item. \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["_throwInternal","dumpObj","getExceptionName","getGlobal","getGlobalInst","isNullOrUndefined","objForEachKey","StorageType","_DYN_REMOVE_ITEM","_DYN_TO_STRING","_canUseLocalStorage","undefined","_canUseSessionStorage","_getLocalStorageObject","utlCanUseLocalStorage","_getVerifiedStorageObject","LocalStorage","storageType","uid","Date","storage","setItem","fail","getItem","exception","_getSessionStorageObject","utlCanUseSessionStorage","SessionStorage","utlDisableStorage","utlEnableStorage","reset","utlGetLocalStorage","logger","name","e","utlSetLocalStorage","data","utlRemoveStorage","utlGetSessionStorageKeys","keys","key","push","utlGetSessionStorage","utlSetSessionStorage","utlRemoveSessionStorage"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _throwInternal, dumpObj, getExceptionName, getGlobal, getGlobalInst, isNullOrUndefined, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\r\nimport { StorageType } from \"./Enums\";\r\nimport { _DYN_REMOVE_ITEM, _DYN_TO_STRING } from \"./__DynamicConstants\";\r\nvar _canUseLocalStorage = undefined;\r\nvar _canUseSessionStorage = undefined;\r\n/**\r\n * Gets the localStorage object if available\r\n * @return {Storage} - Returns the storage object if available else returns null\r\n */\r\nfunction _getLocalStorageObject() {\r\n    if (utlCanUseLocalStorage()) {\r\n        return _getVerifiedStorageObject(StorageType.LocalStorage);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n * @param storageType Type of storage\r\n * @return {Storage} Returns storage object verified that it is usable\r\n */\r\nfunction _getVerifiedStorageObject(storageType) {\r\n    try {\r\n        if (isNullOrUndefined(getGlobal())) {\r\n            return null;\r\n        }\r\n        var uid = (new Date)[_DYN_TO_STRING /* @min:%2etoString */]();\r\n        var storage = getGlobalInst(storageType === StorageType.LocalStorage ? \"localStorage\" : \"sessionStorage\");\r\n        storage.setItem(uid, uid);\r\n        var fail = storage.getItem(uid) !== uid;\r\n        storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](uid);\r\n        if (!fail) {\r\n            return storage;\r\n        }\r\n    }\r\n    catch (exception) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Gets the sessionStorage object if available\r\n * @return {Storage} - Returns the storage object if available else returns null\r\n */\r\nfunction _getSessionStorageObject() {\r\n    if (utlCanUseSessionStorage()) {\r\n        return _getVerifiedStorageObject(StorageType.SessionStorage);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Disables the global SDK usage of local or session storage if available\r\n */\r\nexport function utlDisableStorage() {\r\n    _canUseLocalStorage = false;\r\n    _canUseSessionStorage = false;\r\n}\r\n/**\r\n * Re-enables the global SDK usage of local or session storage if available\r\n */\r\nexport function utlEnableStorage() {\r\n    _canUseLocalStorage = utlCanUseLocalStorage(true);\r\n    _canUseSessionStorage = utlCanUseSessionStorage(true);\r\n}\r\n/**\r\n * Returns whether LocalStorage can be used, if the reset parameter is passed a true this will override\r\n * any previous disable calls.\r\n * @param reset - Should the usage be reset and determined only based on whether LocalStorage is available\r\n */\r\nexport function utlCanUseLocalStorage(reset) {\r\n    if (reset || _canUseLocalStorage === undefined) {\r\n        _canUseLocalStorage = !!_getVerifiedStorageObject(StorageType.LocalStorage);\r\n    }\r\n    return _canUseLocalStorage;\r\n}\r\nexport function utlGetLocalStorage(logger, name) {\r\n    var storage = _getLocalStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            return storage.getItem(name);\r\n        }\r\n        catch (e) {\r\n            _canUseLocalStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 1 /* _eInternalMessageId.BrowserCannotReadLocalStorage */, \"Browser failed read of local storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function utlSetLocalStorage(logger, name, data) {\r\n    var storage = _getLocalStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage.setItem(name, data);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseLocalStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 3 /* _eInternalMessageId.BrowserCannotWriteLocalStorage */, \"Browser failed write to local storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function utlRemoveStorage(logger, name) {\r\n    var storage = _getLocalStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseLocalStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 5 /* _eInternalMessageId.BrowserFailedRemovalFromLocalStorage */, \"Browser failed removal of local storage item. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function utlCanUseSessionStorage(reset) {\r\n    if (reset || _canUseSessionStorage === undefined) {\r\n        _canUseSessionStorage = !!_getVerifiedStorageObject(StorageType.SessionStorage);\r\n    }\r\n    return _canUseSessionStorage;\r\n}\r\nexport function utlGetSessionStorageKeys() {\r\n    var keys = [];\r\n    if (utlCanUseSessionStorage()) {\r\n        objForEachKey(getGlobalInst(\"sessionStorage\"), function (key) {\r\n            keys.push(key);\r\n        });\r\n    }\r\n    return keys;\r\n}\r\nexport function utlGetSessionStorage(logger, name) {\r\n    var storage = _getSessionStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            return storage.getItem(name);\r\n        }\r\n        catch (e) {\r\n            _canUseSessionStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 2 /* _eInternalMessageId.BrowserCannotReadSessionStorage */, \"Browser failed read of session storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function utlSetSessionStorage(logger, name, data) {\r\n    var storage = _getSessionStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage.setItem(name, data);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseSessionStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 4 /* _eInternalMessageId.BrowserCannotWriteSessionStorage */, \"Browser failed write to session storage. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function utlRemoveSessionStorage(logger, name) {\r\n    var storage = _getSessionStorageObject();\r\n    if (storage !== null) {\r\n        try {\r\n            storage[_DYN_REMOVE_ITEM /* @min:%2eremoveItem */](name);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            _canUseSessionStorage = false;\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 6 /* _eInternalMessageId.BrowserFailedRemovalFromSessionStorage */, \"Browser failed removal of session storage item. \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=StorageHelperFuncs.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}