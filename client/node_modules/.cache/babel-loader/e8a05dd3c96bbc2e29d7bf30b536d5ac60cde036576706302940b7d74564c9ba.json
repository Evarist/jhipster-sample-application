{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { _legacyCookieMgr } from \"@microsoft/applicationinsights-core-js\";\nimport { AppInsightsDeprecated } from \"./ApplicationInsightsDeprecated\";\nimport { Initialization as ApplicationInsights } from \"./Initialization\";\nimport { _DYN_LOAD_APP_INSIGHTS, _DYN_UPDATE_SNIPPET_DEFIN0 } from \"./__DynamicConstants\";\nvar ApplicationInsightsContainer = /** @class */function () {\n  function ApplicationInsightsContainer() {}\n  ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\n    var initialization = new ApplicationInsights(snippet);\n    var legacyMode = version >= 2 ? false : true;\n    // Side effect is to create, initialize and listen to the CoreUtils._canUseCookies changes\n    // Called here to support backward compatibility\n    _legacyCookieMgr();\n    // Two target scenarios:\n    // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\n    // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\n    // and all api signatures are expected to map to new SDK. Note new snippet specifies version\n    if (!legacyMode) {\n      initialization[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */](snippet);\n      initialization[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */](legacyMode);\n      return initialization; // default behavior with new snippet\n    } else {\n      var legacy = new AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint\n      legacy[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */](snippet);\n      initialization[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */](legacyMode);\n      return legacy;\n    }\n  };\n  return ApplicationInsightsContainer;\n}();\nexport { ApplicationInsightsContainer };","map":{"version":3,"names":["_legacyCookieMgr","AppInsightsDeprecated","Initialization","ApplicationInsights","_DYN_LOAD_APP_INSIGHTS","_DYN_UPDATE_SNIPPET_DEFIN0","ApplicationInsightsContainer","getAppInsights","snippet","version","initialization","legacyMode","legacy"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js"],"sourcesContent":["import { _legacyCookieMgr } from \"@microsoft/applicationinsights-core-js\";\r\nimport { AppInsightsDeprecated } from \"./ApplicationInsightsDeprecated\";\r\nimport { Initialization as ApplicationInsights } from \"./Initialization\";\r\nimport { _DYN_LOAD_APP_INSIGHTS, _DYN_UPDATE_SNIPPET_DEFIN0 } from \"./__DynamicConstants\";\r\nvar ApplicationInsightsContainer = /** @class */ (function () {\r\n    function ApplicationInsightsContainer() {\r\n    }\r\n    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\r\n        var initialization = new ApplicationInsights(snippet);\r\n        var legacyMode = version >= 2 ? false : true;\r\n        // Side effect is to create, initialize and listen to the CoreUtils._canUseCookies changes\r\n        // Called here to support backward compatibility\r\n        _legacyCookieMgr();\r\n        // Two target scenarios:\r\n        // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\r\n        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\r\n        // and all api signatures are expected to map to new SDK. Note new snippet specifies version\r\n        if (!legacyMode) {\r\n            initialization[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */](snippet);\r\n            initialization[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */](legacyMode);\r\n            return initialization; // default behavior with new snippet\r\n        }\r\n        else {\r\n            var legacy = new AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint\r\n            legacy[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */](snippet);\r\n            initialization[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */](legacyMode);\r\n            return legacy;\r\n        }\r\n    };\r\n    return ApplicationInsightsContainer;\r\n}());\r\nexport { ApplicationInsightsContainer };\r\n//# sourceMappingURL=ApplicationInsightsContainer.js.map"],"mappings":";;;;AAAA,SAAAA,gBAAA;AACA,SAAAC,qBAAA;AACA,SAAAC,cAAA,IAAAC,mBAAA;AACA,SAAAC,sBAAA,EAAAC,0BAAA;AACA,IAAAC,4BAAA;EACA,SAAAA,6BAAA,GACA;EACAA,4BAAA,CAAAC,cAAA,aAAAC,OAAA,EAAAC,OAAA;IACA,IAAAC,cAAA,OAAAP,mBAAA,CAAAK,OAAA;IACA,IAAAG,UAAA,GAAAF,OAAA;IACA;IACA;IACAT,gBAAA;IACA;IACA;IACA;IACA;IACA,KAAAW,UAAA;MACAD,cAAA,CAAAL,0BAAA,yCAAAG,OAAA;MACAE,cAAA,CAAAN,sBAAA,gCAAAO,UAAA;MACA,OAAAD,cAAA;IACA,OACA;MACA,IAAAE,MAAA,OAAAX,qBAAA,CAAAO,OAAA,EAAAE,cAAA;MACAE,MAAA,CAAAP,0BAAA,yCAAAG,OAAA;MACAE,cAAA,CAAAN,sBAAA,gCAAAO,UAAA;MACA,OAAAC,MAAA;IACA;EACA;EACA,OAAAN,4BAAA;AACA;AACA,SAAAA,4BAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}