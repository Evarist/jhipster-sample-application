{"ast":null,"code":"import _defineProperty from\"/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import{ReactPlugin}from\"@microsoft/applicationinsights-react-js\";import{ApplicationInsights}from\"@microsoft/applicationinsights-web\";import{DistributedTracingModes}from\"@microsoft/applicationinsights-common\";import{createBrowserHistory}from\"history\";import config from\"../config\";var plugin=new ReactPlugin();var applicationInsights;export var reactPlugin=plugin;export var getApplicationInsights=function getApplicationInsights(){var browserHistory=createBrowserHistory({window:window});if(applicationInsights){return applicationInsights;}var ApplicationInsightsConfig={config:{connectionString:config.observability.connectionString,enableCorsCorrelation:true,distributedTracingMode:DistributedTracingModes.W3C,extensions:[plugin],extensionConfig:_defineProperty({},plugin.identifier,{history:browserHistory})}};applicationInsights=new ApplicationInsights(ApplicationInsightsConfig);try{applicationInsights.loadAppInsights();applicationInsights.addTelemetryInitializer(function(telemetry){if(!telemetry){return;}if(telemetry.tags){telemetry.tags[\"ai.cloud.role\"]=\"webui\";}});}catch(err){// TODO - proper logging for web\nconsole.error(\"ApplicationInsights setup failed, ensure environment variable 'REACT_APP_APPLICATIONINSIGHTS_CONNECTION_STRING' has been set.\",err);}return applicationInsights;};export var trackEvent=function trackEvent(eventName,properties){if(!applicationInsights){return;}applicationInsights.trackEvent({name:eventName,properties:properties});};","map":{"version":3,"names":["ReactPlugin","ApplicationInsights","DistributedTracingModes","createBrowserHistory","config","plugin","applicationInsights","reactPlugin","getApplicationInsights","browserHistory","window","ApplicationInsightsConfig","connectionString","observability","enableCorsCorrelation","distributedTracingMode","W3C","extensions","extensionConfig","_defineProperty","identifier","history","loadAppInsights","addTelemetryInitializer","telemetry","tags","err","console","error","trackEvent","eventName","properties","name"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/src/services/telemetryService.ts"],"sourcesContent":["import { ReactPlugin } from \"@microsoft/applicationinsights-react-js\";\nimport {\n  ApplicationInsights,\n  Snippet,\n  ITelemetryItem,\n} from \"@microsoft/applicationinsights-web\";\nimport { DistributedTracingModes } from \"@microsoft/applicationinsights-common\";\nimport { createBrowserHistory } from \"history\";\nimport config from \"../config\";\n\nconst plugin = new ReactPlugin();\nlet applicationInsights: ApplicationInsights;\nexport const reactPlugin = plugin;\n\nexport const getApplicationInsights = (): ApplicationInsights => {\n  const browserHistory = createBrowserHistory({ window: window });\n  if (applicationInsights) {\n    return applicationInsights;\n  }\n\n  const ApplicationInsightsConfig: Snippet = {\n    config: {\n      connectionString: config.observability.connectionString,\n      enableCorsCorrelation: true,\n      distributedTracingMode: DistributedTracingModes.W3C,\n      extensions: [plugin],\n      extensionConfig: {\n        [plugin.identifier]: { history: browserHistory },\n      },\n    },\n  };\n\n  applicationInsights = new ApplicationInsights(ApplicationInsightsConfig);\n  try {\n    applicationInsights.loadAppInsights();\n    applicationInsights.addTelemetryInitializer((telemetry: ITelemetryItem) => {\n      if (!telemetry) {\n        return;\n      }\n      if (telemetry.tags) {\n        telemetry.tags[\"ai.cloud.role\"] = \"webui\";\n      }\n    });\n  } catch (err) {\n    // TODO - proper logging for web\n    console.error(\n      \"ApplicationInsights setup failed, ensure environment variable 'REACT_APP_APPLICATIONINSIGHTS_CONNECTION_STRING' has been set.\",\n      err,\n    );\n  }\n\n  return applicationInsights;\n};\n\nexport const trackEvent = (\n  eventName: string,\n  properties?: { [key: string]: unknown },\n): void => {\n  if (!applicationInsights) {\n    return;\n  }\n\n  applicationInsights.trackEvent({\n    name: eventName,\n    properties: properties,\n  });\n};\n"],"mappings":"8JAAA,OAASA,WAAW,KAAQ,yCAAyC,CACrE,OACEC,mBAAmB,KAGd,oCAAoC,CAC3C,OAASC,uBAAuB,KAAQ,uCAAuC,CAC/E,OAASC,oBAAoB,KAAQ,SAAS,CAC9C,MAAO,CAAAC,MAAM,KAAM,WAAW,CAE9B,GAAM,CAAAC,MAAM,CAAG,GAAI,CAAAL,WAAW,EAAE,CAChC,GAAI,CAAAM,mBAAwC,CAC5C,MAAO,IAAM,CAAAC,WAAW,CAAGF,MAAM,CAEjC,MAAO,IAAM,CAAAG,sBAAsB,CAAG,QAAzB,CAAAA,sBAAsBA,CAAA,CAA8B,CAC/D,GAAM,CAAAC,cAAc,CAAGN,oBAAoB,CAAC,CAAEO,MAAM,CAAEA,MAAO,CAAC,CAAC,CAC/D,GAAIJ,mBAAmB,CAAE,CACvB,MAAO,CAAAA,mBAAmB,CAC5B,CAEA,GAAM,CAAAK,yBAAkC,CAAG,CACzCP,MAAM,CAAE,CACNQ,gBAAgB,CAAER,MAAM,CAACS,aAAa,CAACD,gBAAgB,CACvDE,qBAAqB,CAAE,IAAI,CAC3BC,sBAAsB,CAAEb,uBAAuB,CAACc,GAAG,CACnDC,UAAU,CAAE,CAACZ,MAAM,CAAC,CACpBa,eAAe,CAAAC,eAAA,IACZd,MAAM,CAACe,UAAU,CAAG,CAAEC,OAAO,CAAEZ,cAAe,CAAC,CAEpD,CACF,CAAC,CAEDH,mBAAmB,CAAG,GAAI,CAAAL,mBAAmB,CAACU,yBAAyB,CAAC,CACxE,GAAI,CACFL,mBAAmB,CAACgB,eAAe,EAAE,CACrChB,mBAAmB,CAACiB,uBAAuB,CAAC,SAACC,SAAyB,CAAK,CACzE,GAAI,CAACA,SAAS,CAAE,CACd,OACF,CACA,GAAIA,SAAS,CAACC,IAAI,CAAE,CAClBD,SAAS,CAACC,IAAI,CAAC,eAAe,CAAC,CAAG,OAAO,CAC3C,CACF,CAAC,CAAC,CACJ,CAAE,MAAOC,GAAG,CAAE,CACZ;AACAC,OAAO,CAACC,KAAK,CACX,+HAA+H,CAC/HF,GAAG,CACJ,CACH,CAEA,MAAO,CAAApB,mBAAmB,CAC5B,CAAC,CAED,MAAO,IAAM,CAAAuB,UAAU,CAAG,QAAb,CAAAA,UAAUA,CACrBC,SAAiB,CACjBC,UAAuC,CAC9B,CACT,GAAI,CAACzB,mBAAmB,CAAE,CACxB,OACF,CAEAA,mBAAmB,CAACuB,UAAU,CAAC,CAC7BG,IAAI,CAAEF,SAAS,CACfC,UAAU,CAAEA,UACd,CAAC,CAAC,CACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}