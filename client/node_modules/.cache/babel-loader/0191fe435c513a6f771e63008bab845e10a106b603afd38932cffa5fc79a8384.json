{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web Analytics, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { dateTimeUtilsDuration, msToTimeSpan } from \"@microsoft/applicationinsights-common\";\nimport { _throwInternal, getNavigator, getPerformance, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_CONNECT_END, _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI17, _DYN_IS_PERFORMANCE_TIMIN16, _DYN_IS_PERFORMANCE_TIMIN19, _DYN_LENGTH, _DYN_LOAD_EVENT_END, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P12, _DYN_REQUEST_START, _DYN_RESPONSE_END, _DYN_RESPONSE_START, _DYN_SHOULD_COLLECT_DURAT18 } from \"../../__DynamicConstants\";\nvar MAX_DURATION_ALLOWED = 3600000; // 1h\nvar botAgentNames = [\"googlebot\", \"adsbot-google\", \"apis-google\", \"mediapartners-google\"];\nfunction _isPerformanceTimingSupported() {\n  var perf = getPerformance();\n  return perf && !!perf.timing;\n}\nfunction _isPerformanceNavigationTimingSupported() {\n  var perf = getPerformance();\n  return perf && perf.getEntriesByType && perf.getEntriesByType(\"navigation\")[_DYN_LENGTH /* @min:%2elength */] > 0;\n}\nfunction _isPerformanceTimingDataReady() {\n  var perf = getPerformance();\n  var timing = perf ? perf.timing : 0;\n  return timing && timing.domainLookupStart > 0 && timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */] > 0 && timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */] > 0 && timing[_DYN_REQUEST_START /* @min:%2erequestStart */] > 0 && timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */] > 0 && timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */] > 0 && timing[_DYN_CONNECT_END /* @min:%2econnectEnd */] > 0 && timing.domLoading > 0;\n}\nfunction _getPerformanceTiming() {\n  if (_isPerformanceTimingSupported()) {\n    return getPerformance().timing;\n  }\n  return null;\n}\nfunction _getPerformanceNavigationTiming() {\n  if (_isPerformanceNavigationTimingSupported()) {\n    return getPerformance()[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\")[0];\n  }\n  return null;\n}\n/**\r\n* This method tells if given durations should be excluded from collection.\r\n*/\nfunction _shouldCollectDuration() {\n  var durations = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    durations[_i] = arguments[_i];\n  }\n  var _navigator = getNavigator() || {};\n  // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en\n  var userAgent = _navigator.userAgent;\n  var isGoogleBot = false;\n  if (userAgent) {\n    for (var i = 0; i < botAgentNames[_DYN_LENGTH /* @min:%2elength */]; i++) {\n      isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i]) !== -1;\n    }\n  }\n  if (isGoogleBot) {\n    // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.\n    return false;\n  } else {\n    // for other page views, don't report if it's outside of a reasonable range\n    for (var i = 0; i < durations[_DYN_LENGTH /* @min:%2elength */]; i++) {\n      if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/**\r\n * Class encapsulates sending page view performance telemetry.\r\n */\nvar PageViewPerformanceManager = /** @class */function () {\n  function PageViewPerformanceManager(core) {\n    var _this = this;\n    var _logger = safeGetLogger(core);\n    dynamicProto(PageViewPerformanceManager, this, function (_self) {\n      _self[_DYN_POPULATE_PAGE_VIEW_P12 /* @min:%2epopulatePageViewPerformanceEvent */] = function (pageViewPerformance) {\n        pageViewPerformance.isValid = false;\n        /*\r\n         * http://www.w3.org/TR/navigation-timing/#processing-model\r\n         *  |-navigationStart\r\n         *  |             |-connectEnd\r\n         *  |             ||-requestStart\r\n         *  |             ||             |-responseStart\r\n         *  |             ||             |              |-responseEnd\r\n         *  |             ||             |              |\r\n         *  |             ||             |              |         |-loadEventEnd\r\n         *  |---network---||---request---|---response---|---dom---|\r\n         *  |--------------------------total----------------------|\r\n         *\r\n         *  total = The difference between the load event of the current document is completed and the first recorded timestamp of the performance entry : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#duration\r\n         *  network = Redirect time + App Cache + DNS lookup time + TCP connection time\r\n         *  request = Request time : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#request_time\r\n         *  response = Response time\r\n         *  dom = Document load time : https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info\r\n         *      = Document processing time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#document_processing\r\n         *      + Loading time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#loading\r\n         */\n        var navigationTiming = _getPerformanceNavigationTiming();\n        var timing = _getPerformanceTiming();\n        var total = 0;\n        var network = 0;\n        var request = 0;\n        var response = 0;\n        var dom = 0;\n        if (navigationTiming || timing) {\n          if (navigationTiming) {\n            total = navigationTiming[_DYN_DURATION /* @min:%2eduration */];\n            /**\r\n             * support both cases:\r\n             * - startTime is always zero: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming\r\n             * - for older browsers where the startTime is not zero\r\n             */\n            network = navigationTiming.startTime === 0 ? navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */] : dateTimeUtilsDuration(navigationTiming.startTime, navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\n            request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\n            response = dateTimeUtilsDuration(navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */], navigationTiming[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\n            dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\n          } else {\n            total = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\n            network = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\n            request = dateTimeUtilsDuration(timing.requestStart, timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\n            response = dateTimeUtilsDuration(timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */], timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\n            dom = dateTimeUtilsDuration(timing.responseEnd, timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\n          }\n\n          if (total === 0) {\n            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 10 /* _eInternalMessageId.ErrorPVCalc */, \"error calculating page view performance.\", {\n              total: total,\n              network: network,\n              request: request,\n              response: response,\n              dom: dom\n            });\n          } else if (!_this[_DYN_SHOULD_COLLECT_DURAT18 /* @min:%2eshouldCollectDuration */](total, network, request, response, dom)) {\n            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 45 /* _eInternalMessageId.InvalidDurationValue */, \"Invalid page load duration value. Browser perf data won't be sent.\", {\n              total: total,\n              network: network,\n              request: request,\n              response: response,\n              dom: dom\n            });\n          } else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {\n            // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\n            // in this case, don't report client performance from this page\n            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 8 /* _eInternalMessageId.ClientPerformanceMathError */, \"client performance math error.\", {\n              total: total,\n              network: network,\n              request: request,\n              response: response,\n              dom: dom\n            });\n          } else {\n            pageViewPerformance.durationMs = total;\n            // // convert to timespans\n            pageViewPerformance.perfTotal = pageViewPerformance[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(total);\n            pageViewPerformance.networkConnect = msToTimeSpan(network);\n            pageViewPerformance.sentRequest = msToTimeSpan(request);\n            pageViewPerformance.receivedResponse = msToTimeSpan(response);\n            pageViewPerformance.domProcessing = msToTimeSpan(dom);\n            pageViewPerformance.isValid = true;\n          }\n        }\n      };\n      _self[_DYN_GET_PERFORMANCE_TIMI17 /* @min:%2egetPerformanceTiming */] = _getPerformanceTiming;\n      _self[_DYN_IS_PERFORMANCE_TIMIN16 /* @min:%2eisPerformanceTimingSupported */] = _isPerformanceTimingSupported;\n      _self[_DYN_IS_PERFORMANCE_TIMIN19 /* @min:%2eisPerformanceTimingDataReady */] = _isPerformanceTimingDataReady;\n      _self[_DYN_SHOULD_COLLECT_DURAT18 /* @min:%2eshouldCollectDuration */] = _shouldCollectDuration;\n    });\n  }\n  // Removed Stub for PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent.\n  // Removed Stub for PageViewPerformanceManager.prototype.getPerformanceTiming.\n  // Removed Stub for PageViewPerformanceManager.prototype.isPerformanceTimingSupported.\n  // Removed Stub for PageViewPerformanceManager.prototype.isPerformanceTimingDataReady.\n  // Removed Stub for PageViewPerformanceManager.prototype.shouldCollectDuration.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  PageViewPerformanceManager.__ieDyn = 1;\n  return PageViewPerformanceManager;\n}();\nexport { PageViewPerformanceManager };","map":{"version":3,"names":["dynamicProto","dateTimeUtilsDuration","msToTimeSpan","_throwInternal","getNavigator","getPerformance","safeGetLogger","_DYN_CONNECT_END","_DYN_DURATION","_DYN_GET_ENTRIES_BY_TYPE","_DYN_GET_PERFORMANCE_TIMI17","_DYN_IS_PERFORMANCE_TIMIN16","_DYN_IS_PERFORMANCE_TIMIN19","_DYN_LENGTH","_DYN_LOAD_EVENT_END","_DYN_NAVIGATION_START","_DYN_POPULATE_PAGE_VIEW_P12","_DYN_REQUEST_START","_DYN_RESPONSE_END","_DYN_RESPONSE_START","_DYN_SHOULD_COLLECT_DURAT18","MAX_DURATION_ALLOWED","botAgentNames","_isPerformanceTimingSupported","perf","timing","_isPerformanceNavigationTimingSupported","getEntriesByType","_isPerformanceTimingDataReady","domainLookupStart","domLoading","_getPerformanceTiming","_getPerformanceNavigationTiming","_shouldCollectDuration","durations","_i","arguments","length","_navigator","userAgent","isGoogleBot","i","toLowerCase","indexOf","PageViewPerformanceManager","core","_this","_logger","_self","pageViewPerformance","isValid","navigationTiming","total","network","request","response","dom","startTime","requestStart","responseEnd","Math","floor","durationMs","perfTotal","networkConnect","sentRequest","receivedResponse","domProcessing"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateTimeUtilsDuration, msToTimeSpan } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, getNavigator, getPerformance, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_CONNECT_END, _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI17, _DYN_IS_PERFORMANCE_TIMIN16, _DYN_IS_PERFORMANCE_TIMIN19, _DYN_LENGTH, _DYN_LOAD_EVENT_END, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P12, _DYN_REQUEST_START, _DYN_RESPONSE_END, _DYN_RESPONSE_START, _DYN_SHOULD_COLLECT_DURAT18 } from \"../../__DynamicConstants\";\r\nvar MAX_DURATION_ALLOWED = 3600000; // 1h\r\nvar botAgentNames = [\"googlebot\", \"adsbot-google\", \"apis-google\", \"mediapartners-google\"];\r\nfunction _isPerformanceTimingSupported() {\r\n    var perf = getPerformance();\r\n    return perf && !!perf.timing;\r\n}\r\nfunction _isPerformanceNavigationTimingSupported() {\r\n    var perf = getPerformance();\r\n    return perf && perf.getEntriesByType && perf.getEntriesByType(\"navigation\")[_DYN_LENGTH /* @min:%2elength */] > 0;\r\n}\r\nfunction _isPerformanceTimingDataReady() {\r\n    var perf = getPerformance();\r\n    var timing = perf ? perf.timing : 0;\r\n    return timing\r\n        && timing.domainLookupStart > 0\r\n        && timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */] > 0\r\n        && timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */] > 0\r\n        && timing[_DYN_REQUEST_START /* @min:%2erequestStart */] > 0\r\n        && timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */] > 0\r\n        && timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */] > 0\r\n        && timing[_DYN_CONNECT_END /* @min:%2econnectEnd */] > 0\r\n        && timing.domLoading > 0;\r\n}\r\nfunction _getPerformanceTiming() {\r\n    if (_isPerformanceTimingSupported()) {\r\n        return getPerformance().timing;\r\n    }\r\n    return null;\r\n}\r\nfunction _getPerformanceNavigationTiming() {\r\n    if (_isPerformanceNavigationTimingSupported()) {\r\n        return getPerformance()[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\")[0];\r\n    }\r\n    return null;\r\n}\r\n/**\r\n* This method tells if given durations should be excluded from collection.\r\n*/\r\nfunction _shouldCollectDuration() {\r\n    var durations = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        durations[_i] = arguments[_i];\r\n    }\r\n    var _navigator = getNavigator() || {};\r\n    // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en\r\n    var userAgent = _navigator.userAgent;\r\n    var isGoogleBot = false;\r\n    if (userAgent) {\r\n        for (var i = 0; i < botAgentNames[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i]) !== -1;\r\n        }\r\n    }\r\n    if (isGoogleBot) {\r\n        // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.\r\n        return false;\r\n    }\r\n    else {\r\n        // for other page views, don't report if it's outside of a reasonable range\r\n        for (var i = 0; i < durations[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Class encapsulates sending page view performance telemetry.\r\n */\r\nvar PageViewPerformanceManager = /** @class */ (function () {\r\n    function PageViewPerformanceManager(core) {\r\n        var _this = this;\r\n        var _logger = safeGetLogger(core);\r\n        dynamicProto(PageViewPerformanceManager, this, function (_self) {\r\n            _self[_DYN_POPULATE_PAGE_VIEW_P12 /* @min:%2epopulatePageViewPerformanceEvent */] = function (pageViewPerformance) {\r\n                pageViewPerformance.isValid = false;\r\n                /*\r\n                 * http://www.w3.org/TR/navigation-timing/#processing-model\r\n                 *  |-navigationStart\r\n                 *  |             |-connectEnd\r\n                 *  |             ||-requestStart\r\n                 *  |             ||             |-responseStart\r\n                 *  |             ||             |              |-responseEnd\r\n                 *  |             ||             |              |\r\n                 *  |             ||             |              |         |-loadEventEnd\r\n                 *  |---network---||---request---|---response---|---dom---|\r\n                 *  |--------------------------total----------------------|\r\n                 *\r\n                 *  total = The difference between the load event of the current document is completed and the first recorded timestamp of the performance entry : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#duration\r\n                 *  network = Redirect time + App Cache + DNS lookup time + TCP connection time\r\n                 *  request = Request time : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#request_time\r\n                 *  response = Response time\r\n                 *  dom = Document load time : https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info\r\n                 *      = Document processing time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#document_processing\r\n                 *      + Loading time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#loading\r\n                 */\r\n                var navigationTiming = _getPerformanceNavigationTiming();\r\n                var timing = _getPerformanceTiming();\r\n                var total = 0;\r\n                var network = 0;\r\n                var request = 0;\r\n                var response = 0;\r\n                var dom = 0;\r\n                if (navigationTiming || timing) {\r\n                    if (navigationTiming) {\r\n                        total = navigationTiming[_DYN_DURATION /* @min:%2eduration */];\r\n                        /**\r\n                         * support both cases:\r\n                         * - startTime is always zero: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming\r\n                         * - for older browsers where the startTime is not zero\r\n                         */\r\n                        network = navigationTiming.startTime === 0 ? navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */] : dateTimeUtilsDuration(navigationTiming.startTime, navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\r\n                        request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\r\n                        response = dateTimeUtilsDuration(navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */], navigationTiming[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\r\n                        dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                    }\r\n                    else {\r\n                        total = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                        network = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\r\n                        request = dateTimeUtilsDuration(timing.requestStart, timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\r\n                        response = dateTimeUtilsDuration(timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */], timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\r\n                        dom = dateTimeUtilsDuration(timing.responseEnd, timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                    }\r\n                    if (total === 0) {\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 10 /* _eInternalMessageId.ErrorPVCalc */, \"error calculating page view performance.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else if (!_this[_DYN_SHOULD_COLLECT_DURAT18 /* @min:%2eshouldCollectDuration */](total, network, request, response, dom)) {\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 45 /* _eInternalMessageId.InvalidDurationValue */, \"Invalid page load duration value. Browser perf data won't be sent.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {\r\n                        // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\r\n                        // in this case, don't report client performance from this page\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 8 /* _eInternalMessageId.ClientPerformanceMathError */, \"client performance math error.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else {\r\n                        pageViewPerformance.durationMs = total;\r\n                        // // convert to timespans\r\n                        pageViewPerformance.perfTotal = pageViewPerformance[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(total);\r\n                        pageViewPerformance.networkConnect = msToTimeSpan(network);\r\n                        pageViewPerformance.sentRequest = msToTimeSpan(request);\r\n                        pageViewPerformance.receivedResponse = msToTimeSpan(response);\r\n                        pageViewPerformance.domProcessing = msToTimeSpan(dom);\r\n                        pageViewPerformance.isValid = true;\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_GET_PERFORMANCE_TIMI17 /* @min:%2egetPerformanceTiming */] = _getPerformanceTiming;\r\n            _self[_DYN_IS_PERFORMANCE_TIMIN16 /* @min:%2eisPerformanceTimingSupported */] = _isPerformanceTimingSupported;\r\n            _self[_DYN_IS_PERFORMANCE_TIMIN19 /* @min:%2eisPerformanceTimingDataReady */] = _isPerformanceTimingDataReady;\r\n            _self[_DYN_SHOULD_COLLECT_DURAT18 /* @min:%2eshouldCollectDuration */] = _shouldCollectDuration;\r\n        });\r\n    }\r\n    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n    * Returns true is window performance timing API is supported, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    /**\r\n    * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.\r\n    * Returns true if ready, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    /**\r\n    * This method tells if given durations should be excluded from collection.\r\n    */\r\n    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\r\n        var durations = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            durations[_i] = arguments[_i];\r\n        }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    return PageViewPerformanceManager;\r\n}());\r\nexport { PageViewPerformanceManager };\r\n//# sourceMappingURL=PageViewPerformanceManager.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}