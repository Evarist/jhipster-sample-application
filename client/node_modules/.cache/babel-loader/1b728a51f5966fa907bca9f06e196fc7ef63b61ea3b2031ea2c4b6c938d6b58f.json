{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement, getDateFromTimeSelection } from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport { format } from '../../Utilities';\nimport { useControllableValue, useConst } from '@fluentui/react-hooks';\nvar REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nvar REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nvar REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nvar REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\nvar TIME_LOWER_BOUND = 0;\nvar TIME_UPPER_BOUND = 23;\nvar getDefaultStrings = function getDefaultStrings(useHour12, showSeconds) {\n  var hourUnits = useHour12 ? '12-hour' : '24-hour';\n  var timeFormat = \"hh:mm\" + (showSeconds ? ':ss' : '') + (useHour12 ? ' AP' : '');\n  var invalidInputErrorMessage = \"Enter a valid time in the \" + hourUnits + \" format: \" + timeFormat;\n  var timeOutOfBoundsErrorMessage = \"Please enter a time within the range of {0} and {1}\";\n  return {\n    invalidInputErrorMessage: invalidInputErrorMessage,\n    timeOutOfBoundsErrorMessage: timeOutOfBoundsErrorMessage\n  };\n};\n/**\n * {@docCategory TimePicker}\n */\nexport var TimePicker = function TimePicker(_a) {\n  var label = _a.label,\n    _b = _a.increments,\n    increments = _b === void 0 ? 30 : _b,\n    _c = _a.showSeconds,\n    showSeconds = _c === void 0 ? false : _c,\n    _d = _a.allowFreeform,\n    allowFreeform = _d === void 0 ? true : _d,\n    _e = _a.useHour12,\n    useHour12 = _e === void 0 ? false : _e,\n    timeRange = _a.timeRange,\n    _f = _a.strings,\n    strings = _f === void 0 ? getDefaultStrings(useHour12, showSeconds) : _f,\n    defaultValue = _a.defaultValue,\n    value = _a.value,\n    dateAnchor = _a.dateAnchor,\n    onChange = _a.onChange,\n    onFormatDate = _a.onFormatDate,\n    onValidateUserInput = _a.onValidateUserInput,\n    onValidationResult = _a.onValidationResult,\n    rest = __rest(_a, [\"label\", \"increments\", \"showSeconds\", \"allowFreeform\", \"useHour12\", \"timeRange\", \"strings\", \"defaultValue\", \"value\", \"dateAnchor\", \"onChange\", \"onFormatDate\", \"onValidateUserInput\", \"onValidationResult\"]);\n  var _g = React.useState(''),\n    comboBoxText = _g[0],\n    setComboBoxText = _g[1];\n  var _h = React.useState(),\n    selectedKey = _h[0],\n    setSelectedKey = _h[1];\n  var _j = React.useState(''),\n    errorMessage = _j[0],\n    setErrorMessage = _j[1];\n  var fallbackDateAnchor = useConst(new Date());\n  var _k = useControllableValue(value, defaultValue),\n    selectedTime = _k[0],\n    setSelectedTime = _k[1];\n  var optionsCount = getDropdownOptionsCount(increments, timeRange);\n  var internalDateAnchor = dateAnchor || value || defaultValue || fallbackDateAnchor;\n  var dateStartAnchor = React.useMemo(function () {\n    return getDateAnchor(internalDateAnchor, 'start', increments, timeRange);\n  }, [internalDateAnchor, increments, timeRange]);\n  var dateEndAnchor = React.useMemo(function () {\n    return getDateAnchor(internalDateAnchor, 'end', increments, timeRange);\n  }, [internalDateAnchor, increments, timeRange]);\n  var timePickerOptions = React.useMemo(function () {\n    var optionsList = Array(optionsCount);\n    for (var i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n    return optionsList.map(function (_, index) {\n      var option = addMinutes(dateStartAnchor, increments * index);\n      option.setSeconds(0);\n      var formattedTimeString = formatTimeString(option, showSeconds, useHour12);\n      var optionText = onFormatDate ? onFormatDate(option) : formattedTimeString;\n      return {\n        key: formattedTimeString,\n        text: optionText\n      };\n    });\n  }, [dateStartAnchor, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n  React.useEffect(function () {\n    if (selectedTime && !isNaN(selectedTime.valueOf())) {\n      var formattedTimeString_1 = formatTimeString(selectedTime, showSeconds, useHour12);\n      var comboboxOption = timePickerOptions.find(function (option) {\n        return option.key === formattedTimeString_1;\n      });\n      setSelectedKey(comboboxOption === null || comboboxOption === void 0 ? void 0 : comboboxOption.key);\n      setComboBoxText(comboboxOption ? comboboxOption.text : formattedTimeString_1);\n    } else {\n      setSelectedKey(null);\n    }\n  }, [selectedTime, timePickerOptions, onFormatDate, showSeconds, useHour12]);\n  var onInputChange = React.useCallback(function (ev, option, _index, input) {\n    var validateUserInput = function validateUserInput(userInput) {\n      var errorMessageToDisplay = '';\n      var regex;\n      if (useHour12) {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n      } else {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n      }\n      if (!regex.test(userInput)) {\n        errorMessageToDisplay = strings.invalidInputErrorMessage;\n      } else if (timeRange && strings.timeOutOfBoundsErrorMessage) {\n        var optionDate = getDateFromTimeSelection(useHour12, dateStartAnchor, userInput);\n        if (optionDate < dateStartAnchor || optionDate > dateEndAnchor) {\n          errorMessageToDisplay = format(strings.timeOutOfBoundsErrorMessage, dateStartAnchor.toString(), dateEndAnchor.toString());\n        }\n      }\n      return errorMessageToDisplay;\n    };\n    var errorMessageToDisplay = '';\n    if (input) {\n      if (allowFreeform && !option) {\n        if (!onFormatDate) {\n          // Validate only if user did not add onFormatDate\n          errorMessageToDisplay = validateUserInput(input);\n        } else {\n          // Use user provided validation if onFormatDate is provided\n          if (onValidateUserInput) {\n            errorMessageToDisplay = onValidateUserInput(input);\n          }\n        }\n      }\n    }\n    if (onValidationResult && errorMessage !== errorMessageToDisplay) {\n      // only call onValidationResult if stored errorMessage state value is different from latest error message\n      onValidationResult(ev, {\n        errorMessage: errorMessageToDisplay\n      });\n    }\n    var changedTime;\n    if (errorMessageToDisplay || input !== undefined && !input.length) {\n      var timeSelection = input || (option === null || option === void 0 ? void 0 : option.text) || '';\n      setComboBoxText(timeSelection);\n      setSelectedTime(errorMessageToDisplay ? new Date('invalid') : undefined);\n      changedTime = new Date('invalid');\n    } else {\n      var timeSelection = (option === null || option === void 0 ? void 0 : option.key) || input || '';\n      var updatedTime = getDateFromTimeSelection(useHour12, dateStartAnchor, timeSelection);\n      setSelectedTime(updatedTime);\n      changedTime = updatedTime;\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, changedTime);\n    setErrorMessage(errorMessageToDisplay);\n  }, [timeRange, dateStartAnchor, dateEndAnchor, allowFreeform, onFormatDate, onValidateUserInput, showSeconds, useHour12, strings.invalidInputErrorMessage, strings.timeOutOfBoundsErrorMessage, setSelectedTime, onValidationResult, onChange, errorMessage]);\n  var evaluatePressedKey = function evaluatePressedKey(event) {\n    // eslint-disable-next-line deprecation/deprecation\n    var charCode = event.charCode;\n    if (!onFormatDate &&\n    // Only permit input of digits, space, colon, A/P/M characters\n    !(charCode >= KeyCodes.zero && charCode <= KeyCodes.colon || charCode === KeyCodes.space || charCode === KeyCodes.a || charCode === KeyCodes.m || charCode === KeyCodes.p)) {\n      event.preventDefault();\n    }\n  };\n  return React.createElement(ComboBox, __assign({}, rest, {\n    allowFreeform: allowFreeform,\n    selectedKey: selectedKey,\n    label: label,\n    errorMessage: errorMessage,\n    options: timePickerOptions,\n    onChange: onInputChange,\n    text: comboBoxText,\n    //eslint-disable-next-line\n    onKeyPress: evaluatePressedKey,\n    useComboBoxAsMenuWidth: true\n  }));\n};\nTimePicker.displayName = 'TimePicker';\nvar getDateAnchor = function getDateAnchor(internalDateAnchor, startEnd, increments, timeRange) {\n  var clampedDateAnchor = new Date(internalDateAnchor.getTime());\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    var timeRangeHours = startEnd === 'start' ? clampedTimeRange.start : clampedTimeRange.end;\n    if (clampedDateAnchor.getHours() !== timeRangeHours) {\n      clampedDateAnchor.setHours(timeRangeHours);\n    }\n  } else if (startEnd === 'end') {\n    clampedDateAnchor.setDate(clampedDateAnchor.getDate() + 1);\n  }\n  clampedDateAnchor.setMinutes(0);\n  clampedDateAnchor.setSeconds(0);\n  clampedDateAnchor.setMilliseconds(0);\n  return ceilMinuteToIncrement(clampedDateAnchor, increments);\n};\nvar clampTimeRange = function clampTimeRange(timeRange) {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND)\n  };\n};\nvar getHoursInRange = function getHoursInRange(timeRange) {\n  var hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return hoursInRange;\n};\nvar getDropdownOptionsCount = function getDropdownOptionsCount(increments, timeRange) {\n  var hoursInRange = getHoursInRange(timeRange);\n  return Math.floor(TimeConstants.MinutesInOneHour * hoursInRange / increments);\n};","map":{"version":3,"names":["React","KeyCodes","TimeConstants","addMinutes","formatTimeString","ceilMinuteToIncrement","getDateFromTimeSelection","ComboBox","format","useControllableValue","useConst","REGEX_SHOW_SECONDS_HOUR_12","REGEX_HIDE_SECONDS_HOUR_12","REGEX_SHOW_SECONDS_HOUR_24","REGEX_HIDE_SECONDS_HOUR_24","TIME_LOWER_BOUND","TIME_UPPER_BOUND","getDefaultStrings","useHour12","showSeconds","hourUnits","timeFormat","invalidInputErrorMessage","timeOutOfBoundsErrorMessage","TimePicker","_a","label","_b","increments","_c","_d","allowFreeform","_e","timeRange","_f","strings","defaultValue","value","dateAnchor","onChange","onFormatDate","onValidateUserInput","onValidationResult","rest","__rest","_g","useState","comboBoxText","setComboBoxText","_h","selectedKey","setSelectedKey","_j","errorMessage","setErrorMessage","fallbackDateAnchor","Date","_k","selectedTime","setSelectedTime","optionsCount","getDropdownOptionsCount","internalDateAnchor","dateStartAnchor","useMemo","getDateAnchor","dateEndAnchor","timePickerOptions","optionsList","Array","i","map","_","index","option","setSeconds","formattedTimeString","optionText","key","text","useEffect","isNaN","valueOf","formattedTimeString_1","comboboxOption","find","onInputChange","useCallback","ev","_index","input","validateUserInput","userInput","errorMessageToDisplay","regex","test","optionDate","toString","changedTime","undefined","length","timeSelection","updatedTime","evaluatePressedKey","event","charCode","zero","colon","space","a","m","p","preventDefault","createElement","__assign","options","onKeyPress","useComboBoxAsMenuWidth","displayName","startEnd","clampedDateAnchor","getTime","clampedTimeRange","clampTimeRange","timeRangeHours","start","end","getHours","setHours","setDate","getDate","setMinutes","setMilliseconds","Math","min","max","getHoursInRange","hoursInRange","HoursInOneDay","floor","MinutesInOneHour"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@fluentui/react/lib/components/src/components/TimePicker/TimePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes } from '../../Utilities';\nimport {\n  TimeConstants,\n  addMinutes,\n  formatTimeString,\n  ceilMinuteToIncrement,\n  getDateFromTimeSelection,\n} from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport { format } from '../../Utilities';\nimport type { IComboBox, IComboBoxOption } from '../../ComboBox';\nimport type { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\nimport { useControllableValue, useConst } from '@fluentui/react-hooks';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  const timeFormat = `hh:mm${showSeconds ? ':ss' : ''}${useHour12 ? ' AP' : ''}`;\n  const invalidInputErrorMessage = `Enter a valid time in the ${hourUnits} format: ${timeFormat}`;\n  const timeOutOfBoundsErrorMessage = `Please enter a time within the range of {0} and {1}`;\n\n  return {\n    invalidInputErrorMessage,\n    timeOutOfBoundsErrorMessage,\n  };\n};\n\n/**\n * {@docCategory TimePicker}\n */\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  defaultValue,\n  value,\n  dateAnchor,\n  onChange,\n  onFormatDate,\n  onValidateUserInput,\n  onValidationResult,\n  ...rest\n}: ITimePickerProps) => {\n  const [comboBoxText, setComboBoxText] = React.useState<string>('');\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined | null>();\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const fallbackDateAnchor = useConst(new Date());\n\n  const [selectedTime, setSelectedTime] = useControllableValue(value, defaultValue);\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const internalDateAnchor = dateAnchor || value || defaultValue || fallbackDateAnchor;\n\n  const dateStartAnchor = React.useMemo(\n    () => getDateAnchor(internalDateAnchor, 'start', increments, timeRange),\n    [internalDateAnchor, increments, timeRange],\n  );\n\n  const dateEndAnchor = React.useMemo(\n    () => getDateAnchor(internalDateAnchor, 'end', increments, timeRange),\n    [internalDateAnchor, increments, timeRange],\n  );\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map((_, index) => {\n      const option: Date = addMinutes(dateStartAnchor, increments * index);\n      option.setSeconds(0);\n      const formattedTimeString = formatTimeString(option, showSeconds, useHour12);\n      const optionText = onFormatDate ? onFormatDate(option) : formattedTimeString;\n      return {\n        key: formattedTimeString,\n        text: optionText,\n      };\n    });\n  }, [dateStartAnchor, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  React.useEffect(() => {\n    if (selectedTime && !isNaN(selectedTime.valueOf())) {\n      const formattedTimeString = formatTimeString(selectedTime, showSeconds, useHour12);\n      const comboboxOption = timePickerOptions.find((option: IComboBoxOption) => option.key === formattedTimeString);\n      setSelectedKey(comboboxOption?.key);\n      setComboBoxText(comboboxOption ? comboboxOption.text : formattedTimeString);\n    } else {\n      setSelectedKey(null);\n    }\n  }, [selectedTime, timePickerOptions, onFormatDate, showSeconds, useHour12]);\n\n  const onInputChange = React.useCallback(\n    (ev: React.FormEvent<IComboBox>, option?: IComboBoxOption, _index?: number, input?: string): void => {\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        } else if (timeRange && strings.timeOutOfBoundsErrorMessage) {\n          const optionDate: Date = getDateFromTimeSelection(useHour12, dateStartAnchor, userInput);\n          if (optionDate < dateStartAnchor || optionDate > dateEndAnchor) {\n            errorMessageToDisplay = format(\n              strings.timeOutOfBoundsErrorMessage,\n              dateStartAnchor.toString(),\n              dateEndAnchor.toString(),\n            );\n          }\n        }\n        return errorMessageToDisplay;\n      };\n\n      let errorMessageToDisplay = '';\n      if (input) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(input);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(input);\n            }\n          }\n        }\n      }\n\n      if (onValidationResult && errorMessage !== errorMessageToDisplay) {\n        // only call onValidationResult if stored errorMessage state value is different from latest error message\n        onValidationResult(ev, { errorMessage: errorMessageToDisplay });\n      }\n\n      let changedTime: Date;\n      if (errorMessageToDisplay || (input !== undefined && !input.length)) {\n        const timeSelection = input || option?.text || '';\n        setComboBoxText(timeSelection);\n        setSelectedTime(errorMessageToDisplay ? new Date('invalid') : undefined);\n        changedTime = new Date('invalid');\n      } else {\n        const timeSelection = (option?.key as string) || input || '';\n        const updatedTime = getDateFromTimeSelection(useHour12, dateStartAnchor, timeSelection);\n        setSelectedTime(updatedTime);\n        changedTime = updatedTime;\n      }\n\n      onChange?.(ev, changedTime);\n      setErrorMessage(errorMessageToDisplay);\n    },\n    [\n      timeRange,\n      dateStartAnchor,\n      dateEndAnchor,\n      allowFreeform,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      strings.invalidInputErrorMessage,\n      strings.timeOutOfBoundsErrorMessage,\n      setSelectedTime,\n      onValidationResult,\n      onChange,\n      errorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const charCode = event.charCode;\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (charCode >= KeyCodes.zero && charCode <= KeyCodes.colon) ||\n        charCode === KeyCodes.space ||\n        charCode === KeyCodes.a ||\n        charCode === KeyCodes.m ||\n        charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={comboBoxText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n      useComboBoxAsMenuWidth\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst getDateAnchor = (\n  internalDateAnchor: Date,\n  startEnd: 'start' | 'end',\n  increments: number,\n  timeRange?: ITimeRange,\n) => {\n  const clampedDateAnchor = new Date(internalDateAnchor.getTime());\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    const timeRangeHours = startEnd === 'start' ? clampedTimeRange.start : clampedTimeRange.end;\n    if (clampedDateAnchor.getHours() !== timeRangeHours) {\n      clampedDateAnchor.setHours(timeRangeHours);\n    }\n  } else if (startEnd === 'end') {\n    clampedDateAnchor.setDate(clampedDateAnchor.getDate() + 1);\n  }\n  clampedDateAnchor.setMinutes(0);\n  clampedDateAnchor.setSeconds(0);\n  clampedDateAnchor.setMilliseconds(0);\n\n  return ceilMinuteToIncrement(clampedDateAnchor, increments);\n};\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst getHoursInRange = (timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n\n  return hoursInRange;\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  const hoursInRange = getHoursInRange(timeRange);\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}