{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\n\"use strict\";\n\nimport { getGlobal, strShimObject, strShimPrototype, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\nimport { _DYN_CALL, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_NAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_USER_AGENT } from \"../__DynamicConstants\";\nimport { isString, isUndefined, strContains } from \"./HelperFuncs\";\nimport { STR_EMPTY } from \"./InternalConstants\";\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\nvar strWindow = \"window\";\nvar strDocument = \"document\";\nvar strDocumentMode = \"documentMode\";\nvar strNavigator = \"navigator\";\nvar strHistory = \"history\";\nvar strLocation = \"location\";\nvar strConsole = \"console\";\nvar strPerformance = \"performance\";\nvar strJSON = \"JSON\";\nvar strCrypto = \"crypto\";\nvar strMsCrypto = \"msCrypto\";\nvar strReactNative = \"ReactNative\";\nvar strMsie = \"msie\";\nvar strTrident = \"trident/\";\nvar strXMLHttpRequest = \"XMLHttpRequest\";\nvar _isTrident = null;\nvar _navUserAgentCheck = null;\nvar _enableMocks = false;\nvar _useXDomainRequest = null;\nvar _beaconsSupported = null;\nfunction _hasProperty(theClass, property) {\n  var supported = false;\n  if (theClass) {\n    try {\n      supported = property in theClass;\n      if (!supported) {\n        var proto = theClass[strShimPrototype];\n        if (proto) {\n          supported = property in proto;\n        }\n      }\n    } catch (e) {\n      // Do Nothing\n    }\n    if (!supported) {\n      try {\n        var tmp = new theClass();\n        supported = !isUndefined(tmp[property]);\n      } catch (e) {\n        // Do Nothing\n      }\n    }\n  }\n  return supported;\n}\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled\r\n */\nexport function setEnableEnvMocks(enabled) {\n  _enableMocks = enabled;\n}\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @param name The globally named object\r\n */\nexport function getGlobalInst(name) {\n  var gbl = getGlobal();\n  if (gbl && gbl[name]) {\n    return gbl[name];\n  }\n  // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\n  if (name === strWindow && hasWindow()) {\n    // tslint:disable-next-line: no-angle-bracket-type-assertion\n    return window;\n  }\n  return null;\n}\n/**\r\n * Checks if window object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a window\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: window is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\nexport function hasWindow() {\n  return Boolean(typeof window === strShimObject && window);\n}\n/**\r\n * Returns the global window object if it is present otherwise null.\r\n * This helper is used to access the window object without causing an exception\r\n * \"Uncaught ReferenceError: window is not defined\"\r\n */\nexport function getWindow() {\n  if (hasWindow()) {\n    return window;\n  }\n  // Return the global instance or null\n  return getGlobalInst(strWindow);\n}\n/**\r\n * Checks if document object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a document\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: document is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\nexport function hasDocument() {\n  return Boolean(typeof document === strShimObject && document);\n}\n/**\r\n * Returns the global document object if it is present otherwise null.\r\n * This helper is used to access the document object without causing an exception\r\n * \"Uncaught ReferenceError: document is not defined\"\r\n */\nexport function getDocument() {\n  if (hasDocument()) {\n    return document;\n  }\n  return getGlobalInst(strDocument);\n}\n/**\r\n * Checks if navigator object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a navigator\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: navigator is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\nexport function hasNavigator() {\n  return Boolean(typeof navigator === strShimObject && navigator);\n}\n/**\r\n * Returns the global navigator object if it is present otherwise null.\r\n * This helper is used to access the navigator object without causing an exception\r\n * \"Uncaught ReferenceError: navigator is not defined\"\r\n */\nexport function getNavigator() {\n  if (hasNavigator()) {\n    return navigator;\n  }\n  return getGlobalInst(strNavigator);\n}\n/**\r\n * Checks if history object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: history is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\nexport function hasHistory() {\n  return Boolean(typeof history === strShimObject && history);\n}\n/**\r\n * Returns the global history object if it is present otherwise null.\r\n * This helper is used to access the history object without causing an exception\r\n * \"Uncaught ReferenceError: history is not defined\"\r\n */\nexport function getHistory() {\n  if (hasHistory()) {\n    return history;\n  }\n  return getGlobalInst(strHistory);\n}\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\nexport function getLocation(checkForMock) {\n  if (checkForMock && _enableMocks) {\n    var mockLocation = getGlobalInst(\"__mockLocation\");\n    if (mockLocation) {\n      return mockLocation;\n    }\n  }\n  if (typeof location === strShimObject && location) {\n    return location;\n  }\n  return getGlobalInst(strLocation);\n}\n/**\r\n * Returns the global console object\r\n */\nexport function getConsole() {\n  if (typeof console !== strShimUndefined) {\n    return console;\n  }\n  return getGlobalInst(strConsole);\n}\n/**\r\n * Returns the performance object if it is present otherwise null.\r\n * This helper is used to access the performance object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\nexport function getPerformance() {\n  return getGlobalInst(strPerformance);\n}\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\nexport function hasJSON() {\n  return Boolean(typeof JSON === strShimObject && JSON || getGlobalInst(strJSON) !== null);\n}\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\nexport function getJSON() {\n  if (hasJSON()) {\n    return JSON || getGlobalInst(strJSON);\n  }\n  return null;\n}\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\nexport function getCrypto() {\n  return getGlobalInst(strCrypto);\n}\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\nexport function getMsCrypto() {\n  return getGlobalInst(strMsCrypto);\n}\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\nexport function isReactNative() {\n  // If running in React Native, navigator.product will be populated\n  var nav = getNavigator();\n  if (nav && nav.product) {\n    return nav.product === strReactNative;\n  }\n  return false;\n}\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\nexport function isIE() {\n  var nav = getNavigator();\n  if (nav && (nav[_DYN_USER_AGENT /* @min:%2euserAgent */] !== _navUserAgentCheck || _isTrident === null)) {\n    // Added to support test mocking of the user agent\n    _navUserAgentCheck = nav[_DYN_USER_AGENT /* @min:%2euserAgent */];\n    var userAgent = (_navUserAgentCheck || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n    _isTrident = strContains(userAgent, strMsie) || strContains(userAgent, strTrident);\n  }\n  return _isTrident;\n}\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\nexport function getIEVersion(userAgentStr) {\n  if (userAgentStr === void 0) {\n    userAgentStr = null;\n  }\n  if (!userAgentStr) {\n    var navigator_1 = getNavigator() || {};\n    userAgentStr = navigator_1 ? (navigator_1[_DYN_USER_AGENT /* @min:%2euserAgent */] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\n  }\n  var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n  // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\n  if (strContains(ua, strMsie)) {\n    var doc = getDocument() || {};\n    return Math.max(parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strMsie)[1]), doc[strDocumentMode] || 0);\n  } else if (strContains(ua, strTrident)) {\n    var tridentVer = parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strTrident)[1]);\n    if (tridentVer) {\n      return tridentVer + 4;\n    }\n  }\n  return null;\n}\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n */\nexport function dumpObj(object) {\n  var objectTypeDump = Object[strShimPrototype].toString[_DYN_CALL /* @min:%2ecall */](object);\n  var propertyValueDump = STR_EMPTY;\n  if (objectTypeDump === \"[object Error]\") {\n    propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object[_DYN_NAME /* @min:%2ename */] + \"'\";\n  } else if (hasJSON()) {\n    propertyValueDump = getJSON().stringify(object);\n  }\n  return objectTypeDump + propertyValueDump;\n}\nexport function isSafari(userAgentStr) {\n  if (!userAgentStr || !isString(userAgentStr)) {\n    var navigator_2 = getNavigator() || {};\n    userAgentStr = navigator_2 ? (navigator_2[_DYN_USER_AGENT /* @min:%2euserAgent */] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\n  }\n  var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n  return ua[_DYN_INDEX_OF /* @min:%2eindexOf */](\"safari\") >= 0;\n}\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @returns True if supported, false otherwise.\r\n */\nexport function isBeaconsSupported() {\n  if (_beaconsSupported === null) {\n    _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\n  }\n  return _beaconsSupported;\n}\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\nexport function isFetchSupported(withKeepAlive) {\n  var isSupported = false;\n  try {\n    isSupported = !!getGlobalInst(\"fetch\");\n    var request = getGlobalInst(\"Request\");\n    if (isSupported && withKeepAlive && request) {\n      isSupported = _hasProperty(request, \"keepalive\");\n    }\n  } catch (e) {\n    // Just Swallow any failure during availability checks\n  }\n  return isSupported;\n}\nexport function useXDomainRequest() {\n  if (_useXDomainRequest === null) {\n    _useXDomainRequest = typeof XDomainRequest !== strShimUndefined;\n    if (_useXDomainRequest && isXhrSupported()) {\n      _useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst(strXMLHttpRequest), \"withCredentials\");\n    }\n  }\n  return _useXDomainRequest;\n}\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\nexport function isXhrSupported() {\n  var isSupported = false;\n  try {\n    var xmlHttpRequest = getGlobalInst(strXMLHttpRequest);\n    isSupported = !!xmlHttpRequest;\n  } catch (e) {\n    // Just Swallow any failure during availability checks\n  }\n  return isSupported;\n}\nfunction _getNamedValue(values, name) {\n  if (values) {\n    for (var i = 0; i < values[_DYN_LENGTH /* @min:%2elength */]; i++) {\n      var value = values[i];\n      if (value[_DYN_NAME /* @min:%2ename */]) {\n        if (value[_DYN_NAME /* @min:%2ename */] === name) {\n          return value;\n        }\n      }\n    }\n  }\n  return {};\n}\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name\r\n */\nexport function findMetaTag(name) {\n  var doc = getDocument();\n  if (doc && name) {\n    // Look for a meta-tag\n    return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\n  }\n  return null;\n}\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name\r\n */\nexport function findNamedServerTiming(name) {\n  var value;\n  var perf = getPerformance();\n  if (perf) {\n    // Try looking for a server-timing header\n    var navPerf = perf.getEntriesByType(\"navigation\") || [];\n    value = _getNamedValue((navPerf[_DYN_LENGTH /* @min:%2elength */] > 0 ? navPerf[0] : {}).serverTiming, name).description;\n  }\n  return value;\n}","map":{"version":3,"names":["getGlobal","strShimObject","strShimPrototype","strShimUndefined","_DYN_CALL","_DYN_INDEX_OF","_DYN_LENGTH","_DYN_NAME","_DYN_SPLIT","_DYN_TO_LOWER_CASE","_DYN_USER_AGENT","isString","isUndefined","strContains","STR_EMPTY","strWindow","strDocument","strDocumentMode","strNavigator","strHistory","strLocation","strConsole","strPerformance","strJSON","strCrypto","strMsCrypto","strReactNative","strMsie","strTrident","strXMLHttpRequest","_isTrident","_navUserAgentCheck","_enableMocks","_useXDomainRequest","_beaconsSupported","_hasProperty","theClass","property","supported","proto","e","tmp","setEnableEnvMocks","enabled","getGlobalInst","name","gbl","hasWindow","window","Boolean","getWindow","hasDocument","document","getDocument","hasNavigator","navigator","getNavigator","hasHistory","history","getHistory","getLocation","checkForMock","mockLocation","location","getConsole","console","getPerformance","hasJSON","JSON","getJSON","getCrypto","getMsCrypto","isReactNative","nav","product","isIE","userAgent","getIEVersion","userAgentStr","navigator_1","ua","doc","Math","max","parseInt","tridentVer","dumpObj","object","objectTypeDump","Object","toString","propertyValueDump","stack","message","stringify","isSafari","navigator_2","isBeaconsSupported","sendBeacon","isFetchSupported","withKeepAlive","isSupported","request","useXDomainRequest","XDomainRequest","isXhrSupported","xmlHttpRequest","_getNamedValue","values","i","value","findMetaTag","querySelectorAll","content","findNamedServerTiming","perf","navPerf","getEntriesByType","serverTiming","description"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { getGlobal, strShimObject, strShimPrototype, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\r\nimport { _DYN_CALL, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_NAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { isString, isUndefined, strContains } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\r\nvar strWindow = \"window\";\r\nvar strDocument = \"document\";\r\nvar strDocumentMode = \"documentMode\";\r\nvar strNavigator = \"navigator\";\r\nvar strHistory = \"history\";\r\nvar strLocation = \"location\";\r\nvar strConsole = \"console\";\r\nvar strPerformance = \"performance\";\r\nvar strJSON = \"JSON\";\r\nvar strCrypto = \"crypto\";\r\nvar strMsCrypto = \"msCrypto\";\r\nvar strReactNative = \"ReactNative\";\r\nvar strMsie = \"msie\";\r\nvar strTrident = \"trident/\";\r\nvar strXMLHttpRequest = \"XMLHttpRequest\";\r\nvar _isTrident = null;\r\nvar _navUserAgentCheck = null;\r\nvar _enableMocks = false;\r\nvar _useXDomainRequest = null;\r\nvar _beaconsSupported = null;\r\nfunction _hasProperty(theClass, property) {\r\n    var supported = false;\r\n    if (theClass) {\r\n        try {\r\n            supported = property in theClass;\r\n            if (!supported) {\r\n                var proto = theClass[strShimPrototype];\r\n                if (proto) {\r\n                    supported = property in proto;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Do Nothing\r\n        }\r\n        if (!supported) {\r\n            try {\r\n                var tmp = new theClass();\r\n                supported = !isUndefined(tmp[property]);\r\n            }\r\n            catch (e) {\r\n                // Do Nothing\r\n            }\r\n        }\r\n    }\r\n    return supported;\r\n}\r\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled\r\n */\r\nexport function setEnableEnvMocks(enabled) {\r\n    _enableMocks = enabled;\r\n}\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @param name The globally named object\r\n */\r\nexport function getGlobalInst(name) {\r\n    var gbl = getGlobal();\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name];\r\n    }\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === strWindow && hasWindow()) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        return window;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Checks if window object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a window\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: window is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasWindow() {\r\n    return Boolean(typeof window === strShimObject && window);\r\n}\r\n/**\r\n * Returns the global window object if it is present otherwise null.\r\n * This helper is used to access the window object without causing an exception\r\n * \"Uncaught ReferenceError: window is not defined\"\r\n */\r\nexport function getWindow() {\r\n    if (hasWindow()) {\r\n        return window;\r\n    }\r\n    // Return the global instance or null\r\n    return getGlobalInst(strWindow);\r\n}\r\n/**\r\n * Checks if document object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a document\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: document is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasDocument() {\r\n    return Boolean(typeof document === strShimObject && document);\r\n}\r\n/**\r\n * Returns the global document object if it is present otherwise null.\r\n * This helper is used to access the document object without causing an exception\r\n * \"Uncaught ReferenceError: document is not defined\"\r\n */\r\nexport function getDocument() {\r\n    if (hasDocument()) {\r\n        return document;\r\n    }\r\n    return getGlobalInst(strDocument);\r\n}\r\n/**\r\n * Checks if navigator object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a navigator\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: navigator is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasNavigator() {\r\n    return Boolean(typeof navigator === strShimObject && navigator);\r\n}\r\n/**\r\n * Returns the global navigator object if it is present otherwise null.\r\n * This helper is used to access the navigator object without causing an exception\r\n * \"Uncaught ReferenceError: navigator is not defined\"\r\n */\r\nexport function getNavigator() {\r\n    if (hasNavigator()) {\r\n        return navigator;\r\n    }\r\n    return getGlobalInst(strNavigator);\r\n}\r\n/**\r\n * Checks if history object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: history is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasHistory() {\r\n    return Boolean(typeof history === strShimObject && history);\r\n}\r\n/**\r\n * Returns the global history object if it is present otherwise null.\r\n * This helper is used to access the history object without causing an exception\r\n * \"Uncaught ReferenceError: history is not defined\"\r\n */\r\nexport function getHistory() {\r\n    if (hasHistory()) {\r\n        return history;\r\n    }\r\n    return getGlobalInst(strHistory);\r\n}\r\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\r\nexport function getLocation(checkForMock) {\r\n    if (checkForMock && _enableMocks) {\r\n        var mockLocation = getGlobalInst(\"__mockLocation\");\r\n        if (mockLocation) {\r\n            return mockLocation;\r\n        }\r\n    }\r\n    if (typeof location === strShimObject && location) {\r\n        return location;\r\n    }\r\n    return getGlobalInst(strLocation);\r\n}\r\n/**\r\n * Returns the global console object\r\n */\r\nexport function getConsole() {\r\n    if (typeof console !== strShimUndefined) {\r\n        return console;\r\n    }\r\n    return getGlobalInst(strConsole);\r\n}\r\n/**\r\n * Returns the performance object if it is present otherwise null.\r\n * This helper is used to access the performance object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getPerformance() {\r\n    return getGlobalInst(strPerformance);\r\n}\r\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasJSON() {\r\n    return Boolean((typeof JSON === strShimObject && JSON) || getGlobalInst(strJSON) !== null);\r\n}\r\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\r\nexport function getJSON() {\r\n    if (hasJSON()) {\r\n        return JSON || getGlobalInst(strJSON);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getCrypto() {\r\n    return getGlobalInst(strCrypto);\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getMsCrypto() {\r\n    return getGlobalInst(strMsCrypto);\r\n}\r\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\r\nexport function isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    var nav = getNavigator();\r\n    if (nav && nav.product) {\r\n        return nav.product === strReactNative;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\r\nexport function isIE() {\r\n    var nav = getNavigator();\r\n    if (nav && (nav[_DYN_USER_AGENT /* @min:%2euserAgent */] !== _navUserAgentCheck || _isTrident === null)) {\r\n        // Added to support test mocking of the user agent\r\n        _navUserAgentCheck = nav[_DYN_USER_AGENT /* @min:%2euserAgent */];\r\n        var userAgent = (_navUserAgentCheck || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n        _isTrident = (strContains(userAgent, strMsie) || strContains(userAgent, strTrident));\r\n    }\r\n    return _isTrident;\r\n}\r\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\r\nexport function getIEVersion(userAgentStr) {\r\n    if (userAgentStr === void 0) { userAgentStr = null; }\r\n    if (!userAgentStr) {\r\n        var navigator_1 = getNavigator() || {};\r\n        userAgentStr = navigator_1 ? (navigator_1[_DYN_USER_AGENT /* @min:%2euserAgent */] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\r\n    if (strContains(ua, strMsie)) {\r\n        var doc = getDocument() || {};\r\n        return Math.max(parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strMsie)[1]), (doc[strDocumentMode] || 0));\r\n    }\r\n    else if (strContains(ua, strTrident)) {\r\n        var tridentVer = parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strTrident)[1]);\r\n        if (tridentVer) {\r\n            return tridentVer + 4;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n */\r\nexport function dumpObj(object) {\r\n    var objectTypeDump = Object[strShimPrototype].toString[_DYN_CALL /* @min:%2ecall */](object);\r\n    var propertyValueDump = STR_EMPTY;\r\n    if (objectTypeDump === \"[object Error]\") {\r\n        propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object[_DYN_NAME /* @min:%2ename */] + \"'\";\r\n    }\r\n    else if (hasJSON()) {\r\n        propertyValueDump = getJSON().stringify(object);\r\n    }\r\n    return objectTypeDump + propertyValueDump;\r\n}\r\nexport function isSafari(userAgentStr) {\r\n    if (!userAgentStr || !isString(userAgentStr)) {\r\n        var navigator_2 = getNavigator() || {};\r\n        userAgentStr = navigator_2 ? (navigator_2[_DYN_USER_AGENT /* @min:%2euserAgent */] || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    return (ua[_DYN_INDEX_OF /* @min:%2eindexOf */](\"safari\") >= 0);\r\n}\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @returns True if supported, false otherwise.\r\n */\r\nexport function isBeaconsSupported() {\r\n    if (_beaconsSupported === null) {\r\n        _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\r\n    }\r\n    return _beaconsSupported;\r\n}\r\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isFetchSupported(withKeepAlive) {\r\n    var isSupported = false;\r\n    try {\r\n        isSupported = !!getGlobalInst(\"fetch\");\r\n        var request = getGlobalInst(\"Request\");\r\n        if (isSupported && withKeepAlive && request) {\r\n            isSupported = _hasProperty(request, \"keepalive\");\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nexport function useXDomainRequest() {\r\n    if (_useXDomainRequest === null) {\r\n        _useXDomainRequest = (typeof XDomainRequest !== strShimUndefined);\r\n        if (_useXDomainRequest && isXhrSupported()) {\r\n            _useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst(strXMLHttpRequest), \"withCredentials\");\r\n        }\r\n    }\r\n    return _useXDomainRequest;\r\n}\r\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isXhrSupported() {\r\n    var isSupported = false;\r\n    try {\r\n        var xmlHttpRequest = getGlobalInst(strXMLHttpRequest);\r\n        isSupported = !!xmlHttpRequest;\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nfunction _getNamedValue(values, name) {\r\n    if (values) {\r\n        for (var i = 0; i < values[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            var value = values[i];\r\n            if (value[_DYN_NAME /* @min:%2ename */]) {\r\n                if (value[_DYN_NAME /* @min:%2ename */] === name) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name\r\n */\r\nexport function findMetaTag(name) {\r\n    var doc = getDocument();\r\n    if (doc && name) {\r\n        // Look for a meta-tag\r\n        return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name\r\n */\r\nexport function findNamedServerTiming(name) {\r\n    var value;\r\n    var perf = getPerformance();\r\n    if (perf) {\r\n        // Try looking for a server-timing header\r\n        var navPerf = perf.getEntriesByType(\"navigation\") || [];\r\n        value = _getNamedValue((navPerf[_DYN_LENGTH /* @min:%2elength */] > 0 ? navPerf[0] : {}).serverTiming, name).description;\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=EnvUtils.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}