{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\n\"use strict\";\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { AnalyticsPlugin } from \"@microsoft/applicationinsights-analytics-js\";\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\nimport { AnalyticsPluginIdentifier, BreezeChannelIdentifier, ConfigurationManager, ConnectionStringParser, ContextTagKeys, CorrelationIdHelper, CtxTagKeys, DEFAULT_BREEZE_ENDPOINT, DEFAULT_BREEZE_PATH, Data, DataSanitizer, DateTimeUtils, DisabledPropertyName, DistributedTracingModes, Envelope, Event, Exception, Extensions, HttpMethod, Metric, PageView, PageViewPerformance, ProcessLegacy, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, SampleRate, SeverityLevel, TelemetryItemCreator, Trace, UrlHelper, Util, parseConnectionString } from \"@microsoft/applicationinsights-common\";\nimport { AppInsightsCore, _throwInternal, addPageHideEventListener, addPageUnloadEventListener, arrForEach, arrIndexOf, createUniqueNamespace, doPerf, hasDocument, hasWindow, isArray, isFunction, isNullOrUndefined, isReactNative, isString, mergeEvtNamespace, objForEachKey, proxyAssign, proxyFunctions, removePageHideEventListener, removePageUnloadEventListener, throwError } from \"@microsoft/applicationinsights-core-js\";\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\nimport { STR_ADD_TELEMETRY_INITIALIZER, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_EVT_NAMESPACE, STR_FLUSH, STR_GET_COOKIE_MGR, STR_GET_PLUGIN, STR_POLL_INTERNAL_LOGS, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\nimport { _DYN_ADD_HOUSEKEEPING_BEF20, _DYN_APP_INSIGHTS, _DYN_CONFIG, _DYN_CONNECTION_STRING, _DYN_CONTEXT, _DYN_DIAGNOSTIC_LOG_INTER4, _DYN_DISABLE_FLUSH_ON_BEF11, _DYN_DISABLE_FLUSH_ON_UNL12, _DYN_DISABLE_IKEY_DEPRECA18, _DYN_ENDPOINT_URL, _DYN_GET_TRANSMISSION_CON19, _DYN_INDEX_OF, _DYN_INSTRUMENTATION_KEY, _DYN_LOAD_APP_INSIGHTS, _DYN_ONUNLOAD_FLUSH, _DYN_PUSH, _DYN_QUEUE, _DYN_UPDATE_SNIPPET_DEFIN0, _DYN_VERSION } from \"./__DynamicConstants\";\nvar _internalSdkSrc;\n// This is an exclude list of properties that should not be updated during initialization\n// They include a combination of private and internal property names\nvar _ignoreUpdateSnippetProperties = [STR_SNIPPET, \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"];\n// Re-exposing the Common classes as Telemetry, the list was taken by reviewing the generated code for the build while using\n// the previous configuration :-\n// import * as Common from \"@microsoft/applicationinsights-common\"\n// export const Telemetry = Common;\nvar fieldType = {\n  Default: 0 /* FieldType.Default */,\n  Required: 1 /* FieldType.Required */,\n  Array: 2 /* FieldType.Array */,\n  Hidden: 4 /* FieldType.Hidden */\n};\n/**\r\n * Telemetry type classes, e.g. PageView, Exception, etc\r\n */\nexport var Telemetry = {\n  __proto__: null,\n  PropertiesPluginIdentifier: PropertiesPluginIdentifier,\n  BreezeChannelIdentifier: BreezeChannelIdentifier,\n  AnalyticsPluginIdentifier: AnalyticsPluginIdentifier,\n  Util: Util,\n  CorrelationIdHelper: CorrelationIdHelper,\n  UrlHelper: UrlHelper,\n  DateTimeUtils: DateTimeUtils,\n  ConnectionStringParser: ConnectionStringParser,\n  FieldType: fieldType,\n  RequestHeaders: RequestHeaders,\n  DisabledPropertyName: DisabledPropertyName,\n  ProcessLegacy: ProcessLegacy,\n  SampleRate: SampleRate,\n  HttpMethod: HttpMethod,\n  DEFAULT_BREEZE_ENDPOINT: DEFAULT_BREEZE_ENDPOINT,\n  Envelope: Envelope,\n  Event: Event,\n  Exception: Exception,\n  Metric: Metric,\n  PageView: PageView,\n  RemoteDependencyData: RemoteDependencyData,\n  Trace: Trace,\n  PageViewPerformance: PageViewPerformance,\n  Data: Data,\n  SeverityLevel: SeverityLevel,\n  ConfigurationManager: ConfigurationManager,\n  ContextTagKeys: ContextTagKeys,\n  DataSanitizer: DataSanitizer,\n  TelemetryItemCreator: TelemetryItemCreator,\n  CtxTagKeys: CtxTagKeys,\n  Extensions: Extensions,\n  DistributedTracingModes: DistributedTracingModes\n};\n/**\r\n * Application Insights API\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\nvar Initialization = /** @class */function () {\n  function Initialization(snippet) {\n    var _this = this;\n    // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\n    var dependencies;\n    var properties;\n    var _sender;\n    var _snippetVersion;\n    var _evtNamespace;\n    var _houseKeepingNamespace;\n    var _core;\n    dynamicProto(Initialization, this, function (_self) {\n      _initDefaults();\n      // initialize the queue and config in case they are undefined\n      _snippetVersion = \"\" + (snippet.sv || snippet[_DYN_VERSION /* @min:%2eversion */] || \"\");\n      snippet[_DYN_QUEUE /* @min:%2equeue */] = snippet[_DYN_QUEUE /* @min:%2equeue */] || [];\n      snippet[_DYN_VERSION /* @min:%2eversion */] = snippet[_DYN_VERSION /* @min:%2eversion */] || 2.0; // Default to new version\n      var config = snippet[_DYN_CONFIG /* @min:%2econfig */] || {};\n      if (config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */]) {\n        var cs = parseConnectionString(config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */]);\n        var ingest = cs.ingestionendpoint;\n        config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = ingest ? ingest + DEFAULT_BREEZE_PATH : config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */]; // only add /v2/track when from connectionstring\n        config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = cs.instrumentationkey || config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\n      }\n\n      _self[_DYN_APP_INSIGHTS /* @min:%2eappInsights */] = new AnalyticsPlugin();\n      properties = new PropertiesPlugin();\n      dependencies = new DependenciesPlugin();\n      _sender = new Sender();\n      _core = new AppInsightsCore();\n      _self.core = _core;\n      var isErrMessageDisabled = isNullOrUndefined(config[_DYN_DISABLE_IKEY_DEPRECA18 /* @min:%2edisableIkeyDeprecationMessage */]) ? true : config[_DYN_DISABLE_IKEY_DEPRECA18 /* @min:%2edisableIkeyDeprecationMessage */];\n      if (!config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] && !isErrMessageDisabled) {\n        _throwInternal(_core.logger, 1 /* eLoggingSeverity.CRITICAL */, 106 /* _eInternalMessageId.InstrumentationKeyDeprecation */, \"Instrumentation key support will end soon, see aka.ms/IkeyMigrate\");\n      }\n      _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\n      _self[_DYN_CONFIG /* @min:%2econfig */] = config;\n      _getSKUDefaults();\n      _self[STR_FLUSH /* @min:%2eflush */] = function (async) {\n        if (async === void 0) {\n          async = true;\n        }\n        doPerf(_core, function () {\n          return \"AISKU.flush\";\n        }, function () {\n          arrForEach(_core[_DYN_GET_TRANSMISSION_CON19 /* @min:%2egetTransmissionControls */](), function (channels) {\n            arrForEach(channels, function (channel) {\n              channel[STR_FLUSH /* @min:%2eflush */](async);\n            });\n          });\n        }, null, async);\n      };\n      _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */] = function (async) {\n        if (async === void 0) {\n          async = true;\n        }\n        arrForEach(_core[_DYN_GET_TRANSMISSION_CON19 /* @min:%2egetTransmissionControls */](), function (channels) {\n          arrForEach(channels, function (channel) {\n            if (channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]) {\n              channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]();\n            } else {\n              channel[STR_FLUSH /* @min:%2eflush */](async);\n            }\n          });\n        });\n      };\n      _self[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */] = function (legacyMode, logger, notificationManager) {\n        if (legacyMode === void 0) {\n          legacyMode = false;\n        }\n        function _updateSnippetProperties(snippet) {\n          if (snippet) {\n            var snippetVer = \"\";\n            if (!isNullOrUndefined(_snippetVersion)) {\n              snippetVer += _snippetVersion;\n            }\n            if (legacyMode) {\n              snippetVer += \".lg\";\n            }\n            if (_self[_DYN_CONTEXT /* @min:%2econtext */] && _self[_DYN_CONTEXT /* @min:%2econtext */].internal) {\n              _self[_DYN_CONTEXT /* @min:%2econtext */].internal.snippetVer = snippetVer || \"-\";\n            }\n            // apply updated properties to the global instance (snippet)\n            objForEachKey(_self, function (field, value) {\n              if (isString(field) && !isFunction(value) && field && field[0] !== \"_\" &&\n              // Don't copy \"internal\" values\n              arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {\n                snippet[field] = value;\n              }\n            });\n          }\n        }\n        // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!\n        if (legacyMode && _self[_DYN_CONFIG /* @min:%2econfig */].extensions && _self[_DYN_CONFIG /* @min:%2econfig */].extensions.length > 0) {\n          throwError(\"Extensions not allowed in legacy mode\");\n        }\n        doPerf(_self.core, function () {\n          return \"AISKU.loadAppInsights\";\n        }, function () {\n          var extensions = [];\n          extensions[_DYN_PUSH /* @min:%2epush */](_sender);\n          extensions[_DYN_PUSH /* @min:%2epush */](properties);\n          extensions[_DYN_PUSH /* @min:%2epush */](dependencies);\n          extensions[_DYN_PUSH /* @min:%2epush */](_self[_DYN_APP_INSIGHTS /* @min:%2eappInsights */]);\n          // initialize core\n          _core.initialize(_self[_DYN_CONFIG /* @min:%2econfig */], extensions, logger, notificationManager);\n          _self[_DYN_CONTEXT /* @min:%2econtext */] = properties[_DYN_CONTEXT /* @min:%2econtext */];\n          if (_internalSdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */]) {\n            _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc = _internalSdkSrc;\n          }\n          _updateSnippetProperties(_self[STR_SNIPPET /* @min:%2esnippet */]);\n          // Empty queue of all api calls logged prior to sdk download\n          _self.emptyQueue();\n          _self[STR_POLL_INTERNAL_LOGS /* @min:%2epollInternalLogs */]();\n          _self[_DYN_ADD_HOUSEKEEPING_BEF20 /* @min:%2eaddHousekeepingBeforeUnload */](_this);\n        });\n        return _self;\n      };\n      _self[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\n        // apply full appInsights to the global instance\n        // Note: This must be called before loadAppInsights is called\n        proxyAssign(snippet, _self, function (name) {\n          // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\n          return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\n        });\n      };\n      _self.emptyQueue = function () {\n        // call functions that were queued before the main script was loaded\n        try {\n          if (isArray(_self.snippet[_DYN_QUEUE /* @min:%2equeue */])) {\n            // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\n            var length_1 = _self.snippet[_DYN_QUEUE /* @min:%2equeue */].length;\n            for (var i = 0; i < length_1; i++) {\n              var call = _self.snippet[_DYN_QUEUE /* @min:%2equeue */][i];\n              call();\n            }\n            _self.snippet[_DYN_QUEUE /* @min:%2equeue */] = undefined;\n            delete _self.snippet[_DYN_QUEUE /* @min:%2equeue */];\n          }\n        } catch (exception) {\n          var properties_1 = {};\n          if (exception && isFunction(exception.toString)) {\n            properties_1.exception = exception.toString();\n          }\n          // need from core\n          // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\n          //     eLoggingSeverity.WARNING,\n          //     _eInternalMessageId.FailedToSendQueuedTelemetry,\n          //     \"Failed to send queued telemetry\",\n          //     properties);\n        }\n      };\n\n      _self[_DYN_ADD_HOUSEKEEPING_BEF20 /* @min:%2eaddHousekeepingBeforeUnload */] = function (appInsightsInstance) {\n        // Add callback to push events when the user navigates away\n        if (hasWindow() || hasDocument()) {\n          var performHousekeeping = function performHousekeeping() {\n            // Adds the ability to flush all data before the page unloads.\n            // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\n            // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\n            // Telemetry here will help us analyze how effective this approach is.\n            // Another approach would be to make this call sync with a acceptable timeout to reduce the\n            // impact on user experience.\n            // appInsightsInstance.context._sender.triggerSend();\n            appInsightsInstance[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](false);\n            // Back up the current session to local storage\n            // This lets us close expired sessions after the cookies themselves expire\n            if (isFunction(_this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */])) {\n              var loadedPlugin = _this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */](PropertiesPluginIdentifier);\n              if (loadedPlugin) {\n                var propertiesPlugin = loadedPlugin.plugin;\n                if (propertiesPlugin && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */] && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager) {\n                  propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager.backup();\n                }\n              }\n            }\n          };\n          var added = false;\n          var excludePageUnloadEvents = appInsightsInstance.appInsights[_DYN_CONFIG /* @min:%2econfig */].disablePageUnloadEvents;\n          if (!_houseKeepingNamespace) {\n            _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */] && _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */]());\n          }\n\n          if (!appInsightsInstance.appInsights.config[_DYN_DISABLE_FLUSH_ON_BEF11 /* @min:%2edisableFlushOnBeforeUnload */]) {\n            // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\n            // As just hooking the window does not always fire (on chrome) for page navigation's.\n            if (addPageUnloadEventListener(performHousekeeping, excludePageUnloadEvents, _houseKeepingNamespace)) {\n              added = true;\n            }\n            // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\n            if (addPageHideEventListener(performHousekeeping, excludePageUnloadEvents, _houseKeepingNamespace)) {\n              added = true;\n            }\n            // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\n            // log the failure in this case\n            if (!added && !isReactNative()) {\n              _throwInternal(appInsightsInstance[_DYN_APP_INSIGHTS /* @min:%2eappInsights */].core.logger, 1 /* eLoggingSeverity.CRITICAL */, 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */, \"Could not add handler for beforeunload and pagehide\");\n            }\n          }\n          if (!added && !appInsightsInstance.appInsights.config[_DYN_DISABLE_FLUSH_ON_UNL12 /* @min:%2edisableFlushOnUnload */]) {\n            // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\n            addPageHideEventListener(performHousekeeping, excludePageUnloadEvents, _houseKeepingNamespace);\n          }\n        }\n      };\n      _self.getSender = function () {\n        return _sender;\n      };\n      _self.unload = function (isAsync, unloadComplete, cbTimeout) {\n        _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](isAsync);\n        // Remove any registered event handlers\n        if (_houseKeepingNamespace) {\n          removePageUnloadEventListener(null, _houseKeepingNamespace);\n          removePageHideEventListener(null, _houseKeepingNamespace);\n        }\n        _core.unload && _core.unload(isAsync, unloadComplete, cbTimeout);\n      };\n      proxyFunctions(_self, _self[_DYN_APP_INSIGHTS /* @min:%2eappInsights */], [STR_GET_COOKIE_MGR, STR_TRACK_EVENT, STR_TRACK_PAGE_VIEW, \"trackPageViewPerformance\", STR_TRACK_EXCEPTION, \"_onerror\", STR_TRACK_TRACE, STR_TRACK_METRIC, STR_START_TRACK_PAGE, STR_STOP_TRACK_PAGE, STR_START_TRACK_EVENT, STR_STOP_TRACK_EVENT]);\n      proxyFunctions(_self, _getCurrentDependencies, [STR_TRACK_DEPENDENCY_DATA, \"addDependencyListener\", \"addDependencyInitializer\"]);\n      proxyFunctions(_self, _core, [STR_ADD_TELEMETRY_INITIALIZER, STR_POLL_INTERNAL_LOGS, \"stopPollingInternalLogs\", STR_GET_PLUGIN, \"addPlugin\", STR_EVT_NAMESPACE, \"addUnloadCb\", \"getTraceCtx\"]);\n      proxyFunctions(_self, function () {\n        var context = properties[_DYN_CONTEXT /* @min:%2econtext */];\n        return context ? context.user : null;\n      }, [STR_SET_AUTHENTICATED_USER_CONTEXT, STR_CLEAR_AUTHENTICATED_USER_CONTEXT]);\n      function _getSKUDefaults() {\n        _self.config[_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] = _self.config[_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] && _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] > 0 ? _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] : 10000;\n      }\n      // Using a function to support the dynamic adding / removal of plugins, so this will always return the current value\n      function _getCurrentDependencies() {\n        return dependencies;\n      }\n      function _initDefaults() {\n        _evtNamespace = createUniqueNamespace(\"AISKU\");\n        _houseKeepingNamespace = null;\n        dependencies = null;\n        properties = null;\n        _sender = null;\n        _snippetVersion = null;\n      }\n    });\n  }\n  // Analytics Plugin\n  // Removed Stub for Initialization.prototype.getCookieMgr.\n  // Removed Stub for Initialization.prototype.trackEvent.\n  // Removed Stub for Initialization.prototype.trackPageView.\n  // Removed Stub for Initialization.prototype.trackPageViewPerformance.\n  // Removed Stub for Initialization.prototype.trackException.\n  // Removed Stub for Initialization.prototype._onerror.\n  // Removed Stub for Initialization.prototype.trackTrace.\n  // Removed Stub for Initialization.prototype.trackMetric.\n  // Removed Stub for Initialization.prototype.startTrackPage.\n  // Removed Stub for Initialization.prototype.stopTrackPage.\n  // Removed Stub for Initialization.prototype.startTrackEvent.\n  // Removed Stub for Initialization.prototype.stopTrackEvent.\n  // Removed Stub for Initialization.prototype.addTelemetryInitializer.\n  // Properties Plugin\n  // Removed Stub for Initialization.prototype.setAuthenticatedUserContext.\n  // Removed Stub for Initialization.prototype.clearAuthenticatedUserContext.\n  // Dependencies Plugin\n  // Removed Stub for Initialization.prototype.trackDependencyData.\n  // Misc\n  // Removed Stub for Initialization.prototype.flush.\n  // Removed Stub for Initialization.prototype.onunloadFlush.\n  // Removed Stub for Initialization.prototype.loadAppInsights.\n  // Removed Stub for Initialization.prototype.updateSnippetDefinitions.\n  // Removed Stub for Initialization.prototype.emptyQueue.\n  // Removed Stub for Initialization.prototype.pollInternalLogs.\n  // Removed Stub for Initialization.prototype.stopPollingInternalLogs.\n  // Removed Stub for Initialization.prototype.addHousekeepingBeforeUnload.\n  // Removed Stub for Initialization.prototype.getSender.\n  // Removed Stub for Initialization.prototype.unload.\n  // Removed Stub for Initialization.prototype.getPlugin.\n  // Removed Stub for Initialization.prototype.addPlugin.\n  // Removed Stub for Initialization.prototype.evtNamespace.\n  // Removed Stub for Initialization.prototype.addUnloadCb.\n  // Removed Stub for Initialization.prototype.addDependencyListener.\n  /**\r\n   * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n   * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n   * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n   * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n   * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n   * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n   */\n  Initialization.prototype.addDependencyInitializer = function (dependencyInitializer) {\n    return null;\n  };\n  // Removed Stub for Initialization.prototype.getTraceCtx.\n  return Initialization;\n}();\nexport { Initialization };\n// tslint:disable-next-line\n(function () {\n  var sdkSrc = null;\n  var isModule = false;\n  var cdns = [\"://js.monitor.azure.com/\", \"://az416426.vo.msecnd.net/\"];\n  try {\n    // Try and determine whether the sdk is being loaded from the CDN\n    // currentScript is only valid during initial processing\n    var scrpt = (document || {}).currentScript;\n    if (scrpt) {\n      sdkSrc = scrpt.src;\n      // } else {\n      //     // We need to update to at least typescript 2.9 for this to work :-(\n      //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\n      //     let meta = import.meta;\n      //     sdkSrc = (meta || {}).url;\n      //     isModule = true;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-empty\n  }\n  if (sdkSrc) {\n    try {\n      var url = sdkSrc.toLowerCase();\n      if (url) {\n        var src = \"\";\n        for (var idx = 0; idx < cdns.length; idx++) {\n          if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](cdns[idx]) !== -1) {\n            src = \"cdn\" + (idx + 1);\n            if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](\"/scripts/\") === -1) {\n              if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](\"/next/\") !== -1) {\n                src += \"-next\";\n              } else if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](\"/beta/\") !== -1) {\n                src += \"-beta\";\n              }\n            }\n            _internalSdkSrc = src + (isModule ? \".mod\" : \"\");\n            break;\n          }\n        }\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n  }\n})();","map":{"version":3,"names":["dynamicProto","AnalyticsPlugin","Sender","AnalyticsPluginIdentifier","BreezeChannelIdentifier","ConfigurationManager","ConnectionStringParser","ContextTagKeys","CorrelationIdHelper","CtxTagKeys","DEFAULT_BREEZE_ENDPOINT","DEFAULT_BREEZE_PATH","Data","DataSanitizer","DateTimeUtils","DisabledPropertyName","DistributedTracingModes","Envelope","Event","Exception","Extensions","HttpMethod","Metric","PageView","PageViewPerformance","ProcessLegacy","PropertiesPluginIdentifier","RemoteDependencyData","RequestHeaders","SampleRate","SeverityLevel","TelemetryItemCreator","Trace","UrlHelper","Util","parseConnectionString","AppInsightsCore","_throwInternal","addPageHideEventListener","addPageUnloadEventListener","arrForEach","arrIndexOf","createUniqueNamespace","doPerf","hasDocument","hasWindow","isArray","isFunction","isNullOrUndefined","isReactNative","isString","mergeEvtNamespace","objForEachKey","proxyAssign","proxyFunctions","removePageHideEventListener","removePageUnloadEventListener","throwError","AjaxPlugin","DependenciesPlugin","PropertiesPlugin","STR_ADD_TELEMETRY_INITIALIZER","STR_CLEAR_AUTHENTICATED_USER_CONTEXT","STR_EVT_NAMESPACE","STR_FLUSH","STR_GET_COOKIE_MGR","STR_GET_PLUGIN","STR_POLL_INTERNAL_LOGS","STR_SET_AUTHENTICATED_USER_CONTEXT","STR_SNIPPET","STR_START_TRACK_EVENT","STR_START_TRACK_PAGE","STR_STOP_TRACK_EVENT","STR_STOP_TRACK_PAGE","STR_TRACK_DEPENDENCY_DATA","STR_TRACK_EVENT","STR_TRACK_EXCEPTION","STR_TRACK_METRIC","STR_TRACK_PAGE_VIEW","STR_TRACK_TRACE","_DYN_ADD_HOUSEKEEPING_BEF20","_DYN_APP_INSIGHTS","_DYN_CONFIG","_DYN_CONNECTION_STRING","_DYN_CONTEXT","_DYN_DIAGNOSTIC_LOG_INTER4","_DYN_DISABLE_FLUSH_ON_BEF11","_DYN_DISABLE_FLUSH_ON_UNL12","_DYN_DISABLE_IKEY_DEPRECA18","_DYN_ENDPOINT_URL","_DYN_GET_TRANSMISSION_CON19","_DYN_INDEX_OF","_DYN_INSTRUMENTATION_KEY","_DYN_LOAD_APP_INSIGHTS","_DYN_ONUNLOAD_FLUSH","_DYN_PUSH","_DYN_QUEUE","_DYN_UPDATE_SNIPPET_DEFIN0","_DYN_VERSION","_internalSdkSrc","_ignoreUpdateSnippetProperties","fieldType","Default","Required","Array","Hidden","Telemetry","__proto__","FieldType","Initialization","snippet","_this","dependencies","properties","_sender","_snippetVersion","_evtNamespace","_houseKeepingNamespace","_core","_self","_initDefaults","sv","config","cs","ingest","ingestionendpoint","instrumentationkey","core","isErrMessageDisabled","logger","_getSKUDefaults","async","channels","channel","legacyMode","notificationManager","_updateSnippetProperties","snippetVer","internal","field","value","extensions","length","initialize","sdkSrc","emptyQueue","name","length_1","i","call","undefined","exception","properties_1","toString","appInsightsInstance","performHousekeeping","loadedPlugin","propertiesPlugin","plugin","_sessionManager","backup","added","excludePageUnloadEvents","appInsights","disablePageUnloadEvents","getSender","unload","isAsync","unloadComplete","cbTimeout","_getCurrentDependencies","context","user","prototype","addDependencyInitializer","dependencyInitializer","isModule","cdns","scrpt","document","currentScript","src","e","url","toLowerCase","idx"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPlugin } from \"@microsoft/applicationinsights-analytics-js\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { AnalyticsPluginIdentifier, BreezeChannelIdentifier, ConfigurationManager, ConnectionStringParser, ContextTagKeys, CorrelationIdHelper, CtxTagKeys, DEFAULT_BREEZE_ENDPOINT, DEFAULT_BREEZE_PATH, Data, DataSanitizer, DateTimeUtils, DisabledPropertyName, DistributedTracingModes, Envelope, Event, Exception, Extensions, HttpMethod, Metric, PageView, PageViewPerformance, ProcessLegacy, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, SampleRate, SeverityLevel, TelemetryItemCreator, Trace, UrlHelper, Util, parseConnectionString } from \"@microsoft/applicationinsights-common\";\r\nimport { AppInsightsCore, _throwInternal, addPageHideEventListener, addPageUnloadEventListener, arrForEach, arrIndexOf, createUniqueNamespace, doPerf, hasDocument, hasWindow, isArray, isFunction, isNullOrUndefined, isReactNative, isString, mergeEvtNamespace, objForEachKey, proxyAssign, proxyFunctions, removePageHideEventListener, removePageUnloadEventListener, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\r\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\r\nimport { STR_ADD_TELEMETRY_INITIALIZER, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_EVT_NAMESPACE, STR_FLUSH, STR_GET_COOKIE_MGR, STR_GET_PLUGIN, STR_POLL_INTERNAL_LOGS, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\r\nimport { _DYN_ADD_HOUSEKEEPING_BEF20, _DYN_APP_INSIGHTS, _DYN_CONFIG, _DYN_CONNECTION_STRING, _DYN_CONTEXT, _DYN_DIAGNOSTIC_LOG_INTER4, _DYN_DISABLE_FLUSH_ON_BEF11, _DYN_DISABLE_FLUSH_ON_UNL12, _DYN_DISABLE_IKEY_DEPRECA18, _DYN_ENDPOINT_URL, _DYN_GET_TRANSMISSION_CON19, _DYN_INDEX_OF, _DYN_INSTRUMENTATION_KEY, _DYN_LOAD_APP_INSIGHTS, _DYN_ONUNLOAD_FLUSH, _DYN_PUSH, _DYN_QUEUE, _DYN_UPDATE_SNIPPET_DEFIN0, _DYN_VERSION } from \"./__DynamicConstants\";\r\nvar _internalSdkSrc;\r\n// This is an exclude list of properties that should not be updated during initialization\r\n// They include a combination of private and internal property names\r\nvar _ignoreUpdateSnippetProperties = [\r\n    STR_SNIPPET, \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"\r\n];\r\n// Re-exposing the Common classes as Telemetry, the list was taken by reviewing the generated code for the build while using\r\n// the previous configuration :-\r\n// import * as Common from \"@microsoft/applicationinsights-common\"\r\n// export const Telemetry = Common;\r\nvar fieldType = {\r\n    Default: 0 /* FieldType.Default */,\r\n    Required: 1 /* FieldType.Required */,\r\n    Array: 2 /* FieldType.Array */,\r\n    Hidden: 4 /* FieldType.Hidden */\r\n};\r\n/**\r\n * Telemetry type classes, e.g. PageView, Exception, etc\r\n */\r\nexport var Telemetry = {\r\n    __proto__: null,\r\n    PropertiesPluginIdentifier: PropertiesPluginIdentifier,\r\n    BreezeChannelIdentifier: BreezeChannelIdentifier,\r\n    AnalyticsPluginIdentifier: AnalyticsPluginIdentifier,\r\n    Util: Util,\r\n    CorrelationIdHelper: CorrelationIdHelper,\r\n    UrlHelper: UrlHelper,\r\n    DateTimeUtils: DateTimeUtils,\r\n    ConnectionStringParser: ConnectionStringParser,\r\n    FieldType: fieldType,\r\n    RequestHeaders: RequestHeaders,\r\n    DisabledPropertyName: DisabledPropertyName,\r\n    ProcessLegacy: ProcessLegacy,\r\n    SampleRate: SampleRate,\r\n    HttpMethod: HttpMethod,\r\n    DEFAULT_BREEZE_ENDPOINT: DEFAULT_BREEZE_ENDPOINT,\r\n    Envelope: Envelope,\r\n    Event: Event,\r\n    Exception: Exception,\r\n    Metric: Metric,\r\n    PageView: PageView,\r\n    RemoteDependencyData: RemoteDependencyData,\r\n    Trace: Trace,\r\n    PageViewPerformance: PageViewPerformance,\r\n    Data: Data,\r\n    SeverityLevel: SeverityLevel,\r\n    ConfigurationManager: ConfigurationManager,\r\n    ContextTagKeys: ContextTagKeys,\r\n    DataSanitizer: DataSanitizer,\r\n    TelemetryItemCreator: TelemetryItemCreator,\r\n    CtxTagKeys: CtxTagKeys,\r\n    Extensions: Extensions,\r\n    DistributedTracingModes: DistributedTracingModes\r\n};\r\n/**\r\n * Application Insights API\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\r\nvar Initialization = /** @class */ (function () {\r\n    function Initialization(snippet) {\r\n        var _this = this;\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var dependencies;\r\n        var properties;\r\n        var _sender;\r\n        var _snippetVersion;\r\n        var _evtNamespace;\r\n        var _houseKeepingNamespace;\r\n        var _core;\r\n        dynamicProto(Initialization, this, function (_self) {\r\n            _initDefaults();\r\n            // initialize the queue and config in case they are undefined\r\n            _snippetVersion = \"\" + (snippet.sv || snippet[_DYN_VERSION /* @min:%2eversion */] || \"\");\r\n            snippet[_DYN_QUEUE /* @min:%2equeue */] = snippet[_DYN_QUEUE /* @min:%2equeue */] || [];\r\n            snippet[_DYN_VERSION /* @min:%2eversion */] = snippet[_DYN_VERSION /* @min:%2eversion */] || 2.0; // Default to new version\r\n            var config = snippet[_DYN_CONFIG /* @min:%2econfig */] || {};\r\n            if (config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */]) {\r\n                var cs = parseConnectionString(config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */]);\r\n                var ingest = cs.ingestionendpoint;\r\n                config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = ingest ? (ingest + DEFAULT_BREEZE_PATH) : config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */]; // only add /v2/track when from connectionstring\r\n                config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = cs.instrumentationkey || config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n            }\r\n            _self[_DYN_APP_INSIGHTS /* @min:%2eappInsights */] = new AnalyticsPlugin();\r\n            properties = new PropertiesPlugin();\r\n            dependencies = new DependenciesPlugin();\r\n            _sender = new Sender();\r\n            _core = new AppInsightsCore();\r\n            _self.core = _core;\r\n            var isErrMessageDisabled = isNullOrUndefined(config[_DYN_DISABLE_IKEY_DEPRECA18 /* @min:%2edisableIkeyDeprecationMessage */]) ? true : config[_DYN_DISABLE_IKEY_DEPRECA18 /* @min:%2edisableIkeyDeprecationMessage */];\r\n            if (!config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] && !isErrMessageDisabled) {\r\n                _throwInternal(_core.logger, 1 /* eLoggingSeverity.CRITICAL */, 106 /* _eInternalMessageId.InstrumentationKeyDeprecation */, \"Instrumentation key support will end soon, see aka.ms/IkeyMigrate\");\r\n            }\r\n            _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\r\n            _self[_DYN_CONFIG /* @min:%2econfig */] = config;\r\n            _getSKUDefaults();\r\n            _self[STR_FLUSH /* @min:%2eflush */] = function (async) {\r\n                if (async === void 0) { async = true; }\r\n                doPerf(_core, function () { return \"AISKU.flush\"; }, function () {\r\n                    arrForEach(_core[_DYN_GET_TRANSMISSION_CON19 /* @min:%2egetTransmissionControls */](), function (channels) {\r\n                        arrForEach(channels, function (channel) {\r\n                            channel[STR_FLUSH /* @min:%2eflush */](async);\r\n                        });\r\n                    });\r\n                }, null, async);\r\n            };\r\n            _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */] = function (async) {\r\n                if (async === void 0) { async = true; }\r\n                arrForEach(_core[_DYN_GET_TRANSMISSION_CON19 /* @min:%2egetTransmissionControls */](), function (channels) {\r\n                    arrForEach(channels, function (channel) {\r\n                        if (channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]) {\r\n                            channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]();\r\n                        }\r\n                        else {\r\n                            channel[STR_FLUSH /* @min:%2eflush */](async);\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n            _self[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */] = function (legacyMode, logger, notificationManager) {\r\n                if (legacyMode === void 0) { legacyMode = false; }\r\n                function _updateSnippetProperties(snippet) {\r\n                    if (snippet) {\r\n                        var snippetVer = \"\";\r\n                        if (!isNullOrUndefined(_snippetVersion)) {\r\n                            snippetVer += _snippetVersion;\r\n                        }\r\n                        if (legacyMode) {\r\n                            snippetVer += \".lg\";\r\n                        }\r\n                        if (_self[_DYN_CONTEXT /* @min:%2econtext */] && _self[_DYN_CONTEXT /* @min:%2econtext */].internal) {\r\n                            _self[_DYN_CONTEXT /* @min:%2econtext */].internal.snippetVer = snippetVer || \"-\";\r\n                        }\r\n                        // apply updated properties to the global instance (snippet)\r\n                        objForEachKey(_self, function (field, value) {\r\n                            if (isString(field) &&\r\n                                !isFunction(value) &&\r\n                                field && field[0] !== \"_\" && // Don't copy \"internal\" values\r\n                                arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {\r\n                                snippet[field] = value;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!\r\n                if (legacyMode && _self[_DYN_CONFIG /* @min:%2econfig */].extensions && _self[_DYN_CONFIG /* @min:%2econfig */].extensions.length > 0) {\r\n                    throwError(\"Extensions not allowed in legacy mode\");\r\n                }\r\n                doPerf(_self.core, function () { return \"AISKU.loadAppInsights\"; }, function () {\r\n                    var extensions = [];\r\n                    extensions[_DYN_PUSH /* @min:%2epush */](_sender);\r\n                    extensions[_DYN_PUSH /* @min:%2epush */](properties);\r\n                    extensions[_DYN_PUSH /* @min:%2epush */](dependencies);\r\n                    extensions[_DYN_PUSH /* @min:%2epush */](_self[_DYN_APP_INSIGHTS /* @min:%2eappInsights */]);\r\n                    // initialize core\r\n                    _core.initialize(_self[_DYN_CONFIG /* @min:%2econfig */], extensions, logger, notificationManager);\r\n                    _self[_DYN_CONTEXT /* @min:%2econtext */] = properties[_DYN_CONTEXT /* @min:%2econtext */];\r\n                    if (_internalSdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */]) {\r\n                        _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc = _internalSdkSrc;\r\n                    }\r\n                    _updateSnippetProperties(_self[STR_SNIPPET /* @min:%2esnippet */]);\r\n                    // Empty queue of all api calls logged prior to sdk download\r\n                    _self.emptyQueue();\r\n                    _self[STR_POLL_INTERNAL_LOGS /* @min:%2epollInternalLogs */]();\r\n                    _self[_DYN_ADD_HOUSEKEEPING_BEF20 /* @min:%2eaddHousekeepingBeforeUnload */](_this);\r\n                });\r\n                return _self;\r\n            };\r\n            _self[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\r\n                // apply full appInsights to the global instance\r\n                // Note: This must be called before loadAppInsights is called\r\n                proxyAssign(snippet, _self, function (name) {\r\n                    // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\r\n                    return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\r\n                });\r\n            };\r\n            _self.emptyQueue = function () {\r\n                // call functions that were queued before the main script was loaded\r\n                try {\r\n                    if (isArray(_self.snippet[_DYN_QUEUE /* @min:%2equeue */])) {\r\n                        // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                        var length_1 = _self.snippet[_DYN_QUEUE /* @min:%2equeue */].length;\r\n                        for (var i = 0; i < length_1; i++) {\r\n                            var call = _self.snippet[_DYN_QUEUE /* @min:%2equeue */][i];\r\n                            call();\r\n                        }\r\n                        _self.snippet[_DYN_QUEUE /* @min:%2equeue */] = undefined;\r\n                        delete _self.snippet[_DYN_QUEUE /* @min:%2equeue */];\r\n                    }\r\n                }\r\n                catch (exception) {\r\n                    var properties_1 = {};\r\n                    if (exception && isFunction(exception.toString)) {\r\n                        properties_1.exception = exception.toString();\r\n                    }\r\n                    // need from core\r\n                    // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n                    //     eLoggingSeverity.WARNING,\r\n                    //     _eInternalMessageId.FailedToSendQueuedTelemetry,\r\n                    //     \"Failed to send queued telemetry\",\r\n                    //     properties);\r\n                }\r\n            };\r\n            _self[_DYN_ADD_HOUSEKEEPING_BEF20 /* @min:%2eaddHousekeepingBeforeUnload */] = function (appInsightsInstance) {\r\n                // Add callback to push events when the user navigates away\r\n                if (hasWindow() || hasDocument()) {\r\n                    var performHousekeeping = function () {\r\n                        // Adds the ability to flush all data before the page unloads.\r\n                        // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\r\n                        // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                        // Telemetry here will help us analyze how effective this approach is.\r\n                        // Another approach would be to make this call sync with a acceptable timeout to reduce the\r\n                        // impact on user experience.\r\n                        // appInsightsInstance.context._sender.triggerSend();\r\n                        appInsightsInstance[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](false);\r\n                        // Back up the current session to local storage\r\n                        // This lets us close expired sessions after the cookies themselves expire\r\n                        if (isFunction(_this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */])) {\r\n                            var loadedPlugin = _this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */](PropertiesPluginIdentifier);\r\n                            if (loadedPlugin) {\r\n                                var propertiesPlugin = loadedPlugin.plugin;\r\n                                if (propertiesPlugin && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */] && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager) {\r\n                                    propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager.backup();\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    var added = false;\r\n                    var excludePageUnloadEvents = appInsightsInstance.appInsights[_DYN_CONFIG /* @min:%2econfig */].disablePageUnloadEvents;\r\n                    if (!_houseKeepingNamespace) {\r\n                        _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */] && _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */]());\r\n                    }\r\n                    if (!appInsightsInstance.appInsights.config[_DYN_DISABLE_FLUSH_ON_BEF11 /* @min:%2edisableFlushOnBeforeUnload */]) {\r\n                        // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n                        // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n                        if (addPageUnloadEventListener(performHousekeeping, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                            added = true;\r\n                        }\r\n                        // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\r\n                        if (addPageHideEventListener(performHousekeeping, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                            added = true;\r\n                        }\r\n                        // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\r\n                        // log the failure in this case\r\n                        if (!added && !isReactNative()) {\r\n                            _throwInternal(appInsightsInstance[_DYN_APP_INSIGHTS /* @min:%2eappInsights */].core.logger, 1 /* eLoggingSeverity.CRITICAL */, 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */, \"Could not add handler for beforeunload and pagehide\");\r\n                        }\r\n                    }\r\n                    if (!added && !appInsightsInstance.appInsights.config[_DYN_DISABLE_FLUSH_ON_UNL12 /* @min:%2edisableFlushOnUnload */]) {\r\n                        // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\r\n                        addPageHideEventListener(performHousekeeping, excludePageUnloadEvents, _houseKeepingNamespace);\r\n                    }\r\n                }\r\n            };\r\n            _self.getSender = function () {\r\n                return _sender;\r\n            };\r\n            _self.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n                _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](isAsync);\r\n                // Remove any registered event handlers\r\n                if (_houseKeepingNamespace) {\r\n                    removePageUnloadEventListener(null, _houseKeepingNamespace);\r\n                    removePageHideEventListener(null, _houseKeepingNamespace);\r\n                }\r\n                _core.unload && _core.unload(isAsync, unloadComplete, cbTimeout);\r\n            };\r\n            proxyFunctions(_self, _self[_DYN_APP_INSIGHTS /* @min:%2eappInsights */], [\r\n                STR_GET_COOKIE_MGR,\r\n                STR_TRACK_EVENT,\r\n                STR_TRACK_PAGE_VIEW,\r\n                \"trackPageViewPerformance\",\r\n                STR_TRACK_EXCEPTION,\r\n                \"_onerror\",\r\n                STR_TRACK_TRACE,\r\n                STR_TRACK_METRIC,\r\n                STR_START_TRACK_PAGE,\r\n                STR_STOP_TRACK_PAGE,\r\n                STR_START_TRACK_EVENT,\r\n                STR_STOP_TRACK_EVENT\r\n            ]);\r\n            proxyFunctions(_self, _getCurrentDependencies, [\r\n                STR_TRACK_DEPENDENCY_DATA,\r\n                \"addDependencyListener\",\r\n                \"addDependencyInitializer\"\r\n            ]);\r\n            proxyFunctions(_self, _core, [\r\n                STR_ADD_TELEMETRY_INITIALIZER,\r\n                STR_POLL_INTERNAL_LOGS,\r\n                \"stopPollingInternalLogs\",\r\n                STR_GET_PLUGIN,\r\n                \"addPlugin\",\r\n                STR_EVT_NAMESPACE,\r\n                \"addUnloadCb\",\r\n                \"getTraceCtx\"\r\n            ]);\r\n            proxyFunctions(_self, function () {\r\n                var context = properties[_DYN_CONTEXT /* @min:%2econtext */];\r\n                return context ? context.user : null;\r\n            }, [\r\n                STR_SET_AUTHENTICATED_USER_CONTEXT,\r\n                STR_CLEAR_AUTHENTICATED_USER_CONTEXT\r\n            ]);\r\n            function _getSKUDefaults() {\r\n                _self.config[_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] =\r\n                    _self.config[_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] && _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] > 0 ? _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] : 10000;\r\n            }\r\n            // Using a function to support the dynamic adding / removal of plugins, so this will always return the current value\r\n            function _getCurrentDependencies() {\r\n                return dependencies;\r\n            }\r\n            function _initDefaults() {\r\n                _evtNamespace = createUniqueNamespace(\"AISKU\");\r\n                _houseKeepingNamespace = null;\r\n                dependencies = null;\r\n                properties = null;\r\n                _sender = null;\r\n                _snippetVersion = null;\r\n            }\r\n        });\r\n    }\r\n    // Analytics Plugin\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    Initialization.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param {IEventTelemetry} event\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page, or similar container was displayed to the user.\r\n     * @param {IPageViewTelemetry} pageView\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackPageView = function (pageView) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a bag of performance information via the customProperties field.\r\n     * @param {IPageViewPerformanceTelemetry} pageViewPerformance\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackPageViewPerformance = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception that you have caught.\r\n     * @param {IExceptionTelemetry} exception\r\n     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually send uncaught exception telemetry. This method is automatically triggered\r\n     * on a window.onerror event.\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a diagnostic scenario such entering or leaving a function.\r\n     * @param {ITraceTelemetry} trace\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used\r\n     * to send regular reports of performance indicators.\r\n     *\r\n     * To send a single measurement, just use the `name` and `average` fields\r\n     * of {@link IMetricTelemetry}.\r\n     *\r\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\r\n     * aggregating multiple measurements and sending the resulting average and modifying\r\n     * the `sampleCount` field of {@link IMetricTelemetry}.\r\n     * @param {IMetricTelemetry} metric input object argument. Only `name` and `average` are mandatory.\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    Initialization.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    Initialization.prototype.stopTrackPage = function (name, url, customProperties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Initialization.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    Initialization.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Initialization.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Properties Plugin\r\n    /**\r\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\r\n     *\r\n     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`\r\n     * @param {string} authenticatedUserId\r\n     * @param {string} [accountId]\r\n     * @param {boolean} [storeInCookie=false]\r\n     */\r\n    Initialization.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\r\n     */\r\n    Initialization.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Dependencies Plugin\r\n    /**\r\n     * Log a dependency call (e.g. ajax)\r\n     * @param {IDependencyTelemetry} dependency\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackDependencyData = function (dependency) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Misc\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer.\r\n     * @param {boolean} [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.flush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\r\n     * Fall back to xhr sender if beacon is not supported.\r\n     * @param {boolean} [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.onunloadFlush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     * @returns {IApplicationInsights}\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n        if (legacyMode === void 0) { legacyMode = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Overwrite the lazy loaded fields of global window snippet to contain the\r\n     * actual initialized API methods\r\n     * @param {Snippet} snippet\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Call any functions that were queued before the main script was loaded\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.emptyQueue = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Initialization.prototype.pollInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Initialization.prototype.stopPollingInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Initialization.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Initialization.prototype.getSender = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Unload and Tear down the SDK and any initialized plugins, after calling this the SDK will be considered\r\n     * to be un-initialized and non-operational, re-initializing the SDK should only be attempted if the previous\r\n     * unload call return `true` stating that all plugins reported that they also unloaded, the recommended\r\n     * approach is to create a new instance and initialize that instance.\r\n     * This is due to possible unexpected side effects caused by plugins not supporting unload / teardown, unable\r\n     * to successfully remove any global references or they may just be completing the unload process asynchronously.\r\n     */\r\n    Initialization.prototype.unload = function (isAsync, unloadComplete) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    Initialization.prototype.getPlugin = function (pluginIdentifier) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    Initialization.prototype.addPlugin = function (plugin, replaceExisting, doAsync, addCb) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Returns the unique event namespace that should be used\r\n     */\r\n    Initialization.prototype.evtNamespace = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    Initialization.prototype.addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers. (added in v2.8.4)\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    Initialization.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    Initialization.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets the current distributed trace context for this instance if available\r\n     */\r\n    Initialization.prototype.getTraceCtx = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return Initialization;\r\n}());\r\nexport { Initialization };\r\n// tslint:disable-next-line\r\n(function () {\r\n    var sdkSrc = null;\r\n    var isModule = false;\r\n    var cdns = [\r\n        \"://js.monitor.azure.com/\",\r\n        \"://az416426.vo.msecnd.net/\"\r\n    ];\r\n    try {\r\n        // Try and determine whether the sdk is being loaded from the CDN\r\n        // currentScript is only valid during initial processing\r\n        var scrpt = (document || {}).currentScript;\r\n        if (scrpt) {\r\n            sdkSrc = scrpt.src;\r\n            // } else {\r\n            //     // We need to update to at least typescript 2.9 for this to work :-(\r\n            //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\r\n            //     let meta = import.meta;\r\n            //     sdkSrc = (meta || {}).url;\r\n            //     isModule = true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    if (sdkSrc) {\r\n        try {\r\n            var url = sdkSrc.toLowerCase();\r\n            if (url) {\r\n                var src = \"\";\r\n                for (var idx = 0; idx < cdns.length; idx++) {\r\n                    if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](cdns[idx]) !== -1) {\r\n                        src = \"cdn\" + (idx + 1);\r\n                        if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](\"/scripts/\") === -1) {\r\n                            if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](\"/next/\") !== -1) {\r\n                                src += \"-next\";\r\n                            }\r\n                            else if (url[_DYN_INDEX_OF /* @min:%2eindexOf */](\"/beta/\") !== -1) {\r\n                                src += \"-beta\";\r\n                            }\r\n                        }\r\n                        _internalSdkSrc = src + (isModule ? \".mod\" : \"\");\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n    }\r\n})();\r\n//# sourceMappingURL=Initialization.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}