{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Properties Plugin, 2.8.12\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"@microsoft/applicationinsights-common\";\nimport { _throwInternal, dateNow, dumpObj, getExceptionName, isFunction, newId, safeGetCookieMgr, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_ACQUISITION_DATE, _DYN_AUTOMATIC_SESSION, _DYN_CONFIG, _DYN_COOKIE_DOMAIN, _DYN_GET_NEW_ID, _DYN_ID_LENGTH, _DYN_JOIN, _DYN_LENGTH, _DYN_NAME_PREFIX, _DYN_RENEWAL_DATE, _DYN_SESSION_COOKIE_POSTF6, _DYN_SESSION_EXPIRATION_M7, _DYN_SESSION_RENEWAL_MS, _DYN_UPDATE } from \"../__DynamicConstants\";\nvar cookieNameConst = \"ai_session\";\nvar Session = /** @class */function () {\n  function Session() {}\n  return Session;\n}();\nexport { Session };\nvar _SessionManager = /** @class */function () {\n  function _SessionManager(config, core) {\n    var self = this;\n    var _storageNamePrefix;\n    var _cookieUpdatedTimestamp;\n    var _logger = safeGetLogger(core);\n    var _cookieManager = safeGetCookieMgr(core);\n    dynamicProto(_SessionManager, self, function (_self) {\n      if (!config) {\n        config = {};\n      }\n      if (!isFunction(config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */])) {\n        config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */] = function () {\n          return _SessionManager.acquisitionSpan;\n        };\n      }\n      if (!isFunction(config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */])) {\n        config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */] = function () {\n          return _SessionManager.renewalSpan;\n        };\n      }\n      _self[_DYN_CONFIG /* @min:%2econfig */] = config;\n      // sessionCookiePostfix takes the preference if it is configured, otherwise takes namePrefix if configured.\n      var sessionCookiePostfix = _self.config[_DYN_SESSION_COOKIE_POSTF6 /* @min:%2esessionCookiePostfix */] && _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_SESSION_COOKIE_POSTF6 /* @min:%2esessionCookiePostfix */]() ? _self.config[_DYN_SESSION_COOKIE_POSTF6 /* @min:%2esessionCookiePostfix */]() : _self.config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] && _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() ? _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() : \"\";\n      _storageNamePrefix = function _storageNamePrefix() {\n        return cookieNameConst + sessionCookiePostfix;\n      };\n      _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */] = new Session();\n      _self[_DYN_UPDATE /* @min:%2eupdate */] = function () {\n        // Always using Date getTime() as there is a bug in older IE instances that causes the performance timings to have the hi-bit set eg 0x800000000 causing\n        // the number to be incorrect.\n        var nowMs = dateNow();\n        var isExpired = false;\n        var session = _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\n        if (!session.id) {\n          isExpired = !_initializeAutomaticSession(session, nowMs);\n        }\n        var sessionExpirationMs = _self.config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */]();\n        if (!isExpired && sessionExpirationMs > 0) {\n          var sessionRenewalMs = _self.config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */]();\n          var timeSinceAcqMs = nowMs - session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */];\n          var timeSinceRenewalMs = nowMs - session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */];\n          isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0; // expired if the acquisition or last renewal are in the future\n          isExpired = isExpired || timeSinceAcqMs > sessionExpirationMs; // expired if the time since acquisition is more than session Expiration\n          isExpired = isExpired || timeSinceRenewalMs > sessionRenewalMs; // expired if the time since last renewal is more than renewal period\n        }\n        // renew if acquisitionSpan or renewalSpan has elapsed\n        if (isExpired) {\n          // update automaticSession so session state has correct id\n          _renew(nowMs);\n        } else {\n          // do not update the cookie more often than cookieUpdateInterval\n          if (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\n            _setCookie(session, nowMs);\n          }\n        }\n      };\n      /**\r\n       *  Record the current state of the automatic session and store it in our cookie string format\r\n       *  into the browser's local storage. This is used to restore the session data when the cookie\r\n       *  expires.\r\n       */\n      _self.backup = function () {\n        var session = _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\n        _setStorage(session.id, session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */], session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */]);\n      };\n      /**\r\n       * Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n       * initialize the automatic session.\r\n       * @returns true if values set otherwise false\r\n       */\n      function _initializeAutomaticSession(session, now) {\n        var isValid = false;\n        var cookieValue = _cookieManager.get(_storageNamePrefix());\n        if (cookieValue && isFunction(cookieValue.split)) {\n          isValid = _initializeAutomaticSessionWithData(session, cookieValue);\n        } else {\n          // There's no cookie, but we might have session data in local storage\n          // This can happen if the session expired or the user actively deleted the cookie\n          // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\n          // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\n          var storageValue = utlGetLocalStorage(_logger, _storageNamePrefix());\n          if (storageValue) {\n            isValid = _initializeAutomaticSessionWithData(session, storageValue);\n          }\n        }\n        return isValid || !!session.id;\n      }\n      /**\r\n       * Extract id, acquisitionDate, and renewalDate from an ai_session payload string and\r\n       * use this data to initialize automaticSession.\r\n       *\r\n       * @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n       * @returns true if values set otherwise false\r\n       */\n      function _initializeAutomaticSessionWithData(session, sessionData) {\n        var isValid = false;\n        var sessionReset = \", session will be reset\";\n        var tokens = sessionData.split(\"|\");\n        if (tokens[_DYN_LENGTH /* @min:%2elength */] >= 2) {\n          try {\n            var acqMs = +tokens[1] || 0;\n            var renewalMs = +tokens[2] || 0;\n            if (isNaN(acqMs) || acqMs <= 0) {\n              _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 27 /* _eInternalMessageId.SessionRenewalDateIsZero */, \"AI session acquisition date is 0\" + sessionReset);\n            } else if (isNaN(renewalMs) || renewalMs <= 0) {\n              _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 27 /* _eInternalMessageId.SessionRenewalDateIsZero */, \"AI session renewal date is 0\" + sessionReset);\n            } else if (tokens[0]) {\n              // Everything looks valid so set the values\n              session.id = tokens[0];\n              session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */] = acqMs;\n              session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */] = renewalMs;\n              isValid = true;\n            }\n          } catch (e) {\n            _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 9 /* _eInternalMessageId.ErrorParsingAISessionCookie */, \"Error parsing ai_session value [\" + (sessionData || \"\") + \"]\" + sessionReset + \" - \" + getExceptionName(e), {\n              exception: dumpObj(e)\n            });\n          }\n        }\n        return isValid;\n      }\n      function _renew(nowMs) {\n        var theConfig = _self[_DYN_CONFIG /* @min:%2econfig */] || {};\n        var getNewId = (theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */] ? theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */]() : null) || newId;\n        _self.automaticSession.id = getNewId(theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */] ? theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */]() : 22);\n        _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */][_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */] = nowMs;\n        _setCookie(_self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */], nowMs);\n        // If this browser does not support local storage, fire an internal log to keep track of it at this point\n        if (!utlCanUseLocalStorage()) {\n          _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 0 /* _eInternalMessageId.BrowserDoesNotSupportLocalStorage */, \"Browser does not support local storage. Session durations will be inaccurate.\");\n        }\n      }\n      function _setCookie(session, nowMs) {\n        var acq = session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */];\n        session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */] = nowMs;\n        var config = _self[_DYN_CONFIG /* @min:%2econfig */];\n        var renewalPeriodMs = config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */]();\n        // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\n        // Expiring the cookie will cause the session to expire even if the user isn't on the page\n        var acqTimeLeftMs = acq + config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */]() - nowMs;\n        var cookie = [session.id, acq, nowMs];\n        var maxAgeSec = 0;\n        if (acqTimeLeftMs < renewalPeriodMs) {\n          maxAgeSec = acqTimeLeftMs / 1000;\n        } else {\n          maxAgeSec = renewalPeriodMs / 1000;\n        }\n        var cookieDomain = config[_DYN_COOKIE_DOMAIN /* @min:%2ecookieDomain */] ? config[_DYN_COOKIE_DOMAIN /* @min:%2ecookieDomain */]() : null;\n        // if sessionExpirationMs is set to 0, it means the expiry is set to 0 for this session cookie\n        // A cookie with 0 expiry in the session cookie will never expire for that browser session.  If the browser is closed the cookie expires.\n        // Depending on the browser, another instance does not inherit this cookie, however, another tab will\n        _cookieManager.set(_storageNamePrefix(), cookie.join(\"|\"), config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */]() > 0 ? maxAgeSec : null, cookieDomain);\n        _cookieUpdatedTimestamp = nowMs;\n      }\n      function _setStorage(guid, acq, renewal) {\n        // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\n        // Browsers that don't support local storage won't be able to end sessions cleanly from the client\n        // The server will notice this and end the sessions itself, with loss of accurate session duration\n        utlSetLocalStorage(_logger, _storageNamePrefix(), [guid, acq, renewal][_DYN_JOIN /* @min:%2ejoin */](\"|\"));\n      }\n    });\n  }\n  // Removed Stub for _SessionManager.prototype.update.\n  // Removed Stub for _SessionManager.prototype.backup.\n  _SessionManager.acquisitionSpan = 86400000; // 24 hours in ms\n  _SessionManager.renewalSpan = 1800000; // 30 minutes in ms\n  _SessionManager.cookieUpdateInterval = 60000; // 1 minute in ms\n  return _SessionManager;\n}();\nexport { _SessionManager };","map":{"version":3,"names":["dynamicProto","utlCanUseLocalStorage","utlGetLocalStorage","utlSetLocalStorage","_throwInternal","dateNow","dumpObj","getExceptionName","isFunction","newId","safeGetCookieMgr","safeGetLogger","_DYN_ACQUISITION_DATE","_DYN_AUTOMATIC_SESSION","_DYN_CONFIG","_DYN_COOKIE_DOMAIN","_DYN_GET_NEW_ID","_DYN_ID_LENGTH","_DYN_JOIN","_DYN_LENGTH","_DYN_NAME_PREFIX","_DYN_RENEWAL_DATE","_DYN_SESSION_COOKIE_POSTF6","_DYN_SESSION_EXPIRATION_M7","_DYN_SESSION_RENEWAL_MS","_DYN_UPDATE","cookieNameConst","Session","_SessionManager","config","core","self","_storageNamePrefix","_cookieUpdatedTimestamp","_logger","_cookieManager","_self","acquisitionSpan","renewalSpan","sessionCookiePostfix","nowMs","isExpired","session","id","_initializeAutomaticSession","sessionExpirationMs","sessionRenewalMs","timeSinceAcqMs","timeSinceRenewalMs","_renew","cookieUpdateInterval","_setCookie","backup","_setStorage","now","isValid","cookieValue","get","split","_initializeAutomaticSessionWithData","storageValue","sessionData","sessionReset","tokens","acqMs","renewalMs","isNaN","e","exception","theConfig","getNewId","automaticSession","acq","renewalPeriodMs","acqTimeLeftMs","cookie","maxAgeSec","cookieDomain","set","join","guid","renewal"],"sources":["/Users/evaristlobo/Documents/GitHub/jhipster-sample-application/client/node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Session.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, dateNow, dumpObj, getExceptionName, isFunction, newId, safeGetCookieMgr, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_ACQUISITION_DATE, _DYN_AUTOMATIC_SESSION, _DYN_CONFIG, _DYN_COOKIE_DOMAIN, _DYN_GET_NEW_ID, _DYN_ID_LENGTH, _DYN_JOIN, _DYN_LENGTH, _DYN_NAME_PREFIX, _DYN_RENEWAL_DATE, _DYN_SESSION_COOKIE_POSTF6, _DYN_SESSION_EXPIRATION_M7, _DYN_SESSION_RENEWAL_MS, _DYN_UPDATE } from \"../__DynamicConstants\";\r\nvar cookieNameConst = \"ai_session\";\r\nvar Session = /** @class */ (function () {\r\n    function Session() {\r\n    }\r\n    return Session;\r\n}());\r\nexport { Session };\r\nvar _SessionManager = /** @class */ (function () {\r\n    function _SessionManager(config, core) {\r\n        var self = this;\r\n        var _storageNamePrefix;\r\n        var _cookieUpdatedTimestamp;\r\n        var _logger = safeGetLogger(core);\r\n        var _cookieManager = safeGetCookieMgr(core);\r\n        dynamicProto(_SessionManager, self, function (_self) {\r\n            if (!config) {\r\n                config = {};\r\n            }\r\n            if (!isFunction(config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */])) {\r\n                config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */] = function () { return _SessionManager.acquisitionSpan; };\r\n            }\r\n            if (!isFunction(config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */])) {\r\n                config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */] = function () { return _SessionManager.renewalSpan; };\r\n            }\r\n            _self[_DYN_CONFIG /* @min:%2econfig */] = config;\r\n            // sessionCookiePostfix takes the preference if it is configured, otherwise takes namePrefix if configured.\r\n            var sessionCookiePostfix = (_self.config[_DYN_SESSION_COOKIE_POSTF6 /* @min:%2esessionCookiePostfix */] && _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_SESSION_COOKIE_POSTF6 /* @min:%2esessionCookiePostfix */]()) ?\r\n                _self.config[_DYN_SESSION_COOKIE_POSTF6 /* @min:%2esessionCookiePostfix */]() :\r\n                ((_self.config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] && _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_NAME_PREFIX /* @min:%2enamePrefix */]()) ? _self[_DYN_CONFIG /* @min:%2econfig */][_DYN_NAME_PREFIX /* @min:%2enamePrefix */]() : \"\");\r\n            _storageNamePrefix = function () { return cookieNameConst + sessionCookiePostfix; };\r\n            _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */] = new Session();\r\n            _self[_DYN_UPDATE /* @min:%2eupdate */] = function () {\r\n                // Always using Date getTime() as there is a bug in older IE instances that causes the performance timings to have the hi-bit set eg 0x800000000 causing\r\n                // the number to be incorrect.\r\n                var nowMs = dateNow();\r\n                var isExpired = false;\r\n                var session = _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\r\n                if (!session.id) {\r\n                    isExpired = !_initializeAutomaticSession(session, nowMs);\r\n                }\r\n                var sessionExpirationMs = _self.config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */]();\r\n                if (!isExpired && sessionExpirationMs > 0) {\r\n                    var sessionRenewalMs = _self.config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */]();\r\n                    var timeSinceAcqMs = nowMs - session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */];\r\n                    var timeSinceRenewalMs = nowMs - session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */];\r\n                    isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0; // expired if the acquisition or last renewal are in the future\r\n                    isExpired = isExpired || timeSinceAcqMs > sessionExpirationMs; // expired if the time since acquisition is more than session Expiration\r\n                    isExpired = isExpired || timeSinceRenewalMs > sessionRenewalMs; // expired if the time since last renewal is more than renewal period\r\n                }\r\n                // renew if acquisitionSpan or renewalSpan has elapsed\r\n                if (isExpired) {\r\n                    // update automaticSession so session state has correct id\r\n                    _renew(nowMs);\r\n                }\r\n                else {\r\n                    // do not update the cookie more often than cookieUpdateInterval\r\n                    if (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\r\n                        _setCookie(session, nowMs);\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             *  Record the current state of the automatic session and store it in our cookie string format\r\n             *  into the browser's local storage. This is used to restore the session data when the cookie\r\n             *  expires.\r\n             */\r\n            _self.backup = function () {\r\n                var session = _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\r\n                _setStorage(session.id, session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */], session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */]);\r\n            };\r\n            /**\r\n             * Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n             * initialize the automatic session.\r\n             * @returns true if values set otherwise false\r\n             */\r\n            function _initializeAutomaticSession(session, now) {\r\n                var isValid = false;\r\n                var cookieValue = _cookieManager.get(_storageNamePrefix());\r\n                if (cookieValue && isFunction(cookieValue.split)) {\r\n                    isValid = _initializeAutomaticSessionWithData(session, cookieValue);\r\n                }\r\n                else {\r\n                    // There's no cookie, but we might have session data in local storage\r\n                    // This can happen if the session expired or the user actively deleted the cookie\r\n                    // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n                    // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n                    var storageValue = utlGetLocalStorage(_logger, _storageNamePrefix());\r\n                    if (storageValue) {\r\n                        isValid = _initializeAutomaticSessionWithData(session, storageValue);\r\n                    }\r\n                }\r\n                return isValid || !!session.id;\r\n            }\r\n            /**\r\n             * Extract id, acquisitionDate, and renewalDate from an ai_session payload string and\r\n             * use this data to initialize automaticSession.\r\n             *\r\n             * @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n             * @returns true if values set otherwise false\r\n             */\r\n            function _initializeAutomaticSessionWithData(session, sessionData) {\r\n                var isValid = false;\r\n                var sessionReset = \", session will be reset\";\r\n                var tokens = sessionData.split(\"|\");\r\n                if (tokens[_DYN_LENGTH /* @min:%2elength */] >= 2) {\r\n                    try {\r\n                        var acqMs = +tokens[1] || 0;\r\n                        var renewalMs = +tokens[2] || 0;\r\n                        if (isNaN(acqMs) || acqMs <= 0) {\r\n                            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 27 /* _eInternalMessageId.SessionRenewalDateIsZero */, \"AI session acquisition date is 0\" + sessionReset);\r\n                        }\r\n                        else if (isNaN(renewalMs) || renewalMs <= 0) {\r\n                            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 27 /* _eInternalMessageId.SessionRenewalDateIsZero */, \"AI session renewal date is 0\" + sessionReset);\r\n                        }\r\n                        else if (tokens[0]) {\r\n                            // Everything looks valid so set the values\r\n                            session.id = tokens[0];\r\n                            session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */] = acqMs;\r\n                            session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */] = renewalMs;\r\n                            isValid = true;\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 9 /* _eInternalMessageId.ErrorParsingAISessionCookie */, \"Error parsing ai_session value [\" + (sessionData || \"\") + \"]\" + sessionReset + \" - \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                }\r\n                return isValid;\r\n            }\r\n            function _renew(nowMs) {\r\n                var theConfig = (_self[_DYN_CONFIG /* @min:%2econfig */] || {});\r\n                var getNewId = (theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */] ? theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */]() : null) || newId;\r\n                _self.automaticSession.id = getNewId(theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */] ? theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */]() : 22);\r\n                _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */][_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */] = nowMs;\r\n                _setCookie(_self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */], nowMs);\r\n                // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n                if (!utlCanUseLocalStorage()) {\r\n                    _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 0 /* _eInternalMessageId.BrowserDoesNotSupportLocalStorage */, \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n                }\r\n            }\r\n            function _setCookie(session, nowMs) {\r\n                var acq = session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */];\r\n                session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */] = nowMs;\r\n                var config = _self[_DYN_CONFIG /* @min:%2econfig */];\r\n                var renewalPeriodMs = config[_DYN_SESSION_RENEWAL_MS /* @min:%2esessionRenewalMs */]();\r\n                // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n                // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n                var acqTimeLeftMs = (acq + config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */]()) - nowMs;\r\n                var cookie = [session.id, acq, nowMs];\r\n                var maxAgeSec = 0;\r\n                if (acqTimeLeftMs < renewalPeriodMs) {\r\n                    maxAgeSec = acqTimeLeftMs / 1000;\r\n                }\r\n                else {\r\n                    maxAgeSec = renewalPeriodMs / 1000;\r\n                }\r\n                var cookieDomain = config[_DYN_COOKIE_DOMAIN /* @min:%2ecookieDomain */] ? config[_DYN_COOKIE_DOMAIN /* @min:%2ecookieDomain */]() : null;\r\n                // if sessionExpirationMs is set to 0, it means the expiry is set to 0 for this session cookie\r\n                // A cookie with 0 expiry in the session cookie will never expire for that browser session.  If the browser is closed the cookie expires.\r\n                // Depending on the browser, another instance does not inherit this cookie, however, another tab will\r\n                _cookieManager.set(_storageNamePrefix(), cookie.join(\"|\"), config[_DYN_SESSION_EXPIRATION_M7 /* @min:%2esessionExpirationMs */]() > 0 ? maxAgeSec : null, cookieDomain);\r\n                _cookieUpdatedTimestamp = nowMs;\r\n            }\r\n            function _setStorage(guid, acq, renewal) {\r\n                // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n                // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n                // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n                utlSetLocalStorage(_logger, _storageNamePrefix(), [guid, acq, renewal][_DYN_JOIN /* @min:%2ejoin */](\"|\"));\r\n            }\r\n        });\r\n    }\r\n    _SessionManager.prototype.update = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     *  Record the current state of the automatic session and store it in our cookie string format\r\n     *  into the browser's local storage. This is used to restore the session data when the cookie\r\n     *  expires.\r\n     */\r\n    _SessionManager.prototype.backup = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    _SessionManager.acquisitionSpan = 86400000; // 24 hours in ms\r\n    _SessionManager.renewalSpan = 1800000; // 30 minutes in ms\r\n    _SessionManager.cookieUpdateInterval = 60000; // 1 minute in ms\r\n    return _SessionManager;\r\n}());\r\nexport { _SessionManager };\r\n//# sourceMappingURL=Session.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}